#include <SI_EFM8BB3_Defs.inc>

;TO DO
;	---VAZUT TREABA TIMER 2 PT TIMEOOT 2 ORE,AM SALTAT PESTE EL,DEZACTIVAT DE MOMENT
;---- libraria include tuya e ciudat pozitionata
;---- WIFI_DATA_2_SPIRITS  MODIFICAT SA APARA SI EROAREA CIND ESTE EROARE IN WIFI




;TEST_EXTENDED_KEYS
;WAIT_100MS	E OK
;wait_400ms de fapt sint 40ms
;WAIT_4MS=400uS
;#SHW_DIG	FOLOSESC CA SA GASES CUNDE NAIBA E UPDATE PE LA FOCURI
;TIMER_2_SPIRIT_SPACE:   AICIA UNDEVA SE STING SI LEDURILE
;TEST_EXTENDED_KEYS

;DISPLAY_INIT_TIMEOUT

;TIMPI
;BUZZING=150uS

;timer 2 0.0551479036137196 ca sa dea CU 65279 , 3600 sec una ora  

;TIMER_4 =50MS -> READ STATUS =750 mS SI REFRESH DISPLAY DIN VRAM
;			-> LA 4 CICLURI DE 	 REFRESH=> 3SEC UPDATE DISPLAY TOTAL







;  timp de citire timeout=103ms


;TMR4 PRI= 0
;TMR5 PRI= 1
;EXT1 PRI= 2
;I2C PRI = 3

;TMR0 PENTRU BCLELEL DE WAIT
;TMR2 == TOT BUZZER SI TOT RX GETCHAR_TOT1...NU FOLOSESC?
;TMR5=TOT PT SEND COMMAND
;TMR4 =PT REFRESH DISPLAY SI STATUS
;DETECT_2_SPIRIT  	NU ARE RET

;WRT_DIS_4_SEG  
;RF_LINK_WAIT_DISP	TEXTUL D EPU ..LA INCEPUT ASTEPT LINK
;WRITE_4_DIG_SS

;SET_TIMER_ON_ENTER
;wait_400ms   am activat dezactivat intreruperile 

;TY_SND_FRW_KYB	  TRIMIT FIRMWARE DE LA KEYBOARD



;SENZOR 1=40,2=80,3=20,MINUS=10 PLUS=08,0M/0FF=01,VITRO=04,WIFI=02


;********************************************************************
;	MEMORIA VIDEO V-RAM
;	SG0	SG1	SG2	SG3	SG4	SG5	SG6	LED
;   C0H	C1H	C2H	.....			C7H		LINE1
;	C8H	........				CFH		LINE2
;	D0H	D1H	........			D7H		LINE3
;	D8H	.....					DFH		LINE4

;led=F1,F2,F3,-,+,IND,WIFI,PWR
;01=PWRON,02?,04=WIFI,08=+,10=-,20=F3,40=F2,
;_______________________________________________
;_______________________________________________
;MEMEORIA XRAM 
;_______________________________________________
;_______________________________________________
;0X200-0X27F	;REZERVAT PENTRU FIRMWARE
;_______________________________________________
;_______________________________________________
;	E0H=0FFH VALUE TO SIGNAL END OF DATA







TY_IRQ	BIT	P1.0	;SEMNAL D EIRQ D ELA TUYA..COMANDA

T_SEL	BIT	P0.3	;TOUCH SELECT SIGNAL
T_IRQ	BIT	P0.7	;BITUL DE DETECTAT IRQ DE LA TACTIL

DIO		BIT	P2.6 	;DIG
CLK		BIT	P2.5   	;PUSH

STB		BIT	P2.4	;PUSH
BUZZ	BIT	P1.5

RELE	BIT	P0.6
ALERT	BIT	P0.7	;ISR DE LA CONTROLER KEYBOARD


LD_PW	BIT	P3.4	;POWER LED
LD_W	BIT	P3.3	;LEDWIFI
LD_V	BIT	P3.2	;LEDVITRO
LD_P	BIT	P3.1	;led plus key
LD_MIN	BIT	P3.0	;LED_MINIM
LDF3	BIT	P2.3
LDF2	BIT	P2.2	
LDF1	BIT	P2.1
LD_FL	BIT	P3.4
LD_TOT	BIT	P3.3 	;TIMER
LD_CLN	BIT	P3.2	;CLEANER
LD_LOCK	BIT	P3.1	;LOCK
LD_AX	BIT	P3.0	;AUXILIAR 1
LD_AX2	BIT	P2.4	;LED AUXILIAR 2


DBG		BIT	P1.0	;ESTE ACELASI CU PIN DE LA TUYA
WI_CN	BIT	P1.5	;PICIORUL D ECONTROL






;	I2C RUTINE
;******************************************
SMB_BUSY			BIT		000H
SMB_SENDWORDADDR_H	BIT		001H	;FLAGURI PT ADRESS H SI LOW
SMB_SENDWORDADDR_L	BIT		002H
SMB_RANDOMREAD		BIT		003H
SMB_ACKPOLL			BIT		004H
SMB_SEND_START		BIT		005H
;___________________________________
SMB_DATA_IN		   	DATA	008H	
SMB_DATA_OUT		DATA	009H
SMB_DATA_LEN 		DATA	00AH
WORD_ADDR_H  		DATA	00BH
WORD_ADDR_L  		DATA	00CH
SMB_RW				DATA	00DH
TARGET				DATA	00EH
;_____________________________________
WRITE		EQU		000H
REAd		EQU		001H
EEPROM_ADDR	EQU		0d4H	;ADRESA MEMORIEI
SMB_ADDR	EQU		0d4H	;ADRESA KEYBOARD
PAGE_SIZE	EQU		020H	;MARIME PAGINII DIN MEM I2C
	
SMB_MTSTA   EQU		0E0H
SMB_MTDB	EQU		0C0H	;STATUSURI VECTORI INTRERUPERE
SMB_MRDB	EQU		080H	

;******************************************




;00-05==BIT RESERVED FOR I2C
TOT_T2	BIT		006H	;FLAG DE TIMEOUT TIMER 0
TOT_SER	BIT		007H	;FLAG DE ERARE D ETIMEOUT LA SERIAL
FOCON	BIT		008H	;FLAG CA ESTE PORNIT DIN TASTATURA
ERR		BIT		009H	;EROARE SFISRIT D ESPATIU S AU TIMEOUT
TOT		BIT		00AH	;FLAG DE TIMEUT DIVERSE
TOT4	BIT		00BH	;FLAG DE TIMEUT TIMER4 
TOT4_D	BIT		00CH	;FLAG TIMEOUT FOR DISPLAY REFRESH
ST_UPD	BIT		00DH	;BIT SET WHEN IS A NEW STATUS UPDATED
AUX_0	BIT		00EH	;FLAG PT IESIEREA AUXILIARA	IN 1 ESTE ACTIVA
FLEX	BIT		00FH	;FLAG CARE ARATA FLEX ACTIV

TY_BODY	BIT		010H	;FLAG C ASTEPT BODY DE LA MSG TUYA
TY_CRCU	BIT		011H	;FLAG CA AM PRIMIT SI CRCUL
TUYA_MSG	BIT	012H	;FLAG C AAM PRIMIT MESAJ DE LA TUYA
KEYT	BIT		013H	;FLAG CA AM ATINS O KEYE,MERG PE INTRERUPERE
FOC_OFF	BIT		014H	;FLAG CARE ARATA CA AM FOCUL SELECTIONAT OPRIT..IL PRIMESC DELA STATUS
Y_KEY	BIT		015H	;FLAG CA AM ATINS O KEYE ,PT REPORNIT NUMARATOAREA DE 2 ORE
SOUND	BIT		016H	;FLAG CA AM SUNETUL ONN
F1_D	BIT		017H	;FLAG DETECTAT FOC_1  TIGAIE
F2_D	BIT		018H	;FLAG DETECTAT  FOC_2 TIGAIE


;08-0E I2C DATA RESEVED FOR 12C

TICK	DATA	00FH	;CONTOR DE CITE TICKURI DE 50 MS SA FAC 51041 CONTOR DE CLK/12 TIMER 3893H
ERHRD	DATA	010H	;REGISTRU PT ERORI HARDWARE (SENZOT TEMP,RADIO,PLM)
;TIKT4	DATA	011H	;CONTOR DE CITE TICKURI DE 50MS SA FACA TIMERUL 4
TIKT5_D	DATA	012H	;VALUE FOR TICK TIMER 4 DISPLAY REFRESH
TIKT2	DATA	013H	;TICK PT TIMER 2 CITI MULTIPLII D ETIMP FACE PINA LA OVERFLOW

PWR		DATA	015H	;PUTEREA COMANDATA
SPR_AD	DATA	016H	;ADDRES FOR SPIRIT
SPR_LD	DATA	017H	;VALUE FOR LEDS


FOC1	DATA	018H
FOC2	DATA	019H
FOC3	DATA	01AH	;CONFIGURATIII DE LA OCHIURI

FOC_A	DATA	01BH	;VALORI PENTRU DIVERSE VALORI FOCUL ACTUAL
FOC_B	DATA	01CH
FOC_C	DATA	01DH
FOC_D	DATA	01EH
FOC_E	DATA	01FH	;FOC NUMAR







;080-ENABLE
;040-VITRO
;020-WIFI
;X1-POWER 1
		
;020-023 RESERVED FOR FLAGS


;____________________	FOC STATUS REGISTERS
FOC1A	DATA	024H   ;STATUS 0=STANDBY/E=ERROR/P=VITRO/R=RADIO
FOC1B	DATA	025H   ;VALUE
FOC1C	DATA	026H   ;RFU1
FOC1D	DATA	027H   ;RFU2

FOC2A	DATA	028H
FOC2B	DATA	029H
FOC2C	DATA	02AH
FOC2D	DATA	02BH

FOC3A	DATA	02CH
FOC3B	DATA	02DH
FOC3C	DATA	02EH
FOC3D	DATA	02FH



;FLAG1	DATA	020H
;FLAG2	DATA	021H	
;FLAG3	DATA	022H	;SPACE RESERVED FOR BITD

;__________________		TRANSMITED PACKET
CLST	DATA	030H
INST	DATA	031H 	;INSTRUCTION(5B)+FIRE_NR(3B) 0=OK,STB/ 1=VITRO_POWER/ 2=WIFI/ E-ERROR
P1T		DATA	032H	;FIRE NUMBER
P0T		DATA	033H	;SENSE 0=RD  1=WR
BD0T	DATA	034H
;BD1T	DATA	035H
CRCT	DATA	036H	;CRC 

;__________________		RECIVED PACKET
CLSR	DATA	037H	;SENSE >=RD  >=WR
INSR	DATA	038H 	;INSTRUCTION P-POWER,S-STOP,A-START,E-ERROR
P1R		DATA	039H	;FIRE NUMBER
P0R		DATA	03AH	;DATA RELATIVE TO INSTRUCTION
BD0R	DATA	03BH
;BD1R	DATA	03CH
CRCR	DATA	03DH	;CRC 
TICKT2	DATA	03EH	;TICK OF TIMER 2 FOR BUZZING
VDET	DATA	03FH	;TICK OF 1S TO WAIT FOR TOOL DETECT

SG0		DATA	040H
SG1		DATA	041H
SG2		DATA	042H
SG3		DATA	043H
SG4		DATA	044H
SG5		DATA	045H
SG6		DATA	046H
SG7		DATA	047H

SGM		DATA	048H	;DATELE DE LA SEGMENT
GRID	DATA	049H	;ADRESA DE LA GRID
;------------------------------------------------------------------


KEY_H	DATA	04AH	;BUFER PT KEYBOARD
KEY_L	DATA	04BH

TOT_SEC_H	DATA	04CH	;TIMEOUT 2 ORE 	
TOT_SEC_L	DATA	04DH






TY_H	DATA	04CH	;COMANDA D ETUYA PRIMITA HIGH ADICA DATA POINT
TY_L	DATA	04DH

TY_OUTA	DATA	04EH
TY_OUTB	DATA	04FH
TY_OUTC	DATA	050H
TY_OUTD	DATA	051H








TY_CMD	DATA	042H	;HEADER PT TUYA
TY_CRC	DATA	043H	;CRC PT TUYA 
TY_LN_H	DATA	044H	;LUNGIME BLOK DATE
TY_LN_L	DATA	045H	;LUNGIME BLOK INTREG DE DATE
TY_LENG	DATA	046H	;LUNGIME DE DATE INTRUN BLOCK,ORDER.SUB 255 BYTE

TY_CNT	DATA	047H	;CONTOR PT DIVERSE FAZE UART_ISR	








LNK_ON	equ	0F5H 		;VALOARE DE PORNIRE
LNK_OFF	EQU	005H		;VAL PT STOP ALL
LNK_LCK	EQU	0AAH		;VAL PT LOCK KEYBOARD
LNK_CLN	EQU	055H		;VAL PT CLEAN

GRD1	EQU		023H
UART_TOT	EQU	010D	;TIMEOUT PT SERIAAL

;TIME5H	EQU	09BH		;VAL TIMER 5 PT 50MS
;TIME5L	EQU	0A0H

TIME2H	EQU	09BH		;VAL TIMER 2 PT 50MS
TIME2L	EQU	0A0H

;TIME5H	EQU	02BH		;VAL TIMER 5 PT 50MS
;TIME5L	EQU	0A0H



;TICK5D_V	EQU	00AH	;TICK OF 50 MS FOR DISPLAY REFRESH
TICK5D_V	EQU	00FH	;TICK OF 50 MS FOR DISPLAY REFRESH	=>750 mS


;VDET_V	EQU	01BH		;WAIT 10 TICK DE 1 MS
VDET_V	EQU	040H		;CIT INCERC SA DETECTEZ TIGAIA


;KSNS	EQU	088H		;SENSIBILITATEA DE LA TASTE pt mina fara cristal
KSNS	EQU	011H		;SENSIBILITATEA DE LA TASTE normal crystal


;*******************************************************************
RTC_H		EQU	03Ch	;VAL PT TIMER4 RTC 1 SECUNDA CALCULAT
RTC_L		equ	0AFh

;RTC_H		EQU	001h	;PT HIGH SPEED

;TOT_SV_H	EQU	004D	;VALORILE PNETUR TIMEOUT MINUTE
;TOT_SV_L	EQU	002D	;MULTIPLII DE 5 SEC SA DEA UN MINUT

TOT_SV_H	EQU	120D	;VALORILE PNETUR TIMEOUT MINUTE
TOT_SV_L	EQU	012D	;MULTIPLII DE 5 SEC SA DEA UN MINUT
;-------------------------------------------------------------------



















ORG 000H
 JMP INIT_DEVICE_TY
; JMP INIT_DEVICE

ORG 0013H	;EXT_1_ISR
	CALL EXT_1_ISR
RETI

ORG 02BH	;TIMER_2 ISR
	CALL TIMER_2_ISR
RETI

ORG 003BH		;I2C ISR
	CALL I2C_RUTINA
		CLR SMB0CN0_SI
	RETI

org 0043h	;pMa_isr
	CALL PMA_ISR
RETI

ORG	0073H		;TIMER3_ISR
	CALL TIMER_3_ISR
	RETI

ORG	007BH	;UART1 ISR
		CALL UART1_ISR
	RETI

ORG	008BH	;TIMER 4 ISR
	CALL TIMER_4_ISR
RETI


ORG	093H	;TIMER 5 ISR
	CALL TIMER_5_ISR
RETI

ORG 00FDH
;frw:
DB 043H,002,010H



ORG 0100H
;INIT_DEVICE:

; Peripheral specific initialization functions,
; Called from the Init_Device label
PCA_Init:
    mov  PCA0CN0,   #040h
    anl  PCA0MD,    #0BFh
    mov  PCA0MD,    #004h	;TIMERO 0 OVERFLOW
mov  PCA0MD,    #000h
    mov  PCA0CPM0,  #046h
    mov  PCA0CPH0,  #00AH 	;2400
mov  PCA0CPH0,  #0D5H 	;2400
;	mov  PCA0CPH0,  #00Dh 	;2000
    ret

Timer_Init:
 	mov  TCON,      #050h
ORL TCON,#00000100B		;EDGE EXT 1
    mov  TMOD,      #022h
;	mov  TMOD,      #021h	;TIMER0=16BIT
    mov  CKCON0,     #004h
	mov  TH0,       #0E7h  	;VITEZA I2C  
	mov  TH1,       #0CBh



	mov  TMR2RLL,   #0D1h
    mov  TMR2RLH,   #0FEh		;VALOARE PT 55,14 MS
	
;	mov  TMR2RLL,   #042h
;    mov  TMR2RLH,   #022h		;VALOARE PT 55,14 MS
    mov  TMR2L,     #042h
    mov  TMR2H,     #022h
	;=======================	PT SMBUS LOW CLK DETECT
	mov  TMR3CN0,   #004h
    mov  TMR3RLL,   #04Fh
    mov  TMR3RLH,   #09Ch

;	mov  TMR3RLL,   #0FEh
;    mov  TMR3RLH,   #0FFh

    ret

UART_Init:
    mov  SCON0,     #052h
MOV SFRPAGE,#020H
	mov  SCON1,     #052h
	MOV SBCON1,#040H	;ENABLE BAUD   PRESCALER 1
	mov UART1FCN1, #11000001B	;DEZACTIVEZ TIE UART1 INTRERUPERE GENERATA TX
	mov UART1FCN1, #11000111B	;DEZACTIVEZ TIE UART1 INTRERUPERE GENERATA TX SI TIMEOUT RX
	MOV SBRLH1,#0FDH	;BPS SPEED
	MOV SBRLL1,#082H
MOV SFRPAGE,#000H
	ret

SMBus_Init:
    mov  SMB0CF,    #080h
	mov  SMB0CF,    #088h 	;SCL LOW DETECT CU TIMER 3
    ret

SPI_Init:
    mov  SPI0CFG,   #070h
    mov  SPI0CN0,    #001h
    mov  SPI0CKR,   #008h
    ret

Port_IO_Init:
    ; P0.0  -  SCK  (SPI0), Open-Drain, Digital
    ; P0.1  -  MISO (SPI0), Open-Drain, Digital
    ; P0.2  -  MOSI (SPI0), Open-Drain, Digital
    ; P0.3  -  Unassigned,  Open-Drain, Digital
    ; P0.4  -  TX0 (UART0), Open-Drain, Digital
    ; P0.5  -  RX0 (UART0), Open-Drain, Digital
    ; P0.6  -  Skipped,     Open-Drain, Digital
    ; P0.7  -  Skipped,     Open-Drain, Digital

    ; P1.0  -  Unassigned,  Open-Drain, Digital
    ; P1.1  -  Unassigned,  Open-Drain, Digital
    ; P1.2  -  Unassigned,  Push-Pull,  Digital
    ; P1.3  -  Unassigned,  Open-Drain, Digital
    ; P1.4  -  Unassigned,  Open-Drain, Digital
    ; P1.5  -  Unassigned,  Push-Pull,  Digital
    ; P1.6  -  Unassigned,  Open-Drain, Digital
    ; P1.7  -  Unassigned,  Open-Drain, Digital

    ; P2.0  -  Unassigned,  Open-Drain, Digital
    ; P2.1  -  Unassigned,  Push-Pull,  Digital
    ; P2.2  -  Unassigned,  Push-Pull,  Digital
    ; P2.3  -  Unassigned,  Push-Pull,  Digital
    ; P2.4  -  Unassigned,  Push-Pull,  Digital
    ; P2.5  -  Unassigned,  Push-Pull,  Digital
    ; P2.6  -  Unassigned,  Open-Drain, Digital
    ; P2.7  -  Skipped,     Open-Drain, Digital


MOV SFRPAGE,#020H
;mov p0mdin,#0ffh
;mov p1mdin,#0ffh
;mov p2mdin,#0ffh
;mov p3mdin,#0ffh

;original fara tuya
;mov  P1MDOUT,   #024h
;    mov  P2MDOUT,   #03Eh
;    mov  P0SKIP,    #0C8h
;	 mov  P1SKIP,    #003h
;    mov  XBR0,      #003h
;    mov  XBR2,      #040h

;cu tuya	
	mov  P0MDOUT,   #040h
	mov  P1MDOUT,   #064h	;P1.6 PUSPULL	
    mov  P2MDOUT,   #03Eh
    mov  P0SKIP,    #0Cfh
    mov  P1SKIP,    #007h
    mov  XBR0,      #005h
; 	mov  XBR0,      #005h 	;FARA SPI PT DEBUG I2C PRIMII DOI PINITIMOUT
	mov xbr1,#001h
    mov  XBR2,      #041h	;activate second UART XBR2.0



mov  P1MASK,#00000001B		;	 P1.0
MOV   P1MAT,#00000001B

;mov  P2MASK,#01000000B		;P2.6	 
;MOV   P2MAT,#01000000B				

	

MOV SFRPAGE,#000H
    ret

Oscillator_Init:
;    mov  FLSCL,     #040h
    mov  CLKSEL,    #010h
	MOV LFO0CN,#00011100B	;LF OSC START
	ORL LFO0CN,#080H		;PORNESC OSCILATORUL
    ret

Interrupts_Init:
; 	mov  EIE1,      #001h
;	mov  IE,        #0A0h 	;OLD
	 mov  EIE1,      #001h	;SMBUS_ISR
	 mov  EIE1,      #081h	;SMBUS_ISR SI TIMER3ISR
MOV SFRPAGE,#010H
	mov  EIP1,      #001h
MOV SFRPAGE,#000H
    mov  IT01CF,    #071h
    mov  IE,        #0A4h

    ret


; Initialization function for device,
; Call Init_Device from your main program
Init_Device:
		;WATCHDOG DISABLE
	MOV WDTCN,#0DEh ; disable software watchdog timer
	MOV WDTCN,#0ADh
	CLR RELE
;sjmp $

    lcall PCA_Init
	lcall Timer_Init
    lcall UART_Init
    lcall SMBus_Init
	lcall SPI_Init	
	lcall Port_IO_Init
	lcall Oscillator_Init
	lcall Interrupts_Init
;---------------------------------------------------------
MOV SFRPAGE,#010H
;	MOV EIE2,#008H	;TIMER5 ISR ENABLED
	MOV EIE2,#00CH	;TIMER5 TIMER 4 ISR ENABLED
	MOV EIP2,#008H	;TIMER 5 ISR HIGH PRIORITY

	;_______________________________
	MOV TMR4CN0,#00000011B	;TMR4 CLK LOW FREC 
	MOV TMR4H ,#RTC_H
	MOV TMR4L ,#RTC_L
	MOV TMR4RLH,#RTC_H
	MOV TMR4RLL,#RTC_L
	;_______________________________


	MOV TMR5RLH,#036H
	MOV TMR5RLL,#080H
	MOV TIKT5_D,#TICK5D_V	;REWRITE VALUE FOR TICK 4 DISPLAY
	CLR TMR5CN0_TF5H
MOV SFRPAGE,#000H
;-------------------------------------------------------
	MOV TMR2H ,#TIME2H
	MOV TMR2L ,#TIME2L
	MOV TMR2RLH,#TIME2H
	MOV TMR2RLL,#TIME2L
	CLR TMR2CN0_TF2H


	MOV IP,#020H	;TIMER 2 ISR HIGH

	MOV SP,#058H
	 mov  PCA0CPM0,  #030H

	 ANL P3,#11100000B
	 
	 CLR BUZZ
	 
SETB LD_FL	
SETB LD_TOT	
SETB LD_CLN	
SETB LD_LOCK
SETB LD_AX	
SETB LD_AX2	

CLR F1_D
CLR F2_D	;STERG FLAGURILE DE FOC DETECTAT




	mov dptr,#KYB_CFG
	CLR A
	MOVC A,@A+DPTR
	MOV C,ACC.7
	MOV SOUND,C


   	CLR TOT_T2
CLR PSW_CY	
	CLR ST_UPD	;NO NEW STATUS UPDATE
	
	CLR TUYA_MSG
	
	
	MOV ERHRD,#000H	;STERG REGISTRUL DE ERORI
	CLR AUX_0	;STERG FLAG DE IESIREA RELE AUXILIAR
	SETB LD_AX
	CLR KEYT



	CALL  SYSTEM_INIT 	;INITIALIZE KEYBOARD DISPLAY
;PROBA SA VAD DACA MERE TOUCH

	;ASTEPT DUPA TUYA
	;ORL EIE1,#00000010B	;ACTIVEZ PMA INTRERUPERE




;PROBEZ CU INTRERUPEREA EXT1 SI SMBUS LAMAXIM
MOV SFRPAGE,#010H
	
	ORL EIP1H,#00000001B
	ORL EIP1, #00000001B
	
	;ORL IPH,  #00000100B
	ORL IPH,  #00100100B
	ORL IP,   #00000000B
	
MOV SFRPAGE,#000H
	
;============================================


; 	CALL DISPLAY_INIT

	TUYA_WAIT:
;	JB TY_IRQ,$

;	CALL DISPLAY_INIT

	CALL WAIT_4MS

;	SETB SOUND	;ACTIVEZ SUNETUL LA PORNIRE

 	CALL BUZZING

;		MOV R0,#000H
;		DJNZ R0,$
	MOV INST,#060H 		;asta s apernesc releele
	MOV P1T	,#000H	  
	MOV P0T,#000H

		CALL SEND_COMMAND

			MOV R0,#000H
			DJNZ R0,$
;	MOV FOC_A,#060H
;	MOV FOC_B,#000H
;	MOV FOC_C,#000H
;		CALL SEND_CMD
;			MOV R0,#000H
;			DJNZ R0,$
;	MOV FOC_A,#060H
;	MOV FOC_B,#000H
;	MOV FOC_C,#000H
;		CALL SEND_CMD

;NOP

	CLR FLEX	;STERG FLAGUL DE FLEX,DEFAULT DEZACTIVAT
	CLR TOT4
;SETB FLEX
	PLMU:
;	CALL WAIT_KEY_X
;		SJMP PLMU


	SETB LD_W
	SETB LD_V

;====================================

;SJMP $

;ORL EIE2,#00000001B	;ACTIVEZ UART1 ISR
CLR FOC_OFF


;opresc timer pt moment.pina [pornesc
	MOV SFRPAGE,#010H
		clr TMR5CN0_TR5	;START TIMER 4
		;clr TMR5CN0_TR5	;START TIMER 4
	MOV SFRPAGE,#000H


	;-------------	TRIMIT SEMNAL DE PORNIRE PT CELELALT KEYBOARD
	;TRIMIT #LNK_ON
	MOV A,#LNK_OFF
	CALL SENDCHAR1
		call wait_4ms
	MOV A,#LNK_OFF
	CALL SENDCHAR1
	;-------------


	NON_LOCKED:
	CLR KEYT

;CALL DISPLAY_INIT_tuya	


JMP wait_onoff_k
















	;astept keya on/off
wait_onoff_k:
	;--------
	MOV SFRPAGE,#020H
		MOV C,SCON1_RI
	MOV SFRPAGE,#000H
		JNB PSW_CY,wait_onoff_ka
		MOV SFRPAGE,#020H
			MOV A,SBUF1
		MOV SFRPAGE,#000H	
		CJNE A,#LNK_ON,wait_onoff_ka
		SJMP START_KEYBOARD_CONTROL


wait_onoff_ka:	
	JB LD_LOCK,WAIT_NON_LOCKED
		NOP


	WAIT_NON_LOCKED:
	JB KEYT,wait_onoff_k_1
sjmp wait_onoff_k
	JNB TUYA_MSG,wait_onoff_k
WAIT_TY:	
	JMP TUYA_RMOTE_CONTROL



wait_onoff_k_1:	
	CLR KEYT
		MOV A,KEY_L
		CJNE A,#001H,TEST_LOCK_KEY
		MOV A,KEY_H
		CJNE A,#000H,TEST_LOCK_KEY
		SJMP START_KEYBOARD_CONTROL
	TEST_LOCK_KEY:
		MOV A,KEY_L
		CJNE A,#000H,wait_onoff_k
		MOV A,KEY_H
		CJNE A,#010H,wait_onoff_k
			CALL ENABLE_LOCK
		SJMP wait_onoff_k

START_KEYBOARD_CONTROL:
;			MOV SFRPAGE,#010H
;	SETB TMR5CN0_TR5	;START TIMER 4
;			MOV SFRPAGE,#000H


;SJMP WAIT_ONOFF_K
;0001=ON
;0008=+
;4000=-
;1000=F1
;0040=F2
;0020=F3
;================
;IE=A4	TR2,EX1	
;IP=A0		TM2PL=1
;IPH=84		EX1PH=1
;-------	PRIORITATE
; EX1=2
; TR2=1

;===============
;EIE1=03	;PORT,SMB

;EIP1=01	;PORTL=1
;EIP1H=01	;PORTH=1
;------------
;PORT=3


;EIE2=0D	;TR5,TR4,UART1

;EIP2=08
;EIP2H=00
;--------
;TMR5=1
;AM SI TMR3 PT SMBUS LOCKOUT

;ITO1CF=71	EXT1=P0.7/KEY ,EXT0=0.1/NU E ACTIV ISR EXT0
;MOV SFRPAGE,#020H
;SETB SCON1_TI
;MOV SFRPAGE,#000H
;CALL TY_SND_FRW_KYB	 	;TRIMIT VERSIUNE DE KEYBOARD

	SETB TMR2CN0_TR2		;PORNESC TIMER2
	MOV TOT_SEC_H,#TOT_SV_H	;VALORILE PT TIMEOUT
	MOV TOT_SEC_L,#TOT_SV_L
	CLR Y_KEY 				;STERG FLAGUL CA AM APASAT O TASTA

	ANL EIE1,#11111101B		;DISABLED PMA,ASHA NU MAI AM TREABA CU TUYA

;ON_TUYA:						;PORNIT CU TUYA
	;tramit semnal de oprire
	;-------------	TRIMIT SEMNAL DE PORNIRE PT CELELALT KEYBOARD
	;TRIMIT #LNK_ON
	MOV A,#LNK_ON
	CALL SENDCHAR1
		call wait_4ms
	MOV A,#LNK_ON
	CALL SENDCHAR1
	;-------------
	CALL BUZZING




	;CALL DISPLAY_INIT
	CALL DISPLAY_INIT_tuya	
	CALL SPIRIT_SPACE_FORMAT
;___________________________________________
	MOV DPTR,#SPIRIT_TABLE
		MOV SPR_AD,#0C0H	;SPIRIT START ADDRES	
	;trimit semnal d epornire releu
	;MOV INST,#060H
	;MOV P1T	,#000H	  
	;MOV P0T,#001H
;clr LD_AX
		;CALL SEND_COMMAND
;CLR TOT4	;DE MOMENT PT TIMOUT KEYBOARD
	SETB RELE	
clr LD_TOT
;	call wait_400ms
;	MOV INST,#060H
;	MOV P1T	,#000H	  
;	MOV P0T,#001H
;		CALL SEND_COMMAND
;setb ld_ax
	call wait_400ms
CPL ld_TOT
	call wait_400ms
CPL ld_TOT
	call wait_400ms
;	call wait_400ms
;	call wait_400ms

;	call wait_400ms
;	call wait_400ms
;	call wait_400ms
;	call wait_400ms
;	call wait_400ms
;	call wait_400ms

;call wait_400ms
CPL ld_TOT
	
	MOV FOC_A,#001H
	MOV FOC_B,#000H
		CALL SEND_CMD
			MOV R0,#000H
			DJNZ R0,$
CPL ld_TOT
	MOV FOC_A,#002H
	MOV FOC_B,#000H
		CALL SEND_CMD
			MOV R0,#000H
			DJNZ R0,$
CPL ld_TOT
	MOV FOC_A,#003H
	MOV FOC_B,#000H
		CALL SEND_CMD
CPL ld_TOT	
	
	
	
	CALL SYSTEM_CHECK
		mov r0,#000h
		djnz r0,$
CPL ld_TOT
	CALL SYSTEM_CHECK
		mov r0,#000h
		djnz r0,$
CPL ld_TOT
	CALL SYSTEM_CHECK
		mov r0,#000h
		djnz r0,$
setb ld_TOT




CLR TOT4	;DE MOMENT PT TIMOUT KEYBOARD
			MOV SFRPAGE,#010H
	SETB TMR5CN0_TR5	;START TIMER 5
	SETB TMR4CN0_TR4	;START TIMER 4	
			MOV SFRPAGE,#000H




	CALL SHOW_POWER_ON_LEDS
	MOV R0,#0C7H	;UND EE PRIMUL DIN SPIRIT DELA LED
	MOVX A,@R0


			MOV SFRPAGE,#010H
	SETB TMR5CN0_TR5	;START TIMER 4
			MOV SFRPAGE,#000H





CLR TOT4	;DE MOMENT PT TIMOUT KEYBOARD




	;CEVA PT SA SE OPREASCA DUPA 15 S NEPORNIT
WAIT_FIRE_PREPARE:
;	CLR LDF1
;	CLR LDF2
;	CLR LDF3		;LIGHT FIRE ON
;	CALL SET_3LED_SPIRIT
	;_________________________	TIMER 4 START
;	CALL CLR_TCH_KEY
;	CALL WAIT_400MS
	CALL CLR_TCH_KEY

	
CALL SHOW_POWER_ON_LEDS
	MOV R0,#0C7H	;UND EE PRIMUL DIN SPIRIT DELA LED
	MOVX A,@R0
;CALL WRT_SPIRIT_2_LED	;SA NU MAI ASTEPT DUPA UPDATE
CALL SPIRIT_2_SEG
		MOV A,SPR_AD
CALL WRT_LED_8_DATA		;SA NU MAI ASTEPT DUPA UPDATE


;	CLR LD_AX
;	CLR LD_AX2
	CLR LD_FL
	CLR KEYT			;CA DACA RAMINE KEYE RANDOM,NU IESE DIN EA
		NOP
		NOP


;**************************************************************************
;	MAIN PROGRAM START
;*************************************************************************8
WAIT_FIRE_SELECT:
	JNB KEYT,$
		CLR KEYT
;	WAIT_FIRE_SELECT_A:		;ASTA PTE KEY APASATE CARE N SINT PUTERI 

	WAIT_FIRE_SELECT_1:

	SELECTED_FLEX:
		   MOV A,KEY_L
		   CJNE A,#000H,SELECTED_FIRE_1
			MOV A,KEY_H
			CJNE A,#002H,SELECTED_FIRE_1
		;---------------------	VERIFIC DACA E FOCUL 1,2 PORNIT SAU OPRIT
			JB FLEX,SELECTED_FLEX_A	;CA SA IL POT SELECTIONA CIND ESTE PORNIT FLEX..CA SA IL OPRESC..PLM
		;ATENTIE 001-TRE S ASCHIMB SA FAC CITIREA imediat,sa nu mai caut in cache

			MOV A,FOC1A
				CJNE A,#001H,WAIT_FIRE_SELECT
			MOV A,FOC2A
				CJNE A,#002H,WAIT_FIRE_SELECT
		
		SELECTED_FLEX_A:
		CALL FLEX_SELECTED			;PUN SYMBOLUL DE FLEX IN DISPLAY SI VRAM
			MOV FOC_A,FOC1A	 		;SIMULEZ CA ESTE FOC 1 SI DUBLEZ COMENZILE
			MOV FOC_B,FOC1B
			MOV FOC_C,FOC1C
			MOV FOC_D,FOC1D	
				CALL VITRO_SELECTED_MAIN  ;PARE CA MERGE
				JMP WAIT_FIRE_SELECT

		JMP SELECTED_FIRE_OUT






	SELECTED_FIRE_1: ;00100H
		JB FLEX,SELECTED_FIRE_0		;NU POT SA ATING 1+2 CIND E FLEX PORNIT
		MOV A,KEY_L
		CJNE A,#000H,SELECTED_FIRE_2
			MOV A,KEY_H
			CJNE A,#001H,SELECTED_FIRE_2
		CALL BUZZING
			
		MOV FOC_A,#001H
;		CALL READ_STATUS
;			MOV FOC_A,INSR
;			MOV FOC_B,P1R
;			MOV FOC_C,P0R
;			MOV FOC_D,BD0R			
		;CALL STATUS_2_SPIRITS
;		CALL KEY_SEL_2_SPIRIT
		CALL UPDATE_STAT_DISPLAY	
			MOV A,INSR
				ANL A,#0F0H
				CJNE A,#0E0H,SELECTED_FIRE_1_X
					JMP WAIT_FIRE_SELECT
			SELECTED_FIRE_1_X:	
			JMP SELECTED_FIRE_OUT
	SELECTED_FIRE_2:;0040H
		MOV A,KEY_L
		CJNE A,#040H,SELECTED_FIRE_0
			MOV A,KEY_H
			CJNE A,#000H,SELECTED_FIRE_0
		CALL BUZZING
		MOV FOC_A,#002H
;		CALL READ_STATUS
;			MOV FOC_A,INSR
;			MOV FOC_B,P1R
;			MOV FOC_C,P0R
;			MOV FOC_D,BD0R			
;		CALL KEY_SEL_2_SPIRIT
		CALL UPDATE_STAT_DISPLAY
			MOV A,INSR
				ANL A,#0F0H
				CJNE A,#0E0H,SELECTED_FIRE_2_X
					JMP WAIT_FIRE_SELECT
			SELECTED_FIRE_2_X:
			SJMP SELECTED_FIRE_OUT
	
	SELECTED_FIRE_0:;O20H
		MOV A,KEY_L
		CJNE A,#001H,SELECTED_FIRE_00
			MOV A,KEY_H
			CJNE A,#000H,SELECTED_FIRE_00
				SJMP SELECTED_FIRE_000
	SELECTED_FIRE_00:	
	
	SELECTED_LOCK:
		CALL TEST_EXTENDED_KEYS
	   jmp WAIT_FIRE_SELECT
	SELECTED_AUX1:
	
	SELECTED_OUT:
		jmp WAIT_FIRE_SELECT
		
		SELECTED_FIRE_000:
;			CJNE A,#000H,WAIT_FIRE_SELECT
		CALL BUZZING
		SELECTED_FIRE_0A:		;DOUBLE TP FOR POWER OFF
			;CALL WAIT_KEY_X	
			JNB KEYT,$
				CLR KEYT
				MOV A,KEY_L
				CJNE A,#001H,SELECTED_FIRE_0B	;IF NOT POWER OG,IS ANOTHER SELECTED FIRE	
					MOV A,KEY_H
					CJNE A,#000H,SELECTED_FIRE_0B
				CALL BUZZING
				;send stop to all fires
				;SEND POWER_OFF ORDER_fire_1
;				MOV A,FOC_A
;				ANL A,#00001111B	;DELETE INSTRUCTION
				MOV FOC_A,#001H
				MOV FOC_B,#000H
				CALL SEND_CMD
					MOV FOC_A,#002H
					MOV FOC_B,#000H
					CALL SEND_CMD
				MOV FOC_A,#003H
				MOV FOC_B,#000H
				CALL SEND_CMD
				CALL WAIT_400MS
ORL RSTSRC,#010H
	
			SELECTED_FIRE_0B:
			JMP WAIT_FIRE_SELECT_1


	SELECTED_FIRE_OUT:		;already have the selected fire in the cache (FOC_A,...FOC_D)
;	____________________________________________________________________________________________
	
	SELECT_FIRE_OPERATION:	;ALREADY CACHE SELECTED
		MOV A,FOC_A
		ANL A,#11110000B	;LEAVE ONLY STATUS
;SJMP SELECT_FIRE_OPERATION_1
		CJNE A,#0E0H,SELECT_FIRE_OPERATION_1 
			CALL ERROR_2_SPIRIT_SPACE
				CALL WAIT_RELEASE
		JMP  WAIT_FIRE_SELECT	;START SELECTION AGAIN
		SELECT_FIRE_OPERATION_1:
			CJNE A,#000H,SELECT_FIRE_OPERATION_SELECTED

				
			SELECT_FIRE_OPERATION_1A:
			CALL WAIT_KEY_X
			;NOP

			SELECT_FIRE_OPERATION_TST_VITRO:
			MOV A,KEY_L
				CJNE A,#004H,SELECT_FIRE_OPERATION_TST_WIFI
				MOV A,KEY_H
				CJNE A,#000H,SELECT_FIRE_OPERATION_TST_WIFI
					
					CALL BUZZING
;					CALL CLR_WIFI_LED
;						CALL SPIRIT_2_SEG
;						MOV A,SPR_AD
;						CALL WRT_LED_8_DATA		;SA NU MAI ASTEPT DUPA UPDATE
					;SETB LD_W
						CALL VITRO_SELECTED_MAIN
JMP WAIT_FIRE_SELECT
			SELECT_FIRE_OPERATION_TST_WIFI:
				;CJNE A,#002H,SELECT_FIRE_OPERATION_1A
				MOV A,KEY_L
				CJNE A,#002H,SELECT_FIRE_OPERATION_TST_X_KEY
				MOV A,KEY_H
				CJNE A,#000H,SELECT_FIRE_OPERATION_TST_X_KEY
					CALL BUZZING
;					CALL CLR_VITRO_LED
;					CALL UPDATE_STAT_DISPLAY
				   ;HKJHKJH

					CALL WIFI_SELECTED_MAIN
	CALL KEY_SEL_SHOW_LED_MSG
JMP WAIT_FIRE_SELECT
		    SELECT_FIRE_OPERATION_TST_X_KEY: 	
	CALL KEY_SEL_SHOW_LED_MSG
JMP WAIT_FIRE_SELECT_1
;					JNZ SELECT_FIRE_OPERATION_OUT

					CALL CLR_WIFI_LED
					CALL CLR_VITRO_LED
						CLR LDF1
						CLR LDF2
						CLR LDF3		;LIGHT FIRE ON
						CALL SET_3LED_SPIRIT
						CALL SPIRIT_4_DG_CLEAR
	
	
	
	
	
	SELECT_FIRE_OPERATION_OUT:
	JMP WAIT_FIRE_SELECT_1


	SELECT_FIRE_OPERATION_SELECTED:
		MOV A,FOC_A
		ANL A,#11110000B
		CJNE A,#010H,SELECT_FIRE_OPERATION_SELECTED_1
;			CALL CLR_WIFI_LED
;			CALL SET_VITRO_LED
				CALL VITRO_SELECTED_MAIN
JMP WAIT_FIRE_SELECT
		SELECT_FIRE_OPERATION_SELECTED_1:
		CJNE A,#020H,SELECT_FIRE_OPERATION_SELECTED_2	
			CALL SET_WIFI_LED
			CALL CLR_VITRO_LED
				CALL 	WIFI_SELECTED_MAIN
JMP WAIT_FIRE_SELECT
		SELECT_FIRE_OPERATION_SELECTED_2:
			SJMP $






;***********************************************************************
;	VITRO SELECTED MAIN OPERATION
;**********************************************************************8
VITRO_SELECTED_MAIN:
;	JNB FLEX,VITRO_SELECTED_MAIN_NO_FLEX
;		JMP VITRO_SELECTED_SET_POWER
	
	CALL UPDATE_STAT_DISPLAY



	VITRO_SELECTED_MAIN_NO_FLEX:
	;TEST IF IS ALREADY POWERED ON
	MOV A,FOC_A
	ANL A,#11110000B
	;CJNE A,#000H,VITRO_SELECTED_SET_POWER
	CJNE A,#000H,VITRO_CONTINUA
	   	SJMP VITRO_SEND_DETECT
	VITRO_CONTINUA:		;ESTE DEJA PORNITA
		JMP VITRO_SELECTED_SET_POWER
	
	
	VITRO_SEND_DETECT:
	;SEND TOOL DETECT=START VITRO
MOV SFRPAGE,#010H
	clr TMR5CN0_TR5	;START TIMER 4
MOV SFRPAGE,#000H
	;===================	pun pe display -
	CALL LED_INDON_WIFIOFF
		CALL SPIRIT_2_SEG
	;============================
		 MOV A,FOC_A
		 ANL A,#00FH
		 	CLR PSW_CY
		 	SUBB A,#001H
		 MOV B,#0C0H
		 ADD A,B
		 MOV B,A
		 MOV A,#040H
		 CALL WRT_DIS_1_SEG


		;==============
				
		
		
		MOV A,FOC_A
		ANL A,#00001111B
		ORL A,#00010000B	;VITRO INSTRUCITON-1X
		MOV INST,A
		;MOV P1T,#001H		;COMMAND FOR START DETECTION
		MOV P1T,#080H		;COMMAND FOR START DETECTION
	

SND_CMD:	
;MOV SFRPAGE,#010H
;	CLR TMR5CN0_TR5	;OPRESC TIMER 4,CA MOLESTA TIMER 5
;MOV SFRPAGE,#000H
;		CLR     SCON0_RI
;		MOV A,SBUF0
;		CLR     SCON0_RI
;		CALL READ_STATUS
		CALL SEND_COMMAND
		;=====================	TEST DACA ESTE SI FLEX,ATUNCI ADAUG FOC 2 COMENZI
		MOV A ,FOC_A
		ANL A,#00001111B
			CJNE A,#001H,DETECT_NOT_FLEX
			JNB FLEX,DETECT_NOT_FLEX
				CALL FIRE_VITRO_DETECT 	;DETECTA FOC 1
				;DACA FOC_B=08,CONTINUA
				MOV A,FOC_B
				CJNE A,#008H,TRY_FLEX_FIRE2
					SJMP TEST_FLEX_FIRE2
				TRY_FLEX_FIRE2:	  		;TESTEZ DACA FOCUL 2 ARE TIGAIE
					MOV FOC_A,#002H
					MOV INST,#012H
					MOV P1T,#080H		;COMMAND FOR START DETECTION
					CALL SEND_COMMAND
					CALL FIRE_VITRO_DETECT 	;DETECTA FOC 1
						MOV A,FOC_B
						CJNE A,#008H, TRY_FLEX_FIRE2_NODETECTED
							CALL FLX_AUTOSEL_FIRE2
							JMP VITRO_WAIT_DETECTED_2
				
					TRY_FLEX_FIRE2_NODETECTED:
						CALL FLX_STOP_ALL
							JMP VITRO_WAIT_DETECTED_2
				
				TEST_FLEX_FIRE2:
				MOV FOC_A,#002H
				MOV INST,#012H
				MOV P1T,#080H		;COMMAND FOR START DETECTION
				CALL SEND_COMMAND
				CALL FIRE_VITRO_DETECT 	;DETECTA FOC 1
					MOV A,FOC_B
					CJNE A,#008H,FLEX_FIRE_1_OK
				;FLEX ALL2 FIRES OK
				
				
				
				
				
				FLEX_2_FIRES_OK:
				;SEND COMMAND TO START FIRE ON LEVEL 1
					MOV FOC_A,#002H
					MOV INST,#002H
					MOV P1T,#090H		;COMMAND FOR START FIRE
					CALL SEND_COMMAND
						call WAIT_400MS
						MOV FOC_A,#012H
						MOV INST,#012H
						MOV P1T,#081H		;COMMAND FOR START FIRE	in flex
						CALL SEND_COMMAND

					MOV FOC_A,#001H
					MOV INST,#001H
					MOV P1T,#090H		;COMMAND FOR START FIRE
					CALL SEND_COMMAND
						call WAIT_400MS
						MOV FOC_A,#011H
						MOV INST,#011H
						MOV P1T,#081H		;COMMAND FOR START FIRE	in flex
						CALL SEND_COMMAND
					;CALL UPDATE_STAT_DISPLAY
					JMP VITRO_WAIT_DETECTED_2
			  FLEX_FIRE_1_OK:	;A DETECTAT DOAR FOCUL 1
			  		CALL FLX_AUTOSEL_FIRE1
					JMP VITRO_WAIT_DETECTED_2
		;-------------------------------------------------------------------------			
				

	   
	   
	   
	   
	   
	   
	   
	   
	   DETECT_NOT_FLEX:
	   CALL FIRE_VITRO_DETECT 		;REZULTATUL POATE FII DOAR 0X.00-NEDETECTAT  /0X.01 IN DETECTIE 0X.80 DETECTAT
	   	MOV A,FOC_B
		CJNE A,#000H,DETECTION_WAITING
				JMP WAIT_FIRE_SELECT
			DETECTION_WAITING:
			CJNE A,#001H,DETECTION_DETECTED
			;-------------------TRIMIT ORDINUL DE OPRIRE
				;SEND POWER_OFF ORDER
				MOV A,FOC_A
				ANL A,#00001111B	;DELETE INSTRUCTION
				MOV FOC_A,A
				MOV FOC_B,#000H
				CALL SEND_CMD	
					JMP WAIT_FIRE_SELECT

			DETECTION_DETECTED:
			CJNE A,#008H,DETECTION_FAILED
			   	;SEND COMMAND TO START FIRE ON LEVEL 1
				MOV A,INST
				ANL A,#00001111B	;INST 0X
		   		MOV INST,A
				MOV P1T,#090H
					CALL SEND_COMMAND
					CALL UPDATE_STAT_DISPLAY
					JMP VITRO_WAIT_DETECTED_2
			DETECTION_FAILED:
				JMP WAIT_FIRE_SELECT






	   NOP								

;______________________________________________________	
		MOV VDET,#VDET_V
	VITRO_WAIT_DETECTED:	;WAIT TO RECIVE STATUS POWER =1
		CALL WAIT_400MS
		JNB KEYT,VITRO_WAIT_DETECTED_00
		
		NOP
		
		
		VITRO_WAIT_DETECTED_00:
		MOV A,FOC_A
		ANL A,#0000111B		;USE FOC NUMBER		;
		MOV B,#0D0H			;GET STATUS INSTRUCTION
		ADD A,B
		MOV INST,A			;SET VALUE FOR INSTRUCTION TO BE SEND
		CALL READ_STATUS 	;SIMULATE DETECTED TOOL
			MOV FOC_A,INSR
			MOV FOC_B,P1R
			MOV FOC_C,P0R
			MOV FOC_D,BD0R
		;0X,00=POWERED OFF
		;0X,01=PROCES DE DETECTIE
		;1X,01=DETECTED POWER 1

	DBG_0X00:				;NU A DETECTAT
		MOV A,FOC_A
			ANL A,#0F0H
		CJNE A,#000H,DBG_1X01
			MOV A ,FOC_B
			CJNE A,#000H,DBG_0X01
				CALL UPDATE_STAT_DISPLAY
						CLR KEYT
					CALL LED_HOME
					CALL SPIRIT_2_SEG
		JMP WAIT_FIRE_SELECT
	
	DBG_0X01:				;PROCES DE DETECTIE
		MOV A,FOC_B
		CJNE A,#001H,DBG_0X08
			VITRO_WAIT_DETECTED_normal:
				DEC VDET
				MOV A,VDET
				CJNE A,#000H,VITRO_WAIT_DETECTED
				;======================== NU A DETECTAT LA TIMP
				;ATENTIE CA TRE S AFAC CEVA IN CAZ D EEROARRE
					;CALL UPDATE_STAT_DISPLAY
						CLR KEYT
					CALL LED_HOME
					CALL SPIRIT_2_SEG
		JMP WAIT_FIRE_SELECT
	

	DBG_0X08:				;A DETECTAT
		MOV A,FOC_B
		CJNE A,#008H,DBG_1X01
			VITRO_WAIT_DETECTED_DETECTAT:
				;FUNCTIE DE FOC,SELECTEZ  DAVA E VITRO MERG CU DETECTIE FOC2 FLAGUL
				JNB FLEX,VITRO_WAIT_DETECTED_DETECTAT_START_FIRE



				DEC VDET
				MOV A,VDET
				CJNE A,#000H,VITRO_WAIT_DETECTED
				;======================== NU A DETECTAT LA TIMP
				;ATENTIE CA TRE S AFAC CEVA IN CAZ D EEROARRE
					;CALL UPDATE_STAT_DISPLAY
						CLR KEYT
					CALL LED_HOME
					CALL SPIRIT_2_SEG
		
		
		
			VITRO_WAIT_DETECTED_DETECTAT_START_FIRE:
			;SEND COMMAND TO START FIRE ON LEVEL 1
			MOV A,INST
			ANL A,#00001111B	;INST 0X
		   	MOV INST,A
				 MOV P1T,#090H

			CALL SEND_COMMAND
			CALL UPDATE_STAT_DISPLAY
					SJMP VITRO_WAIT_DETECTED_2
			
			
			
			
			CALL SEND_COMMAND
		
		JMP WAIT_FIRE_SELECT
	
	
	
	
	
	
	
	DBG_1X01:
 		MOV A,FOC_A
		ANL A,#0F0H
			CJNE A,#010H,DBG_1X00
		MOV A,FOC_B
			CJNE A,#001H,DBG_1X00
			;=======================
				CALL UPDATE_STAT_DISPLAY
					SJMP VITRO_WAIT_DETECTED_2	
	DBG_1X00:
 		MOV A,FOC_A
		ANL A,#0F0H
			CJNE A,#010H,DBG_XXX
		MOV A,FOC_B
			CJNE A,#000H,DBG_XXX
			;=======================
				CALL UPDATE_STAT_DISPLAY
					SJMP VITRO_WAIT_DETECTED_2	
	
	
	
	
	
	
	DBG_XXX:
		;TRE SA FAC CEVA GEN TIMEOUT
		JMP VITRO_WAIT_DETECTED





		
		
		VITRO_WAIT_DETECTED_2:
		NOP
		CALL UPDATE_STAT_DISPLAY	
;		CALL STATUS_2_SPIRITS
;		CALL VITRO_CONTROLS_ON
			;------------------------------------
;			CALL SPIRIT_2_SEG
;			MOV A,SPR_AD
;			CALL WRT_LED_8_DATA		;SA NU MAI ASTEPT DUPA UPDATE
			;------------------------------------
;		CALL CLR_TCH_KEY

MOV SFRPAGE,#010H
	SETB TMR5CN0_TR5	;START TIMER 4
MOV SFRPAGE,#000H



	VITRO_SELECTED_SET_POWER:
	;WAIT FOR KEY + -
;	CALL WAIT_400MS
	JB ST_UPD,READ_UPDATED_STAT


;	JB KEYT,VITRO_SELECTED_SET_POWER_1
	JNB KEYT,VITRO_SELECTED_SET_POWER
								
	jmp VITRO_SELECTED_SET_POWER_1
	
	VITRO_SELECTED_SET_POWER_A:

;	oipoi
		JMP VITRO_SELECTED_SET_POWER
;	CALL CLR_TCH_KEY

	READ_UPDATED_STAT:
	CLR ST_UPD
	;_________________________	READ NEW UPDATEED STATOS FOR CACHE
	 JNB FLEX,READ_UPDATED_STAT_A
	 	CPL LD_FL
	 READ_UPDATED_STAT_A:
	 CALL UPDATE_STAT_DISPLAY
	 JNB FOC_OFF,VITRO_SELECTED_SET_POWER
	 CLR FOC_OFF
JMP VITRO_SELECTED_MAIN
	
	jmp VITRO_SELECTED_SET_POWER

	


;*******************************************************************
;	PROCES DE DETECTIE 	PER FOC
;*******************************************************************
FIRE_VITRO_DETECT:
		MOV VDET,#VDET_V
	FIRE_VITRO_WAIT_DETECTED:	;WAIT TO RECIVE STATUS POWER =1
		CALL WAIT_400MS
		;JNB KEYT,VITRO_WAIT_DETECTED_00
		JNB KEYT,FIRE_VITRO_WAIT_DETECTED_00
		NOP
		FIRE_VITRO_WAIT_DETECTED_00:
		MOV A,FOC_A
		ANL A,#0000111B		;USE FOC NUMBER		;
		MOV B,#0D0H			;GET STATUS INSTRUCTION
		ADD A,B
		MOV INST,A			;SET VALUE FOR INSTRUCTION TO BE SEND
		CALL READ_STATUS 	;SIMULATE DETECTED TOOL
			MOV FOC_A,INSR
			MOV FOC_B,P1R
			MOV FOC_C,P0R
			MOV FOC_D,BD0R
		;0X,00=POWERED OFF
		;0X,01=PROCES DE DETECTIE
		;1X,01=DETECTED POWER 1

	FIRE_DBG_0X00:				;NU A DETECTAT
		MOV A,FOC_A
			ANL A,#0F0H
		CJNE A,#000H,FIRE_VITRO_DETECT_OUT
			MOV A ,FOC_B
			CJNE A,#000H,FIRE_DBG_0X01
				CALL UPDATE_STAT_DISPLAY
						CLR KEYT
					CALL LED_HOME
					CALL SPIRIT_2_SEG
		SJMP FIRE_VITRO_DETECT_OUT
	
	FIRE_DBG_0X01:				;PROCES DE DETECTIE
		MOV A,FOC_B
		CJNE A,#001H,FIRE_DBG_0X08
			FIRE_VITRO_WAIT_DETECTED_normal:
				DEC VDET
				MOV A,VDET
				CJNE A,#000H,FIRE_VITRO_WAIT_DETECTED
				;======================== NU A DETECTAT LA TIMP
				;ATENTIE CA TRE S AFAC CEVA IN CAZ D EEROARRE
					;CALL UPDATE_STAT_DISPLAY
						CLR KEYT
					CALL LED_HOME
					CALL SPIRIT_2_SEG
		SJMP FIRE_VITRO_DETECT_OUT
	

	FIRE_DBG_0X08:				;A DETECTAT
		MOV A,FOC_B
		CJNE A,#008H,FIRE_VITRO_WAIT_DETECTED_DETECTAT
			SJMP FIRE_VITRO_DETECT_OUT
			FIRE_VITRO_WAIT_DETECTED_DETECTAT:
				;FUNCTIE DE FOC,SELECTEZ  DAVA E VITRO MERG CU DETECTIE FOC2 FLAGUL
				;JNB FLEX,FIRE_VITRO_WAIT_DETECTED_DETECTAT_START_FIRE



				DEC VDET
				MOV A,VDET
				CJNE A,#000H,FIRE_VITRO_WAIT_DETECTED
				;======================== NU A DETECTAT LA TIMP
				;ATENTIE CA TRE S AFAC CEVA IN CAZ D EEROARRE
					;CALL UPDATE_STAT_DISPLAY
						CLR KEYT
					CALL LED_HOME
					CALL SPIRIT_2_SEG
		

FIRE_VITRO_DETECT_OTHR_KEY:	;A ATINS ALT BUTON INTRE TIMP
RET




FIRE_VITRO_DETECT_OUT:
RET
;___________________________________________________________________


;====================================================
;	AUTO SELECT FIRE 1
;====================================================
FLX_AUTOSEL_FIRE1:
	CLR FLEX
		MOV FOC_A,#002H
		MOV INST,#002H
		MOV P1T,#000H		;COMMAND FOR START FIRE
		CALL SEND_COMMAND	
		CALL UPDATE_STAT_DISPLAY
	
		MOV FOC_A,#001H
		MOV INST,#001H
		MOV P1T,#090H		;COMMAND FOR START FIRE
		CALL SEND_COMMAND
		CALL UPDATE_STAT_DISPLAY
RET
;-----------------------------------------------------

;====================================================
;	AUTO SELECT FIRE 2
;====================================================
FLX_AUTOSEL_FIRE2:
	CLR FLEX
	   	MOV FOC_A,#001H
		MOV INST,#001H
		MOV P1T,#000H		;COMMAND FOR STOP FIRE 1
		CALL SEND_COMMAND	
		CALL UPDATE_STAT_DISPLAY
					
		MOV FOC_A,#002H
		MOV INST,#002H
		MOV P1T,#090H		;COMMAND FOR START FIRE	2
		CALL SEND_COMMAND
		CALL UPDATE_STAT_DISPLAY
RET
;-----------------------------------------------------

;====================================================
;	AUTO SELECT FIRE 2
;====================================================
FLX_STOP_ALL:
	CLR FLEX
	   	MOV FOC_A,#001H
		MOV INST,#001H
		MOV P1T,#000H		;COMMAND FOR STOP FIRE 1
		CALL SEND_COMMAND	
		CALL UPDATE_STAT_DISPLAY
					
		MOV FOC_A,#002H
		MOV INST,#002H
		MOV P1T,#000H		;COMMAND FOR START FIRE	2
		CALL SEND_COMMAND
		CALL UPDATE_STAT_DISPLAY
RET
;-----------------------------------------------------

;====================================================
;	AUTO SELECT FIRE 2
;====================================================
FLX_STOP_COMPLEMENT:
	CLR FLEX
	PUSH FOC_A
		MOV A,FOC_A
		ANL A,#00001111B
		CJNE A,#002H,FLX_STOP_COMPLEMENT_F2

	FLX_STOP_COMPLEMENT_F1:
		MOV FOC_A,#001H
		MOV INST,#001H
		MOV P1T,#000H		;COMMAND FOR STOP FIRE 1
		CALL SEND_COMMAND	
;		CALL UPDATE_STAT_DISPLAY
POP FOC_A
RET
	FLX_STOP_COMPLEMENT_F2:
	MOV FOC_A,#002H
		MOV INST,#002H
		MOV P1T,#000H		;COMMAND FOR START FIRE	2
		CALL SEND_COMMAND
;		CALL UPDATE_STAT_DISPLAY
POP FOC_A
RET
;-----------------------------------------------------













	MOV R0,#023H
	MOV B,#004H
	MOV A,FOC_A
	ANL A,#00000111B	;LEAV ONLY FIRE NUMBER
	MUL AB
	MOV B,#020H
	ADD A,B
	MOV R0,A
	MOV A,@R0	;HAVE NEW STATUS
	
	    



		ANL A,#11110000B
		CJNE A,#0E0H,READ_UPDATED_STAT_2
		;DISPLAY ERROR AND GET OOUT
;			MOV R0,A
		;--------------		stop timer 4 pt update
		MOV SFRPAGE,#010H
;			CLR TMR5CN0_TR5	;OPRESC TIMER 4
		MOV SFRPAGE,#000H
		;=====================
			MOV A,@R0
			MOV FOC_A,A
				INC R0
				MOV A,@R0
				MOV FOC_B,A
				INC R0
				MOV A,@R0
				MOV FOC_C,A
				INC R0
				MOV A,@R0
				MOV FOC_D,A
			
			CALL STATUS_2_SPIRITS
			CALL ERROR_2_SPIRIT_SPACE
			CALL CLR_VITRO_LED		;OFF VITRO LED

			READ_UPDATED_STAT_1:
			CALL SYSTEM_CHECK
			CALL WAIT_KEY_X
			;CJNE A,#001H,READ_UPDATED_STAT_1
				mov a,key_h	
					CJNE A,#000H,READ_UPDATED_STAT_1
				mov a,key_L	
					CJNE A,#001H,READ_UPDATED_STAT_1
			
			CALL CLR_VITRO_LED
			;SEND POWER_OFF ORDER
				MOV A,FOC_A
				ANL A,#00001111B	;DELETE INSTRUCTION
				MOV FOC_A,A
				MOV FOC_B,#000H
				CALL SEND_CMD				
				
				PWER_OFF_ERR_FLEX:
				JNB FLEX, READ_UPDATED_STAT_1A
					MOV R0,#000H
					DJNZ R0,$
					call DISABLE_FLEX_COMPLEMENT
					  nop
				
				
				
				
				READ_UPDATED_STAT_1A:
				CALL STATUS_2_SPIRITS
				CALL CLR_VITRO_LED
;				CALL CLR_WIFI_LED
;				CALL CLR_3_LED
				CALL SET_3_LED
;				CALL CLR_3_LED
				;==================	modific si valorile foc1,2 sa fie in zero
;				
				;call system_check
;RET 
		;--------------		stop timer 4 pt update
		MOV SFRPAGE,#010H
			SETB TMR5CN0_TR5	;OPRESC TIMER 4
		MOV SFRPAGE,#000H
		;=====================

jmp WAIT_FIRE_SELECT
;JMP VITRO_SELECTED_SET_POWER	
	
	READ_UPDATED_STAT_2:
	;-----------------		display timer

;	 CALL SHOW_TIMER






		MOV A,FOC_D
		JNB ACC.7,READ_UPDATED_STAT_2A 	;SEMNALEZ TIMER CU PUNCTUL
			;MOV A,R7
			;SETB ACC.7
			;MOV R7,A
			;SCRIU SI TIMPII PE DISPLAY
			DISPLAYU_TIME:
			CALL SHOW_TIMER
	
	
	
	READ_UPDATED_STAT_2A:
		JNB FLEX, READ_UPDATED_STAT_2B
			CALL FLEX_PWR_2_SPIRIT
			CALL SPIRIT_2_SEG
	
	READ_UPDATED_STAT_2B:
	
	
	
	
	JMP VITRO_SELECTED_SET_POWER




	JMP VITRO_SELECTED_SET_POWER

	NOP

	CALL WAIT_400MS
	JNB ALERT,VITRO_SELECTED_SET_POWER_1
	CALL WAIT_400MS
	JNB ALERT,VITRO_SELECTED_SET_POWER_1
	CALL WAIT_400MS
	JNB ALERT,VITRO_SELECTED_SET_POWER_1
	CALL GET_GENERAL_STATUS
	JMP VITRO_SELECTED_SET_POWER













		JNB ALERT,VITRO_SELECTED_SET_POWER_1
		JMP VITRO_SELECTED_SET_POWER
	VITRO_SELECTED_SET_POWER_1:
		clr keyt
;	call TEST_EXTENDED_KEYS


;		CALL BUZZING
		nop
;		CALL READ_TCH_KEY
;		CALL WAIT_RELEASE
;		CALL CLR_TCH_KEY
		;ACCEPT ONLY + - AN OFF KEY
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
   	VITRO_SELECTED_SET_POWER_MAX:		;MORE
   		 MOV A,KEY_L
		 CJNE A,#008H,	VITRO_SELECTED_SET_POWER_MIN
		 MOV A,KEY_H
		 CJNE A,#000H,	VITRO_SELECTED_SET_POWER_MIN
;		 	CALL BUZZING

			MOV A,FOC_B
			ANL A,#00001111B
			CJNE A,#00AH,VITRO_SELECTED_SET_POWER_MAX_1	;TEST NOT MAXIMUM POWER
		   	   	JMP VITRO_SELECTED_SET_OUT
			VITRO_SELECTED_SET_POWER_MAX_1:
			CALL BUZZING	
;		CALL READ_STATUS
;			MOV FOC_A,INSR
;			MOV FOC_B,P1R
;			MOV FOC_C,P0R
;			MOV FOC_D,BD0R
;		CALL KEY_SEL_2_SPIRIT






		CALL UPDATE_STAT_DISPLAY
				MOV A,FOC_B
			   	JNB FLEX,no_flex_up
			flex_test_up:	;verific daca este cu flex
				ORL ACC,#10000000B
				
			no_flex_up:		;	
				
				
				ADD A,#001H
				MOV FOC_B,A
CALL WAIT_4MS
				CALL SEND_CMD
				MOV A,FOC_A
				ANL A,#00001111B
				CJNE A,#001H,VITRO_SELECTED_SET_POWER_MAX_1_NO_FLEX
				JNB FLEX,VITRO_SELECTED_SET_POWER_MAX_1_NO_FLEX
					PUSH FOC_A
					MOV FOC_A,#012H
						CALL WAIT_4MS
					CALL SEND_CMD
					POP FOC_A
				
				VITRO_SELECTED_SET_POWER_MAX_1_NO_FLEX:
		CALL UPDATE_STAT_DISPLAY
				;CALL STATUS_2_SPIRITS
				;CALL WAIT_RELEASE
				JMP VITRO_SELECTED_SET_OUT
   	
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
	VITRO_SELECTED_SET_POWER_MIN:  		;LESS 
		 CJNE A,#010H,VITRO_SELECTED_TIMER
		 	MOV A,KEY_H
			CJNE A,#000H,VITRO_SELECTED_SET_POWER_OFF
		 	;CALL WAIT_RELEASE
			CALL BUZZING
	CALL UPDATE_STAT_DISPLAY
		
			
			
			
			
			MOV A,FOC_B
			ANL A,#00001111B
			CJNE A,#001H,VITRO_SELECTED_SET_POWER_MIN_1	;TEST NOT MAXIMUM POWER
		   	   	JMP VITRO_SELECTED_SET_OUT
			VITRO_SELECTED_SET_POWER_MIN_1:
				MOV A,FOC_B
				CLR C
				SUBB A,#001H

;					MOV A,FOC_B
			   		JNB FLEX,no_flex_dwn
				flex_test_dwn:	;verific daca este cu flex
					orl ACC,#080h
				no_flex_dwn:	

				MOV FOC_B,A
				CALL SEND_CMD
					MOV A,FOC_A
					ANL A,#00001111B
					CJNE A,#001H,VITRO_SELECTED_SET_POWER_MAX_1_NO_FLEX
					JNB FLEX,VITRO_SELECTED_SET_POWER_MIN_1_NO_FLEX
						PUSH FOC_A
						MOV FOC_A,#012H
							CALL WAIT_4MS
						CALL SEND_CMD
						POP FOC_A
				
				
				
				VITRO_SELECTED_SET_POWER_MIN_1_NO_FLEX:
	CALL UPDATE_STAT_DISPLAY
				;CALL STATUS_2_SPIRITS
				;CALL CLR_TCH_KEY
				JMP VITRO_SELECTED_SET_OUT

;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
   	VITRO_SELECTED_TIMER:
;SJMP VITRO_SELECTED_SET_POWER_OFF
		 MOV A,KEY_L
		 CJNE A,#000H,VITRO_SELECTED_SET_POWER_OFF
		 	MOV A,KEY_H
			CJNE A,#004H,VITRO_SELECTED_SET_POWER_OFF
		 	CALL BUZZING
			CALL WAIT_RELEASE
		CLR LD_TOT
			CALL SET_TIMER_FIRE
		SETB LD_TOT
;			ORL RSTSRC,#010H
			JMP VITRO_SELECTED_SET_OUT
	
	
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.	
	VITRO_SELECTED_SET_POWER_OFF:		;POWERDOWN
		 mov a,key_L
		 CJNE A,#001H,VITRO_SELECTED_SET_POWER_X
		 	MOV A,KEY_H
			CJNE A,#000H,VITRO_SELECTED_SET_POWER_X
			
		VITRO_SELECTED_SET_POWER_OFF_1:
		 	CALL BUZZING
		 		;SEND POWER_OFF ORDER
				MOV A,FOC_A
				ANL A,#00001111B	;DELETE INSTRUCTION
				MOV FOC_A,A
				MOV FOC_B,#000H
				CALL SEND_CMD
				;-------------			PENTRU FLEX	
				MOV A,FOC_A
				ANL A,#00001111B
				CJNE A,#003H,VITRO_SELECTED_SET_POWER_OFF_1A
					SJMP VITRO_SELECTED_SET_POWER_OFF_1B
				VITRO_SELECTED_SET_POWER_OFF_1A:
					JNB FLEX,VITRO_SELECTED_SET_POWER_OFF_1B  	;SP=5A
					PUSH FOC_A
						MOV FOC_A,#002H
						MOV FOC_B,#000H
						CALL SEND_CMD
						CLR FLEX
							;MOV R7,#000H	;LAS BLANK FOCUL DE SUS
							;call FLEX_PWR_2_SPIRIT	
							MOV R0,#0C1H	; 	;PUT IN SPIRIT SAPCE
							MOV A,#000H
							MOVX @R0,A
							MOV R0,#0C9H	;
								MOV A,#000H
								MOVX @R0,A
							MOV R0,#0D1H	;
							MOV A,#000H
							MOVX @R0,A
							MOV R0,#0D9H	;
							MOV A,#000H
							MOVX @R0,A
							MOV A,#000H
							MOV B,#0C1H
								CALL WRT_DIS_1_SEG	
				   POP FOC_A
				VITRO_SELECTED_SET_POWER_OFF_1B:
				CALL STATUS_2_SPIRITS
;				SETB LD_V
;				SETB LD_W
;				CALL CLR_VITRO_LED
;				CALL CLR_WIFI_LED
;				CALL CLR_3_LED
;				CALL SET_3_LED
				CALL VITRO_CONTROLS_OFF
				CALL SHOW_POWER_ON_LEDS
				;------------------------------------
					CALL SPIRIT_2_SEG
					MOV A,SPR_AD
					CALL WRT_LED_8_DATA		;SA NU MAI ASTEPT DUPA UPDATE
				;------------------------------------
				CALL WAIT_RELEASE
;				JMP VITRO_SELECTED_SET_OUT
RET

;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
   	VITRO_SELECTED_SET_POWER_X:		;ANOTHER FIRE SELECTED
		;OTHER FIRES 80,20,40
	   MOV A,KEY_H
	   VITRO_SELECTED_SET_POWER_X_F1:
	   CJNE A,#001H,VITRO_SELECTED_SET_POWER_X_F2
	   		MOV A,KEY_L
			CJNE A,#000H,SALT_LA_SET_POWER
				JB FLEX,SALT_LA_SET_POWER  			;NU LAS SA SELECTEZ CIT E FLEX PORNIT
				SJMP VITRO_SELECTED_SET_POWER_X_1
	   VITRO_SELECTED_SET_POWER_X_F2:
		MOV A,KEY_H
		CJNE A,#000H,VITRO_SELECTED_SET_POWER_X_F3
	   		MOV A,KEY_L
			CJNE A,#040H,VITRO_SELECTED_SET_POWER_X_F3
				JB FLEX,SALT_LA_SET_POWER  			;NU LAS SA SELECTEZ CIT E FLEX PORNIT
				SJMP VITRO_SELECTED_SET_POWER_X_1

	   VITRO_SELECTED_SET_POWER_X_F3:
	   MOV A,KEY_H
	   CJNE A,#000H,VITRO_SELECTED_SET_POWER_X_FLEX
	   		MOV A,KEY_L
			CJNE A,#020H,VITRO_SELECTED_SET_POWER_X_FLEX
				SJMP VITRO_SELECTED_SET_POWER_X_1
	   VITRO_SELECTED_SET_POWER_X_FLEX:
	   MOV A,KEY_H
	   CJNE A,#002H,SALT_LA_SET_POWER
	   		MOV A,KEY_L
			CJNE A,#000H,SALT_LA_SET_POWER
				SJMP VITRO_SELECTED_SET_POWER_X_1





		MOV A,KEY_H
		ANL A,#11111110B	;LEAVE ONLY MSB
		JZ VITRO_SELECTED_SET_POWER_X_A
			MOV A,KEY_L
			CJNE A,#000H,SALT_LA_SET_POWER
				SJMP VITRO_SELECTED_SET_POWER_X_1
			SALT_LA_SET_POWER:
	CALL TEST_EXTENDED_KEYS
				JMP VITRO_SELECTED_SET_POWER
		ANL A,#11100000B	;LEAVE ONLY 3 KEYBOARD
		JNZ	VITRO_SELECTED_SET_POWER_X_1
			JMP VITRO_SELECTED_SET_POWER

	VITRO_SELECTED_SET_POWER_X_A:
		MOV A,KEY_L
		ANL A,#10011111B
		JNZ SALT_LA_SET_POWER

	VITRO_SELECTED_SET_POWER_X_1: 	;GO BACK TO SELECT FIRE
		CALL SET_3LED_SPIRIT
		CALL CLR_VITRO_LED
		CALL CLR_WIFI_LED		
			SETB KEYT		;CA SA SARA DIRECT LA TASTA CU VALOAREA DEJA CITITA

RET

	JMP VITRO_SELECTED_SET_POWER
   	VITRO_SELECTED_SET_OUT:

	JMP	VITRO_SELECTED_SET_POWER








				CJNE A,#000H,WAIT_KEY_X_2_AT
					;SJMP WAIT_KEY_X
					NOP
				WAIT_KEY_X_2_AT:
;				MOV B,A
				CALL CLR_TCH_KEY



	CALL WAIT_KEY_X
	MOV FOC_A,#011H
	MOV FOC_B,#015H	;DEBUG TEST POWER6
	CALL STATUS_2_SPIRITS
;	ANL A,#

	SJMP $

;**********************************************************************	
;	READ STATUS OF ALL 3 FIRE
;**********************************************************************
GET_GENERAL_STATUS:	
	NOP
;	CALL GET_STATUS
;	CALL GET_STATUS
;	CALL GET_STATUS
RET
;___________________________________________________________________
	
;**********************************************************************
;	PROBEZ DINTRO DATA KEYLE EXTRA AUX1 AUX2 LOCK CLEAN
;**********************************************************************
TEST_EXTENDED_KEYS:

	TST_EXT_AUX1:
	MOV A,KEY_H
		CJNE A,#020H,TST_EXT_AUX2
	MOV A,KEY_L
		CJNE A,#000H,TST_EXT_AUX2
			CALL ENABLE_AUX_1
			SJMP TEST_EXTENDED_KEYS_OUT 
	TST_EXT_AUX2:
	MOV A,KEY_H
		CJNE A,#040H,TST_EXT_LOCK
	MOV A,KEY_L
		CJNE A,#000H,TST_EXT_LOCK
			CALL ENABLE_AUX_2
			SJMP TEST_EXTENDED_KEYS_OUT 
	TST_EXT_LOCK:
	MOV A,KEY_H
		CJNE A,#010H,TST_EXT_CLEAN
	MOV A,KEY_L
		CJNE A,#000H,TST_EXT_CLEAN
		call BUZZING
			;CEVA S ATINA DEGETUL PE TASTA
			;MOV R0,#000H
					CALL WAIT_400MS
					CALL WAIT_400MS
					CALL WAIT_400MS
					CALL WAIT_400MS
					CALL WAIT_400MS
					CALL WAIT_400MS
					CALL WAIT_400MS
					CALL WAIT_400MS
					CALL WAIT_400MS
					CALL EXT_1_ISR
		MOV A,KEY_H
			CJNE A,#010H,TST_EXT_LOCK_NONE
		MOV A,KEY_L
			CJNE A,#000H,TST_EXT_LOCK_NONE
			
			CALL ENABLE_LOCK
			
			TST_EXT_LOCK_NONE:
			SJMP TEST_EXTENDED_KEYS_OUT 
	TST_EXT_CLEAN:
	MOV A,KEY_H
		CJNE A,#008H,TEST_SND_OFF
	MOV A,KEY_L
		CJNE A,#000H,TEST_SND_OFF
			CALL CLEANER
			SJMP TEST_EXTENDED_KEYS_OUT 
	TEST_SND_OFF:
	MOV A,KEY_H
		CJNE A,#000H,TEST_EXTENDED_KEYS_OUT
	MOV A,KEY_L
		CJNE A,#018H,TEST_EXTENDED_KEYS_OUT
			CALL SND_OFF
			SJMP TEST_EXTENDED_KEYS_OUT 





TEST_EXTENDED_KEYS_OUT:
RET
;______________________________________________________________________

;**********************************************************************	
;	ACTIVEZ /DEZACTIVEZ AUX 1
;**********************************************************************	
ENABLE_AUX_1:
	CALL BUZZING
	JNB LD_AX,DISABLE_AUX_1
		CLR LD_AX
			MOV FOC_A,#060H
			MOV FOC_B,#001H
			MOV FOC_C,#001H
			MOV FOC_D,#00FH
				CALL SEND_CMD
		SJMP ENABLE_AUX_1_OUT

	DISABLE_AUX_1:
		SETB LD_AX
			MOV FOC_A,#060H
			MOV FOC_B,#001H
			MOV FOC_C,#000H
			MOV FOC_D,#00FH
				CALL SEND_CMD
	ENABLE_AUX_1_OUT:
RET
;______________________________________________________________________


;**********************************************************************	
;	ACTIVEZ /DEZACTIVEZ AUX 1
;**********************************************************************	
ENABLE_AUX_2:
	CALL BUZZING
	JNB LD_AX2,DISABLE_AUX_2
		CLR LD_AX2
			MOV FOC_A,#060H
			MOV FOC_B,#002H
			MOV FOC_C,#001H
			MOV FOC_D,#00FH
				CALL SEND_CMD
		SJMP ENABLE_AUX_2_OUT

	DISABLE_AUX_2:
		SETB LD_AX2
			MOV FOC_A,#060H
			MOV FOC_B,#002H
			MOV FOC_C,#000H
			MOV FOC_D,#00FH
				CALL SEND_CMD
	ENABLE_AUX_2_OUT:
RET
;______________________________________________________________________


;**********************************************************************


;**********************************************************************	
;	READ STATUS OF ALL 3 FIRE
;**********************************************************************	
ENABLE_LOCK:
;STOP TIMER 4?
	CLR KEYT
	CALL BUZZING	
	;JNB LD_LOCK,DISABLE_LOCK
	   CLR LD_LOCK
	   ENABLE_LOCK_WAIT:
	   JNB KEYT,$
	   CLR KEYT
	   		MOV A,KEY_H
			CJNE A,#010H,TEST_SERVICE
			MOV A,KEY_L
			CJNE A,#000H,TEST_SERVICE
	   	SETB LD_LOCK
		CALL BUZZING
RET
		TEST_SERVICE:
			MOV A,KEY_H
			;CJNE A,#014H,ENABLE_LOCK_WAIT
			CJNE A,#002H,ENABLE_LOCK_WAIT
			MOV A,KEY_L
			CJNE A,#000H,ENABLE_LOCK_WAIT
				CALL SERVICE_MENU
		SJMP ENABLE_LOCK_WAIT 

RET
;___________________________________________________________________	
	
;**********************************************************************	
;	BLOCHEZ TASTATURA 20 SEC
;**********************************************************************	

CLEANER:
PUSH PCA0MD
	mov  PCA0MD,    #004h
	orl  PCA0MD,    #040h

MOV SFRPAGE,#010H
	CLR TMR5CN0_TR5	;OPRESC TIMER 4,CA MOLESTA TIMER 5
MOV SFRPAGE,#000H

	;SCRIU CLEAN PE DISPLAY 4
;	MOV DPTR,#RF_LINK_WAIT_DISP
	MOV DPTR,#CLEANER_MSG
	CALL WRT_DIS_4_SEG
;	CALL WRITE_4_DIG_SS

	CLR LD_CLN



	MOV R0,#052D
	CLEANER_1:
	MOV PCA0H,#000H
	MOV PCA0L,#000H
	SETB PCA0CN0_CR
	JNB PCA0CN0_CF,$
		CLR PCA0CN0_CF
		CPL LD_CLN
		DJNZ R0,CLEANER_1

	SETB LD_CLN

	MOV DPTR,#CLEANER_MSG1	;STERG DISPLAY 4 DIGITI
	CALL WRT_DIS_4_SEG

MOV SFRPAGE,#010H
	SETB TMR5CN0_TR5	;OPRESC TIMER 4,CA MOLESTA TIMER 5
MOV SFRPAGE,#000H
POP PCA0MD
RET
;___________________________________________________________________

;****************************************************************
;	SOUND OFF/ONN
;****************************************************************
SND_OFF:
	JB SOUND,SND_OFF_B
	SND_OFF_A:
		SETB SOUND
		CALL BUZZING
		SND_OFF_A1:
		CALL WAIT_400MS
			
			CALL EXT_1_ISR	;CITESC KEYA
			MOV A,KEY_L
			CJNE A,#000H,SND_OFF_A1
			MOV A,KEY_H
			CJNE A,#000H,SND_OFF_A1
		;-------------------------------------
		mov dptr,#kyb_cfg
		call del_pg_code	;STERG PAGINA COMPLET
			MOV A,#080H		;PUN VALOAREA SOUND OFF
			ORL PSCTL,#001H		 
			ANL PSCTL,#0FDH		 	
			MOV FLKEY ,#0A5H
			MOV FLKEY,#0F1H
			MOVX @DPTR,A
			anl psctl,#11111110b	;clr pswe
		;-------------------------
		
		
		;-----------------------------------  display punct de sunet
		MOV R0,#0C6H
		MOVX A,@R0
		ANL A,#01111111B
		MOVX @R0,A
			MOV R0,#0CEH
			MOVX A,@R0
			ANL A,#01111111B
			MOVX @R0,A 
		MOV R0,#0D6H
		MOVX A,@R0
		ANL A,#01111111B
		MOVX @R0,A
			MOV R0,#0DEH
			MOVX A,@R0
			ANL A,#01111111B
			MOVX @R0,A 
		;------------------------------------

RET
	SND_OFF_B:
		CALL BUZZING
		CALL BUZZING
		CALL BUZZING
		CLR SOUND
		;----------------  WAIT FREE KEY
		SND_OFF_B1:
		CALL WAIT_400MS
			
			CALL EXT_1_ISR	;CITESC KEYA
			MOV A,KEY_L
			CJNE A,#000H,SND_OFF_B1
			MOV A,KEY_H
			CJNE A,#000H,SND_OFF_B1
			;-------------------------------------
		mov dptr,#kyb_cfg
		call del_pg_code	;STERG PAGINA COMPLET
			MOV A,#000H		;PUN VALOAREA SOUND OFF
			ORL PSCTL,#001H		 
			ANL PSCTL,#0FDH		 	
			MOV FLKEY ,#0A5H
			MOV FLKEY,#0F1H
			MOVX @DPTR,A
			anl psctl,#11111110b	;clr pswe
		
		;-----------------------------------
		MOV R0,#0C6H
		MOVX A,@R0
		ORL A,#10000000B
		MOVX @R0,A
			MOV R0,#0CEH
			MOVX A,@R0
			ORL A,#10000000B
			MOVX @R0,A 
		MOV R0,#0D6H
		MOVX A,@R0
		ORL A,#10000000B
		MOVX @R0,A
			MOV R0,#0DEH
			MOVX A,@R0
			ORL A,#10000000B
			MOVX @R0,A 
		;------------------------------------
RET
;-----------------------------------------------------








;++++++++++++++++++++++++++++++++++++++++++++++++
;	SHOW TIMER VALUE
SHOW_TIMER:
	MOV R0,#023H
	MOV B,#004H
	MOV A,FOC_A
;	MOV A,FOC_D
	ANL A,#00000111B	;LEAVE ONLY FIRE NUMBER
	MUL AB
	MOV B,#023H
	ADD A,B
	MOV R0,A
	MOV A,@R0	;HAVE NEW STATUS FOC_D
	;________________________________________
		JNB ACC.7,SHOW_TIMER_OFF
			CLR ACC.7		;STERG BITUL DE TIMER,LAS DOAR VALOAREA
			MOV B,A		;SAVE FOC_D VALUE
			CALL TIMER_2_SPIRIT_SPACE


;			MOV A,@R0
;			MOV FOC_A,A
;				INC R0
;				MOV A,@R0
;				MOV FOC_B,A
;				INC R0
;				MOV A,@R0
;				MOV FOC_C,A
;				INC R0
;				MOV A,@R0
;				MOV FOC_D,A
			
;			CALL STATUS_2_SPIRITS
;			CALL ERROR_2_SPIRIT_SPACE
;			CALL CLR_VITRO_LED		;OFF VITRO LED

SHOW_TIMER_OFF:
RET
;________________________________________________
	
	
;	SETEZ VALORILE PT TIMER OPRESC.PORNESC
;*************************************************	
SET_TIMER_FIRE:	
	MOV R0,#023H
	MOV B,#004H
	MOV A,FOC_A
;	MOV A,FOC_D
	ANL A,#00000111B	;LEAV ONLY FIRE NUMBER
	MUL AB
	MOV B,#023H
	ADD A,B
	MOV R0,A
	MOV A,@R0	;HAVE NEW STATUS FOC_D

MOV SFRPAGE,#010H
	CLR TMR5CN0_TR5	;OPRESC TIMER 4,CA MOLESTA TIMER 5
MOV SFRPAGE,#000H
	CALL SET_TIMER_ON
;	JB ACC.7,SET_TIMER_FIRE_OFF	
MOV SFRPAGE,#010H
	SETB TMR5CN0_TR5	;OPRESC TIMER 4,CA MOLESTA TIMER 5
MOV SFRPAGE,#000H
RET

   SET_TIMER_FIRE_OFF:
		;SEND ORDER STOP TIMER
		MOV A,FOC_A
		ANL A,#00001111B	;DELETE INSTRUCTION
		ADD A,#060H			;SETUP INSTRUCTIE
		MOV FOC_A,A
		MOV FOC_B,#000H
		MOV FOC_D,#000H
		CALL SEND_CMD				
;			CALL STATUS_2_SPIRITS	
RET
;__________________________________________________	
	
	 SET_TIMER_ON:
;	 MOV A,FOC_D
	 	MOV R0,#023H
		MOV B,#004H
		MOV A,FOC_A
;	MOV A,FOC_D
		ANL A,#00000111B	;LEAV ONLY FIRE NUMBER
		MUL AB
		MOV B,#023H
		ADD A,B
		MOV R0,A
		MOV A,@R0	;HAVE NEW STATUS FOC_D
	 
	 
	 
	 
	 JB ACC.7,SET_TIMER_ON_0	;ASHA FOLOSESC TIMERUL EXISTENT
	 MOV FOC_D,#025D
	 	SJMP SET_TIMER_ON_1
		;CEVA PT TIMERE
		;CEVA PT BUTOANE
		SET_TIMER_ON_0:
			CLR ACC.7
			MOV FOC_D,A		;STERG FLAGUL DE POWER ON
		
		SET_TIMER_ON_1:
		MOV A,FOC_D
		CALL HEX_TO_BCD
			
			MOV A,R2
				MOV DPTR,#SHW_DIG
				MOVC A,@A+DPTR
			MOV B,#0C4H
		 	CALL WRT_DIS_1_SEG
			;==================
			MOV A,R3
				MOV DPTR,#SHW_DIG
				MOVC A,@A+DPTR
			MOV B,#0C5H
		 	CALL WRT_DIS_1_SEG
			;==================
			MOV A,R4
				MOV DPTR,#SHW_DIG
				MOVC A,@A+DPTR
			MOV B,#0C6H
		 	CALL WRT_DIS_1_SEG
		JNB KEYT,$
			CLR KEYT
		SET_TIMER_ON_PLUS:
		MOV A,KEY_L
		CJNE A,#008H,SET_TIMER_ON_MINUS
			MOV A,KEY_H
			CJNE A,#000H,SET_TIMER_ON_MINUS
				INC FOC_D
		SJMP SET_TIMER_ON_1
		SET_TIMER_ON_MINUS:
		MOV A,KEY_L
		CJNE A,#010H,SET_TIMER_ON_ENTER
			MOV A,KEY_H
			CJNE A,#000H,SET_TIMER_ON_ENTER
				DEC FOC_D
		SJMP SET_TIMER_ON_1
		
		SET_TIMER_ON_ENTER:
			MOV A,KEY_L
		CJNE A,#000H,SET_TIMER_OFF
			MOV A,KEY_H
			CJNE A,#004H,SET_TIMER_OFF
				CALL SETUP_TIMER
			
			

RET
;______________________________________________________________________

		SJMP SET_TIMER_ON_1

		SET_TIMER_OFF:			 ;TIMER OFF
		MOV A,KEY_L
		CJNE A,#001H,SET_TIMER_ON_1
			MOV A,KEY_H
			CJNE A,#000H,SET_TIMER_ON_1
				;SEND ORDER STOP TIMER
				MOV A,FOC_A
				ANL A,#00001111B	;DELETE INSTRUCTION
				ADD A,#060H			;SETUP INSTRUCTIE
				MOV FOC_A,A
				MOV FOC_B,#000H
				MOV FOC_D,#000H
				CALL SEND_CMD
		CALL SPIRIT_4_DG_CLEAR
		CALL BUZZING								 
RET	
;+--------------------------------------------------------------	
	
;********************************************************************
;		meniu de TRIMIS VELORILE D ETIMER
;********************************************************************
SETUP_TIMER:
				;DEPINDE DCA ESTE FLEX SAU NORMAL
			JNB FLEX,SET_TIMER_ON_ENTER_NORMAL
				MOV A,FOC_A
				ANL A,#00FH
				CJNE A,#003H,SET_TIMER_ON_ENTER_FLEX
					SJMP SET_TIMER_ON_ENTER_NORMAL
			SET_TIMER_ON_ENTER_FLEX:	;PUN FOC 2 SI FOC 1 IN MODUL TIMER
				MOV FOC_A,#062H
				MOV FOC_B,#000H
				MOV FOC_B,#000H
					MOV A,FOC_D
					SETB ACC.7
				MOV FOC_D,A
				CALL SEND_CMD
					MOV R0,#000H
					DJNZ R0,$
			   ;--------------------------
			   MOV FOC_A,#061H
				MOV FOC_B,#000H
				MOV FOC_B,#000H
					MOV A,FOC_D
					SETB ACC.7
				MOV FOC_D,A
				CALL SEND_CMD
					MOV R0,#000H
					DJNZ R0,$
			   ;--------------------------
			   	MOV R0,#000H
					DJNZ R0,$
				CALL SYSTEM_CHECK		
					CALL SHOW_TIMER
					CALL BUZZING
RET
			
			SET_TIMER_ON_ENTER_NORMAL:	
				MOV A,FOC_A
				ANL A,#00001111B	;DELETE INSTRUCTION
				ADD A,#060H			;SETUP INSTRUCTIE
				MOV FOC_A,A
				MOV FOC_B,#000H
					MOV A,FOC_D
					SETB ACC.7
				MOV FOC_D,A
				CALL SEND_CMD
		
		
		
		
		
		
		
		
		
		
		
		MOV R0,#000H
		DJNZ R0,$
		CALL SYSTEM_CHECK		
			CALL SHOW_TIMER
			CALL BUZZING




RET	
;--------------------------------------------------------------










;********************************************************************
;		meniu de service
;********************************************************************
SERVICE_MENU:
	CALL BUZZING
	CALL DISPLAY_INIT_tuya	
	CALL SPIRIT_SPACE_FORMAT
;___________________________________________
	MOV DPTR,#SPIRIT_TABLE
		MOV SPR_AD,#0C0H	;SPIRIT START ADDRES 
	CALL SRV_SHOW_KEY_FRW
	
	
	SERVICE_MENU_OUT:	
		CALL WAIT_KEY_X
		CLR KEYT
			MOV A,KEY_H
			CJNE A,#000H,SERVICE_MENU_OUT
			MOV A,KEY_L
			CJNE A,#001H,SERVICE_MENU_OUT
		
		MOV DPTR,#CLEANER_MSG1	;STERG DISPLAY 4 DIGITI
		CALL WRT_DIS_4_SEG
		MOV A,#000H
		MOV B,#0C2H
			CALL WRT_DIS_1_SEG	;STERG SI SEGMENTUL 3

		
		
		
		
		
		CALL BUZZING
RET	
;_____________________________________________________________________	
	
;*********************************************************************
;	KEYBOARD FIRMWARE	
;*********************************************************************
SRV_SHOW_KEY_FRW:
	MOV SPR_AD,#0C0H
	MOV DPTR,#FRW
	CLR A
		MOVC A,@A+DPTR
		MOV R5,A
			INC DPTR
			CLR A
			MOVC A,@A+DPTR
			MOV R6,A
			INC DPTR
			CLR A
			MOVC A,@A+DPTR
			MOV R7,A
	;-------------------------------
	MOV A,R5
		;MOV R4,A	;SALVEZ
		;SWAP A
		ANL A,#00FH
			MOV DPTR,#SHW_DIG
			MOVC A,@A+DPTR
			MOV B,#0C2H	;ADRESA SEGMENT
		CALL WRT_DIS_1_SEG
	;-------------------------------
	MOV A,R6
		;MOV R4,A	;SALVEZ
		SWAP A
		ANL A,#00FH
			MOV DPTR,#SHW_DIG
			MOVC A,@A+DPTR
			MOV B,#0C3H	;ADRESA SEGMENT
		CALL WRT_DIS_1_SEG
			MOV A,R6
			ANL A,#00FH
			MOV DPTR,#SHW_DIG
			MOVC A,@A+DPTR
			MOV B,#0C4H	;ADRESA SEGMENT
		CALL WRT_DIS_1_SEG
	;-------------------------------
	MOV A,R7
		;MOV R4,A	;SALVEZ
		SWAP A
		ANL A,#00FH
			MOV DPTR,#SHW_DIG
			MOVC A,@A+DPTR
			MOV B,#0C5H	;ADRESA SEGMENT
		CALL WRT_DIS_1_SEG
			MOV A,R7
			ANL A,#00FH
			MOV DPTR,#SHW_DIG
			MOVC A,@A+DPTR
			MOV B,#0C6H	;ADRESA SEGMENT
		CALL WRT_DIS_1_SEG	
	
	
RET
;_____________________________________________________________________


;***********************************************************************
;	WIFI SELECTED MAIN OPERATION
;**********************************************************************8	
	WIFI_SELECTED_MAIN:
	CALL SYMBOL_RADIO_2_SPIRIT
	CALL SPIRIT_4_DG_CLEAR
	
	MOV DPTR,#RF_LINK_WAIT_DISP
	CALL WRT_DIS_4_SEG
	CALL WRITE_4_DIG_SS
	
	
	;PUN SI SEMNUL DE RADIO IN DISPLAY 4 DIGIT
	MOV SPR_AD,#0C8H		;SA PORNEASC LA PAGIN2A
		MOV A,FOC_A
		ANL A,#00001111B
		MOV B,#020H
		ADD A,B
		MOV FOC_A,A
		CALL SEND_CMD
CLR ST_UPD
		;CALL UPDATE_STAT_DISPLAY
		WIFI_SELECTED_MAIN_1:


	;WAIT FOR KEY + -
;	CALL WAIT_400MS
	JB ST_UPD,READ_UPDATED_STAT_WIFI
	JNB KEYT,WIFI_SELECTED_MAIN_1
		CLR KEYT
		WIFI_SELECTED_MAIN_1A:
		;___________________			;TEST PRESSED KEY
		MOV A,KEY_H
		CJNE A,#000H,CLEAR_KEY
		MOV A,KEY_L
		CJNE A,#001H,CLEAR_KEY
		CALL BUZZING
		;CALL READ_TCH_KEY
		;CJNE A,#001H,CLEAR_KEY
			CALL WAIT_RELEASE
;			CALL CLR_TCH_KEY
			SJMP READ_UPDATED_STAT_1WIFIA
		CLEAR_KEY:
;		CALL WAIT_RELEASE
;		CALL CLR_TCH_KEY
			SJMP WIFI_SELECTED_MAIN_1


		JMP VITRO_SELECTED_SET_POWER
;	CALL CLR_TCH_KEY

	READ_UPDATED_STAT_WIFI:
	CLR ST_UPD
	;_________________________	READ NEW UPDATEED STATOS FOR CACHE
	MOV A,FOC_A		;CHECK STATUS OF FIRE IF IS 0X.IS POWERED DOWN
	ANL A,#00000111B	;LEAV ONLY FIRE NUMBER
	CJNE A,#000H,READ_UPDATED_STAT_WIFIA
		CALL SPIRIT_4_DG_CLEAR
		JMP READ_UPDATED_STAT_1WIFIA
;		SJMP $
	
	READ_UPDATED_STAT_WIFIA:
	MOV R0,#023H	;ONE ADRES BEFORE THE ACTUAL START
	MOV B,#004H
	MOV A,FOC_A
	ANL A,#00000111B	;LEAV ONLY FIRE NUMBER
	MUL AB
	MOV B,#020H
	ADD A,B
	MOV R0,A
	MOV A,@R0	;HAVE IN ACC NEW STATUS OF SELECTED FIRE
		ANL A,#11110000B
;		CJNE A,#0E0H,READ_UPDATED_STAT_2WIFI



		;COPY DATA FROM STATUS FIRE BUFFER IN CACHE,IN SELECTED FIRE SPACE
			MOV A,@R0	  	;
			MOV FOC_A,A
				INC R0
				MOV A,@R0
				MOV FOC_B,A
				INC R0
				MOV A,@R0
				MOV FOC_C,A
				INC R0
				MOV A,@R0
				MOV FOC_D,A
			
			CALL STATUS_2_SPIRITS
				MOV A,FOC_A		;READ POWER STATUS
				ANL A,#11110000B
 				CJNE A,#000H,READ_UPDATED_STAT_WIFIA_1	;IF IS IN POWER DOWN,DONT,WRITE THE SCREEN 4 DIGIT
					CALL CLR_VITRO_LED
					CALL CLR_WIFI_LED
					CALL SET_3_LED	
ret
				
				
				
				READ_UPDATED_STAT_WIFIA_1:


				;clear leds and 
;					CALL CLR_VITRO_LED
;					CALL CLR_WIFI_LED
;					CALL SET_3_LED
;MOV FOC_B,#000H
			CALL WIFI_DATA_2_SPIRITS	;must do something so to mantAIN clear display
				


;			CALL CLR_VITRO_LED		;OFF VITRO LED
SJMP  WIFI_SELECTED_MAIN_1



			READ_UPDATED_STAT_1WIFI:
			CALL WAIT_KEY_X
			CJNE A,#001H,READ_UPDATED_STAT_1WIFI
			READ_UPDATED_STAT_1WIFIA:
			;CALL KEY_SEL_SHOW_LED_MSG
			;SEND POWER_OFF ORDER
				MOV A,FOC_A
				ANL A,#00001111B	;DELETE INSTRUCTION
				MOV FOC_A,A
				MOV FOC_B,#000H
				CALL SEND_CMD				

				CALL STATUS_2_SPIRITS
				CALL CLR_VITRO_LED
				CALL CLR_WIFI_LED
;				CALL CLR_3_LED
				CALL SET_3_LED
;				CALL CLR_3_LED
RET 
;_____________________________________________________























			CALL WAIT_KEY_X
			ANL A,#11100001B
		   	;JZ WIFI_SELECTED_MAIN_1
			JNZ WIFI_SELECTED_MAIN_OFF
				JMP  WIFI_SELECTED_MAIN_1
			
			
			
			WIFI_SELECTED_MAIN_OFF:
				CALL BUZZING
				MOV A,FOC_A
				ANL A,#00001111B	;DELETE INSTRUCTION
				MOV FOC_A,A
				MOV FOC_B,#000H
				CALL SEND_CMD				

				CALL STATUS_2_SPIRITS
				CALL CLR_VITRO_LED
				CALL CLR_WIFI_LED
;				CALL CLR_3_LED
				CALL SET_3_LED
RET
		   	WIFI_SELECTED_MAIN_OTHER_FIRE:	;SELECTED OTHER FIRE FROM KEYBOARD
				 NOP

RET
;______________________________________________________________________





;************************************************************************
;	selected flex mode
;************************************************************************
FLEX_SELECTED:
	;CEVA D EFACUT SA PORNEASCA DOAR DACA FOC1 FOC2 OPRIT
	CALL BUZZING
	SETB FLEX
;	CALL STATUS_2_SPIRITS
;	CALL FLEX_LED_SELECT_ON
	;===========================	STING LEDURILE D EFOC 1 2	
		MOV R0,#0C7H
	MOVX A,@R0
		ANL A,#00111101B
		ORL A,#00111100B
		MOVX @R0,A
	MOV R0,#0CFH
	MOVX A,@R0
		ANL A,#00111101B
		ORL A,#00111100B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
		ANL A,#00111101B
		ORL A,#00111100B
		MOVX @R0,A
	MOV R0,#0DFH
	MOVX A,@R0
		ANL A,#00111101B
		ORL A,#00111100B
		MOVX @R0,A	
	;===========================================	
	CLR LD_FL

	MOV A,#00111110B		;DISPLAY SEMN FLEX
			MOV R0,#0C0H	; 	;PUT IN SPIRIT SAPCE
			;MOV A,#00111110B
			MOV A,#01111110B
			MOVX @R0,A
				MOV R0,#0C8H	;
				MOV A,#00111110B
				MOVX @R0,A
			MOV R0,#0D0H	;
			MOV A,#00111110B
			MOVX @R0,A
				MOV R0,#0D8H	;
				MOV A,#00111110B
				MOVX @R0,A
	MOV A,#01111110B		;DISPLAY SEMN FLEX
	MOV B,#0C0H
	CALL WRT_DIS_1_SEG
	;===================================================
	;DISPLAY SEMN FLEX
			MOV R0,#0C1H	; 	;PUT IN SPIRIT SAPCE
			MOV A,#00110111B
			MOVX @R0,A
				MOV R0,#0C9H	;
				MOV A,#00110111B
				MOVX @R0,A
			MOV R0,#0D1H	;
			MOV A,#00110111B
			MOVX @R0,A
				MOV R0,#0D9H	;
				MOV A,#00110111B
				MOVX @R0,A
		MOV A,#01110111B
		MOV B,#0C1H
		CALL WRT_DIS_1_SEG

RET		



;************************************************************************8
;	SEND NEW COMMAND TO THE FIRE USINC FOC_A..FOC_B VALUES
;************************************************************************
SEND_CMD:
MOV SFRPAGE,#010H
	PUSH TMR5CN0
	CLR TMR5CN0_TR5	;OPRESC TIMER 5,CA MOLESTA TIMER 2 DE
MOV SFRPAGE,#000H


	MOV CLST,#'>'
	MOV INST,FOC_A
	MOV P1T,FOC_B
	MOV P0T,FOC_C
	MOV BD0T,FOC_D
	CALL SEND_COMMAND
MOV SFRPAGE,#010H
	;SETB TMR5CN0_TR5	;START TIMER 4
	POP TMR5CN0
MOV SFRPAGE,#000H
RET
;______________________________



;****************************************************************************
;	WAITING FOR TOOL DETECTED TO START POWER
;****************************************************************************
TEST_TOOL_PRESENT:
;	 JJKLJ
NOP
RET
;__________________________________________________________________________












			CALL CLR_VITRO_LED
			
			SJMP $













;	SELECTED_FIRE_1: ;080H
;		CJNE A,#080H,SELECTED_FIRE_2
			;VERIFIC STATUS
			MOV A,FOC1A
			ANL A,#0F0H
			CJNE A,#0E0H,SELECTED_FIRE_1_A
				MOV SG3,#006H	;1
				MOV SG4,#079H	;E			
			MOV A,FOC1B	;EROR DIG 1
				MOV B,A	;SAVE VALUE
				SWAP A
			ANL A,#000001111B	;FAC BCD
				MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				   	MOV SG5,A	;SEMNALEZ FOC FUTUT
				MOV A,B
			;MOV A,BD0R	;ERROR DIG 2
			ANL A,#000001111B	;FAC BCD
				MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				   	MOV SG6,A	;SEMNALEZ FOC FUTUT
			CALL KEY_SEL_2_SPIRIT
			CALL WRT_LED_8_DATA 
			JMP WAIT_FIRE_SELECT
		SELECTED_FIRE_1_A:		
			MOV FOC_A,FOC1A
			MOV FOC_B,FOC1B
			MOV FOC_C,FOC1C
			MOV FOC_D,FOC1D
				CALL STATUS_2_SPIRITS
				CALL KEY_SEL_2_SPIRIT 
			JMP WAIT_FIRE_SELECT_OUT
;	SELECTED_FIRE_2:;040H
;		CJNE A,#040H,SELECTED_FIRE_3
			MOV FOC_A,FOC2A
			MOV FOC_B,FOC2B
			MOV FOC_C,FOC2C
			MOV FOC_D,FOC2D
				CALL STATUS_2_SPIRITS
				CALL KEY_SEL_2_SPIRIT
		JMP WAIT_FIRE_SELECT_OUT
;	SELECTED_FIRE_3:;O20H
;		CJNE A,#020H,WAIT_FIRE_SELECT
			MOV FOC_A,FOC3A
			MOV FOC_B,FOC3B
			MOV FOC_C,FOC3C
			MOV FOC_D,FOC3D
				MOV A,FOC_A
			ANL A,#0F0H
			CJNE A,#0E0H,SELECTED_FIRE_3_A
				CALL ERROR_2_SPIRIT_SPACE
				CALL KEY_SEL_2_SPIRIT
			JMP WAIT_FIRE_SELECT
		SELECTED_FIRE_3_A:		
			MOV FOC_A,FOC3A
			MOV FOC_B,FOC3B
			MOV FOC_C,FOC3C
			MOV FOC_D,FOC3D
   	JMP WAIT_FIRE_SELECT


WAIT_FIRE_SELECT_OUT:


MAIN_FIRE_CONTROL:
;____________________	CONTINUE FIRE SELECTED
	;CHECK_FOR_ERROR
;	MAIN_FIRE_CONTROL_ERR_TEST:
;		MOV A,FOC_A
;		CJNE A,#'E',MAIN_FIRE_CONTROL_NO_ERR_TEST
		   	;SELECT CORESPONSING DISPLAY
;			MOV B,#03FH
;			MOV A,FOC_B	;FIRE NUMBER
;				ANL A,#00001111B	;CLEAR NOIMPORTANT
;			ADD A,B
;			MOV R0,A
;			MOV A,#079H		;E
;			MOV @R0,A
;			CALL WRT_LED_8_DATA
;		MAIN_FIRE_CONTROL_NO_ERR_TEST:
;			NOP

JMP WAIT_FIRE_SELECT


	MAIN_CONTORL_SELECT_WAY:	;SELECT INDUCTION OR WIRELESS
		SETB LDF1
		SETB LDF2
		SETB LDF3
		;LIGHT FIRE DIGIT LINE ,DINAMIC ADDRES ALOCATION
			MOV B,#03FH
			MOV A,FOC_A
			ANL A,#00000111B	;DELET NON NUMBER DIGIT
			ADD A,B
			MOV R0,A
			MOV A,#040H
			MOV @R0,A
			CALL WRT_LED_8_DATA
				CLR LD_W
				CLR LD_V
			
			MAIN_CONTORL_SELECT_WAY_1:
			CALL WAIT_KEY_X	
			MC_SEL_VITRO:
			   CJNE A,#004H,MC_SEL_WIFI
			   	MOV B,#03FH
					MOV A,FOC_A
					ANL A,#00000111B	;DELET NON NUMBER DIGIT
					ADD A,B
					MOV R0,A
					MOV A,#05CH	;FLASH SYMBOL
					MOV @R0,A
						CALL WRT_LED_8_DATA
					CALL WAIT_400MS	
				SJMP MAIN_CONTORL_SELECT_WAY_1
			MC_SEL_WIFI:
			   CJNE A,#002H,MAIN_CONTORL_SELECT_WAY_1
			   		MOV B,#03FH
					MOV A,FOC_A
					ANL A,#00000111B	;DELET NON NUMBER DIGIT
					ADD A,B
					MOV R0,A
					MOV A,#064H	;FLASH SYMBOL
					MOV @R0,A
						MOV SG4,#064H
						MOV SG5,#064H
						CALL WRT_LED_8_DATA	
					
						
					
					CALL WAIT_400MS
					SJMP MAIN_CONTORL_SELECT_WAY_1	



		;SELECT CORESPONSAL LED
		;SDS




SJMP $
RET




	;PRETEST
	MOV CLST,#'<'
	MOV INST,#'?'
	MOV P1T,#'1'
	MOV P0T,#'0'
	MOV BD0T,#'1'
;	MOV BD1T,#'2'
;	MOV BD2T,#'3'



tst:
CALL READ_STATUS
CALL SND_PCK
sjmp tst
SJMP $

	
;****************************************************
;	PORT MATCH ISR
;****************************************************
PMA_ISR:
	;AM PRIMIT SEMNALUL IRQ=O
	;TRIMIT 0XAAH,ADICA ACK
	;PT DEBUG D EMOMENT ASTEPT 055H
	;COMPAR SA NU FIE UN SPIKE
	JB TY_IRQ,PMA_ISR_OUT
	MOV R0,#000H
	DJNZ R0,$
MOV SFRPAGE,#020H
LOOP1:	
	MOV A,#0AAH
	SETB SCON1_TI
	CALL SENDCHAR1
;NR_BIT.FOC_NR,
;CEVA D EFACUT PT DATE BLOCK
;================================	
;	CALL GETCHAR1
;	CALL GETCHAR1_TOT
MOV R7,A	;ASTA SA VAD HEADERUL

	
	;CALL GETCHAR1_TOT
	CALL GETCHAR1
		MOV TY_H,A
	CJNE A,#0F5H,TST_FRW
		CALL PMA_GET_BIG_DATA_BLOCK
RET	
		TST_FRW:			  
		CJNE A,#0F8H,PMA_NORMAL_DATA
		CALL PMA_RESPONDE_FIRMWARE
RET	
	
	PMA_NORMAL_DATA:	;DATELE PRIMITE D ETUYA NORMALE CU 2 BITI DOAR
	CALL GETCHAR1
		MOV TY_L,A
SETB TUYA_MSG
MOV SFRPAGE,#000H
PMA_ISR_OUT:
RET
;-------------------------------------

;*********************************************
;	PRIMESC DATELE DE LA TUYA SI LE PUN IN XRAM
;*********************************************
PMA_GET_BIG_DATA_BLOCK:
	CALL GETCHAR1
	MOV R4,A		;SALVEZ HEADERUL DE DIRECTIE
	;-----SALVEZ SI LUNGIMEA BLOCK
	CALL GETCHAR1	;COMMAND
	MOV R5,A
	CALL GETCHAR1	;LUNGIME H
	MOV R6,A
	CALL GETCHAR1 	;LUNGIME L
	MOV R7,A
		MOV DPTR,#000H
	PMA_GET_BIG_DATA_BLOCK_1:
		CALL GETCHAR1
		MOVX @DPTR,A
		INC DPTR
			MOV A,DPH
			MOV B,R6
			CJNE A,B,PMA_GET_BIG_DATA_BLOCK_1
				MOV A,DPL
				MOV B,R7
				CJNE A,B,PMA_GET_BIG_DATA_BLOCK_1
	;SELECTIONEZ CE SA FAC CU BLOCUL,IN FUNCTIE DE COMANDA

	MOV A,R5
	TST_KYB_ERASE:
	CJNE A,#00AH,TST_PGM
		PUSH SFRPAGE
		MOV SFRPAGE,#000H
			MOV DPTR,#0E000H
		MOV R0,#001H
		ERASE_FIRMEWARE_1A:
		CALL DEL_PG_CODE
			INC DPH
			INC DPH
			;INC DPH
			;INC DPH
			DJNZ R0,ERASE_FIRMEWARE_1A
		POP SFRPAGE
RET
	
	TST_PGM:
	CJNE A,#00BH,TST_OUT
		MOV A,R4
		TST_KYB_PGM:
		CJNE A,#010H,TST_PWR_PGM
			CALL KEYBOARD_PGM	

		TST_PWR_PGM:
		CJNE A,#020H,TST_OUT
		SJMP $
	
	

	TST_PWR_ERASE:

	

	TST_OUT:

;		CALL KEYBOARD_PGM

RET
;------------------------------------------------

;	TRIMTI FIRMWAREUL EXISTENT
;*****************************************8
PMA_RESPONDE_FIRMWARE:
		;MOV TY_OUTA,#0F1H
		MOV DPTR,#FRW
		CLR A
		MOVC A,@A+DPTR
		CALL SENDCHAR1
		;MOV TY_OUTB,A	;MODEL D EFIMRWARE
			INC DPTR
			CLR A
			MOVC A,@A+DPTR
			CALL SENDCHAR1
			;MOV TY_OUTC,A	;MODEL D EFIMRWARE
		INC DPTR
		CLR A
		MOVC A,@A+DPTR
		CALL SENDCHAR1
		MOV TY_OUTD,A	;MODEL D EFIMRWARE
RET











;*************************************************************************************
;	UART1 ISR
;*************************************************************************************
UART1_ISR:
PUSH ACC
PUSH SFRPAGE			  	;SUS[PECT D EREZOLVAT CU ORDINEA 55,AA CA E CAM AIUREA DACA PIERDE BIT
MOV SFRPAGE,#020H
	JB TY_BODY,GET_TY_HEAD_7
	MOV A,TY_CNT
	CJNE A,#000H,GET_TY_HEAD_2
	GET_TY_HEAD_1:
		MOV A,SBUF1
		CJNE A,#055H,UART1_ISR_OUT
			INC TY_CNT
			JMP UART1_ISR_OUT
	GET_TY_HEAD_2:
	CJNE A,#001H,GET_TY_HEAD_3
		MOV A,SBUF1
		CJNE A,#0AAH,UART1_ISR_OUT
			INC TY_CNT
			JMP UART1_ISR_OUT
	GET_TY_HEAD_3:
	CJNE A,#002H,GET_TY_HEAD_4
		MOV A,SBUF1
		CJNE A,#000H,UART1_ISR_OUT
			INC TY_CNT
			JMP UART1_ISR_OUT
			;SETB TY_HEAD		;SEMNALEZ HEADER DE TUYA OK
	GET_TY_HEAD_4:
		CJNE A,#003H,GET_TY_HEAD_5
		MOV A,SBUF1
		MOV TY_CMD,A
			INC TY_CNT
			JMP UART1_ISR_OUT
	GET_TY_HEAD_5:
		CJNE A,#004H,GET_TY_HEAD_6
		MOV A,SBUF1
		MOV TY_LN_H,A
			INC TY_CNT
			JMP UART1_ISR_OUT
	GET_TY_HEAD_6:
		CJNE A,#005H,UART1_ISR_OUT_ERR
		MOV A,SBUF1
		MOV TY_LN_L,A
			MOV TY_CNT,#000H	;RESET CONTOR DE FAZE 
			SETB TY_BODY		;DACA ESTE PESE 00
			;SETB TY_CRCU
			;_____________		TEST DACA E ORDIN CU BODY SAO NU
				MOV A,TY_LN_L
				CJNE A,#000H,GET_TY_HEAD_6A
				MOV A,TY_LN_H
				CJNE A,#000H,GET_TY_HEAD_6A
					SETB TY_CRCU 
					SJMP UART1_ISR_OUT
				GET_TY_HEAD_6A:
					CLR TY_CRCU 
					MOV TY_CNT,#000H	;FOLOSESC CA SI CONTOR DE BITI
					SJMP UART1_ISR_OUT
	;TUYA GET BODY
	
	GET_TY_HEAD_7:
		JNB TY_CRCU,GET_TY_BODY
			SJMP GET_TY_CRC
	GET_TY_BODY:
		 MOV R0,TY_CNT
		 MOV A,SBUF1
		 MOVX @R0,A
		 	INC TY_CNT
			MOV A,TY_CNT
			CJNE A,TY_LN_L,UART1_ISR_OUT
			GET_TY_BODY_END:
				SETB TY_CRCU
				SJMP UART1_ISR_OUT
	
	
	GET_TY_CRC:	;ASTEPT SA PRIMESC SI CRC
		MOV A,SBUF1
		MOV TY_CRC,A
	   	;==============		RESET ALL FAZE 
			CLR TY_BODY
			CLR TY_CRCU
			MOV R0,TY_CNT
			MOVX @R0,A			;SALVEZ SI CRC
			MOV TY_CNT,#000H	;RESETEZ FAZE UART_1
			SETB TUYA_MSG
		SJMP UART1_ISR_OUT	


UART1_ISR_OUT_ERR:
	NOP

UART1_ISR_OUT:
CLR SCON1_RI
POP SFRPAGE
POP ACC
RET
;______________________________________________________________________________________
;______________________________________________________________________________________



































SYSTEM_INIT:

	CLR FOCON		;STERG FLAGUL DE VITRO PORNIT,INCEP CU EA 
	CALL DISPLAY_OFF
;	SJMP KEYBOARD_INIT_OUT

	MOV PWR,#030H

KEYBOARD_INIT:
;******************************************************************
	MOV WORD_ADDR_L	,#009H	;SENSIBILITATE CANAL 1 RESET VALUE S AAM CONEXIUNE
  	CALL 	I2C_READ_1_ADR_32_BYT
	NOP
	CJNE A,#055H,KEYBOARD_INIT_ERR 	;DETECTOR D ETECLADO
	;RESET SI ASPETP UN PIC SA SE CALIBREZE
	;0CH-00011010B
;	MOV WORD_ADDR_L	,#00CH		;
;		MOV R0,#00H
;		MOV A,#00011010B		
;		MOVX @R0,A
;	CALL I2C_WRITE_1_ADR_32_BYT

;DISABLE UNUSED CHANELS
;==============================================================
;SJMP KEYBOARD_INIT_OUT
;call DISPLAY_OFF
;SJMP KEYBOARD_INIT_OUT

;______________________________
	;11H-01000000B
	MOV WORD_ADDR_L	,#011H		;
		MOV R0,#00H
		MOV A,#01000000B			
		MOVX @R0,A
	CALL I2C_WRITE_1_ADR_32_BYT
;______________________________
	;12H-01010101B
	MOV WORD_ADDR_L	,#012H		;
		MOV R0,#00H
		MOV A,#01010101B			
		MOVX @R0,A
	CALL I2C_WRITE_1_ADR_32_BYT
;______________________________
	;13H-00000001B
	MOV WORD_ADDR_L	,#013H		;
		MOV R0,#00H
		MOV A,#00000001B			
		MOVX @R0,A
	CALL I2C_WRITE_1_ADR_32_BYT
;=================================================================

;	call DISPLAY_OFF
;JMP KEYBOARD_INIT_OUT


	CALL kyb_sens








	;display off
	call DISPLAY_OFF
SJMP KEYBOARD_INIT_OUT







	SJMP KEYBOARD_INIT_OUT
;____________________
	KEYBOARD_INIT_ERR:
		MOV SG3,#079H	;E
	   	MOV SG4,#040H	;-
		MOV SG5,#07DH	;6
		MOV SG6,#06FH	;9 
		MOV SG2,#000H
		MOV SG1,#000H
		MOV SG0,#000H

		CALL WRT_LED_8_DATA
		;_________________	SETEZ LUMOZITATE MAXIMA
			MOV A,#08FH
		CALL WRT_BYTE_MCW_START
			CALL WRT_BYTE_MCW
		CALL WRT_BYTE_MCW_STOP
		CALL WAIT_400MS
		CALL WAIT_400MS
		CALL WAIT_400MS
		CALL WAIT_400MS
		CALL WAIT_400MS
		CALL WAIT_400MS
		CALL WAIT_400MS
		CALL WAIT_400MS
;		CALL WAIT_400MS
;		CALL WAIT_400MS
;		CALL WAIT_400MS
;		CALL WAIT_400MS
;		CALL WAIT_400MS
;		CALL WAIT_400MS
;		CALL WAIT_400MS
			ORL RSTSRC,#010H	;RESET
	KEYBOARD_INIT_OUT:
RET
;_______________________________________________________









;*********************************************************
;		key_sensitivity
;*********************************************************
kyb_sens:

MOV WORD_ADDR_L	,#000H		;
		MOV R0,#00H
		MOV A,#KSNS
		MOVX @R0,A
	CALL I2C_WRITE_1_ADR_32_BYT
call wait_4ms

MOV WORD_ADDR_L	,#001H		;
		MOV R0,#00H
		MOV A,#KSNS
		MOVX @R0,A
	CALL I2C_WRITE_1_ADR_32_BYT

call wait_4ms

MOV WORD_ADDR_L	,#002h	;
		MOV R0,#00H
		MOV A,#KSNS
		MOVX @R0,A
	CALL I2C_WRITE_1_ADR_32_BYT

call wait_4ms

MOV WORD_ADDR_L	,#003H		;
		MOV R0,#00H
		MOV A,#KSNS
		MOVX @R0,A
	CALL I2C_WRITE_1_ADR_32_BYT
MOV WORD_ADDR_L	,#004H		;
		MOV R0,#00H
		MOV A,#KSNS
		MOVX @R0,A
	CALL I2C_WRITE_1_ADR_32_BYT

call wait_4ms

MOV WORD_ADDR_L	,#005H		;
		MOV R0,#00H
		MOV A,#KSNS
		MOVX @R0,A
	CALL I2C_WRITE_1_ADR_32_BYT

call wait_4ms

MOV WORD_ADDR_L	,#006H		;
		MOV R0,#00H
		MOV A,#KSNS
		MOVX @R0,A
	CALL I2C_WRITE_1_ADR_32_BYT

call wait_4ms

MOV WORD_ADDR_L	,#007H		;
		MOV R0,#00H
		MOV A,#KSNS
		MOVX @R0,A
	CALL I2C_WRITE_1_ADR_32_BYT

RET
;______________________________________________






































;**************************************************************8
	K_PLUS_PRESSED:
	MOV A,PWR
	CJNE A,#039H,K_PLUS_PRESSED_1	;LIMITAT LA 9
RET
	
	K_PLUS_PRESSED_1:
	INC A
	MOV PWR,A
	ANL A,#00FH
	CALL HEX_2_7SEG
	MOV SG2,B
	CALL WRT_LED_8_DATA
		MOV A,#'>'
		CALL SENDCHAR
		MOV A,#'1'
		CALL SENDCHAR
		MOV A,#'P'
		CALL SENDCHAR
		MOV A,PWR 			;TRIMIT SI PUTEREA CERUTA
		CALL SENDCHAR

RET
;_______________________________________________________________


;**************************************************************8
	K_MINUS_PRESSED:
	MOV A,PWR
	CJNE A,#031H,K_MINUS_PRESSED_1
RET
	K_MINUS_PRESSED_1:
	MOV A,PWR
	DEC A
	MOV PWR,A
	ANL A,#00FH
	CALL HEX_2_7SEG
	MOV SG2,B
	CALL WRT_LED_8_DATA
		MOV A,#'>'
		CALL SENDCHAR
		MOV A,#'1'
		CALL SENDCHAR
		MOV A,#'P'
		CALL SENDCHAR
		MOV A,PWR 			;TRIMIT SI PUTEREA CERUTA
		CALL SENDCHAR

RET
;_______________________________________________________________














;******************************************************************************************
;		FOC SELECT MOD
;******************************************************************************************
MODE_SELECT:
	;ASTEPT SA SE INTOARCA IN FF TASTA



	MOV A,P1
	CJNE A,#0FFH,MODE_SELECT
	MODE_SELECT_A:
	MOV A,P1
	CJNE A,#0FFH, MODE_SELECT_1
	SJMP MODE_SELECT_A
	MODE_SELECT_1:
	CALL BUZZING
	;F7-VITRO
	;FB-WIFI
	VITRO_SEL:
;		CJNE A,#0F7H,WIFI_SEL
		;TRIMIT SEMNAL DE DETECTIE VITRO LA PLACA
		MOV R2,#005H
			MOV SG0,#006H
			MOV SG1,#000H
			MOV SG2,#000H
			MOV SG3,#000H
			CALL WRT_LED_8_DATA
			;ASTEPT SA DETECTEZE VITR
			;DACA NU A DETECTAT LA PRIMA ,ASTEPT 1 SEC ,PIUIE SI DINCERC DIN NOU
			CALL WAIT_400MS
			CALL WAIT_400MS
			CALL BUZZING

			MOV SG0,#000H
			MOV SG1,#006H
			MOV SG2,#000H
			MOV SG3,#000H
			CALL WRT_LED_8_DATA
			;ASTEPT SA DETECTEZE VITR
			;DACA NU A DETECTAT LA PRIMA ,ASTEPT 1 SEC ,PIUIE SI DINCERC DIN NOU
			CALL WAIT_400MS
			CALL WAIT_400MS
			CALL BUZZING

			MOV SG0,#000H
			MOV SG1,#000H
			MOV SG2,#006H
			MOV SG3,#000H
			CALL WRT_LED_8_DATA
			;ASTEPT SA DETECTEZE VITR
			;DACA NU A DETECTAT LA PRIMA ,ASTEPT 1 SEC ,PIUIE SI DINCERC DIN NOU
			CALL WAIT_400MS
			CALL WAIT_400MS
			CALL BUZZING

			MOV SG0,#000H
			MOV SG1,#000H
			MOV SG2,#000H
			MOV SG3,#006H
			CALL WRT_LED_8_DATA
			;ASTEPT SA DETECTEZE VITR
			;DACA NU A DETECTAT LA PRIMA ,ASTEPT 1 SEC ,PIUIE SI DINCERC DIN NOU
			CALL WAIT_400MS
;			CALL WAIT_400MS
;			CALL BUZZING
			CALL BUZZING
			CALL BUZZING
			
			
			MOV FOC1,#01H	;PUTERE UNU
			
			
			SHOW_POWER:
			MOV DPTR,#SHW_DIG
			
			MOV A,FOC1
			ANL A,#00FH		;UNDE ESTE SITUAT CODUL GRAFIC D EPUTERE
			MOVC A,@A+DPTR
			MOV SG6,A
			CALL WRT_LED_8_DATA
			CALL WAIT_400MS
			
			
				
			WAIT_33:
			MOV A,P1
			CJNE A,#0FFH,WAIT_331
				SJMP WAIT_33
			WAIT_331:
				
				NOP
				INC FOC1
				MOV A,FOC1
			ANL A,#00FH		;UNDE ESTE SITUAT CODUL GRAFIC D EPUTERE
			MOVC A,@A+DPTR
			MOV SG6,A
			CALL WRT_LED_8_DATA
			CALL BUZZING
			CALL WAIT_400MS
			SJMP WAIT_33
			
			
				;EF-MINUS
				;FE-PLUS
			
			
			
			
			
			
			
			
			
			JMP OUT_SEL

	WIFI_SEL:
		CJNE A,#0FBH,OUT_SEL
		MOV R2,#004H
		DISPLAYPLM:
			MOV SG0,#008H
			MOV SG1,#008H
			MOV SG2,#008H
			MOV SG3,#008H
			CALL WRT_LED_8_DATA
;			CALL WAIT_400MS
			CALL WAIT_400MS
				MOV SG0,#040H
				MOV SG1,#040H
				MOV SG2,#040H
				MOV SG3,#040H
				CALL WRT_LED_8_DATA
				CALL WAIT_400MS
;				CALL WAIT_400MS
			
			 	MOV SG0,#001H
				MOV SG1,#001H
				MOV SG2,#001H
				MOV SG3,#001H
				CALL WRT_LED_8_DATA
				CALL WAIT_400MS
;				CALL WAIT_400MS
			
			
			
			DJNZ R2,DISPLAYPLM
			
			
			
			MOV SG0,#010H
			MOV SG1,#010H
			MOV SG2,#010H
			MOV SG3,#010H
			CALL WRT_LED_8_DATA
			CALL WAIT_400MS
			CALL WAIT_400MS
				MOV SG0,#020H
				MOV SG1,#020H
				MOV SG2,#020H
				MOV SG3,#020H
				CALL WRT_LED_8_DATA
				CALL WAIT_400MS
				CALL WAIT_400MS


			
			
			
			
			
			
			JMP OUT_SEL





    OUT_SEL:
		

RET


;***********************************************************************************
;	AFISEZ PE DISPLAY 4 DIGITI SITUATIA DE LA FOCUL SELECTAT
;***********************************************************************************
SELECTED_FIRE_2_4DIG:
	MOV R0,#023H
	MOV B,#004H
	MOV A,FOC_A
	ANL A,#00000111B	;LEAV ONLY FIRE NUMBER
	MUL AB
	MOV B,#020H
	ADD A,B
	MOV R0,A
	MOV A,@R0	;HAVE NEW STATUS
;		ANL A,#11110000B
;		CJNE A,#0E0H,SELECTED_FIRE_2_4DIG_2
		;DISPLAY ERROR AND GET OOUT
		;--------------		stop timer 4 pt update
		MOV SFRPAGE,#010H
;			CLR TMR5CN0_TR5	;OPRESC TIMER 4
		MOV SFRPAGE,#000H
		;=====================
			MOV A,@R0
			MOV FOC_A,A
				INC R0
				MOV A,@R0
				MOV FOC_B,A
				INC R0
				MOV A,@R0
				MOV FOC_C,A
				INC R0
				MOV A,@R0
				MOV FOC_D,A
			
			CALL STATUS_2_SPIRITS
		SELECTED_FIRE_2_4DIG_2:

RET
;-----------------------------------------------------------------------------------




















;********************************************************************************888
	;_______________________________________
	;TESTEZ PREZENTZA PROCESOARE,LINK SERIAL
;**********************************************************************************
CHECK_COM:
	CALL GET_STATUS_1
	CALL GET_STATUS_2
	CALL GET_STATUS_3
	SETB LD_P	;STOP LED SIGNAL
RET


;************************************************************************************
;************************************************************************************
GET_STATUS_1:
	;TEMPLATE_STATUS
	MOV CLST,#'<'
	MOV INST,#'?'
	MOV P1T,#'1'
	MOV P0T,#'U'
	;___________________________

	CHECK_1:
		CALL READ_STATUS
	CALL LOAD_SIMULATE_F1_NO_ERROR
;	CALL LOAD_SIMULATE_1_P5
;	CALL LOAD_SIMULATE_ER_07
;	CLR ERR
		MOV FOC1A,INSR
		MOV FOC1B,P1R
		MOV FOC1C,P0R	;UPDATE STATUS REGISTER
		MOV FOC1D,BD0R






		JB ERR,CHECK1_A	;ERRO DETECTED DISPLAY MESAGE
		;DISPLAY STATUS/ERROR
		MOV A,INSR
		ANL A,#0F0H	;STERG NESEMNIFICATIV
			MOV FOC1A,INSR
			MOV FOC1B,P1R
			MOV FOC1C,P0R	;UPDATE STATUS REGISTER
		    MOV FOC1D,BD0R
		CHECK_1_STB:
		CJNE A,#000H,CHECK_1_VITRO
					MOV SG3,#000H
					MOV SG4,#000H
					MOV SG5,#000H
					MOV SG6,#000H

		CALL WRT_LED_8_DATA
RET		
		CHECK_1_VITRO:
		CJNE A,#010H,CHECK_1_WIFI
			NOP
		CHECK_1_WIFI:
		CJNE A,#020H,CHECK_1_ERROR
			NOP
		CHECK_1_ERROR:
		;MUST BE E
		CJNE A,#0E0H,CHECK_1_XXX
		CLR LD_P
			MOV FOC1A,INSR
			MOV FOC1B,P1R
			MOV FOC1C,P0R	;UPDATE STATUS REGISTER
		    MOV FOC1D,BD0R
				MOV SG0,#079H	;E
				MOV SG3,#079H	;E
				MOV SG4,#040H	;-
			
			MOV A,P1R	;EROR DIG 1
				MOV B,A	;SAVE VALUE
				SWAP A
			ANL A,#000001111B	;FAC BCD
				MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				   	MOV SG5,A	;SEMNALEZ FOC FUTUT
				MOV A,B
			;MOV A,BD0R	;ERROR DIG 2
			ANL A,#000001111B	;FAC BCD
				MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				   	MOV SG6,A	;SEMNALEZ FOC FUTUT
			CALL WRT_LED_8_DATA
			CALL  WAIT_KEY_PLUS_CONTINUE
				MOV SG3,#000H
				MOV SG4,#000H
				MOV SG5,#000H
				MOV SG6,#000H

			;__________	IF ERR-01=NO RADIO,CLEAR E SYMBOL
				MOV A,P1R
				CJNE A,#001H,CHECK_1_XXX
				MOV SG0,#000H
					
				CALL WRT_LED_8_DATA

RET
		CHECK_1_XXX:
			CALL WRT_LED_8_DATA
RET		

		
		CHECK1_A: 	;NO COMUNICATION 
		   CLR LD_P
			MOV FOC3A,#0E1H
			MOV FOC3B,#000H
			MOV FOC3C,#000H	;UPDATE STATUS REGISTER
		    MOV FOC3D,#000H
			
			MOV SG0,#079H	;E
			MOV SG3,#079H	;E
			MOV SG4,#040H	;-
			MOV SG5,#03FH	;0
			MOV SG6,#03FH	;0
			
			CALL WRT_LED_8_DATA
			CALL WAIT_KEY_PLUS_CONTINUE
RET
;_____________________________________________________________________________

;************************************************************************************
;************************************************************************************
GET_STATUS_2:
	;TEMPLATE_STATUS
	MOV CLST,#'<'
	MOV INST,#'?'
	MOV P1T,#'2'
	MOV P0T,#'U'
	;___________________________

	CHECK_2:
		CALL READ_STATUS
	CALL LOAD_SIMULATE_F2_NO_ERROR
;	CALL LOAD_SIMULATE_2_R
;	CALL LOAD_SIMULATE_ER_01
;	CLR ERR
		JB ERR,CHECK2_A	;ERRO DETECTED DISPLAY MESAGE
		;DISPLAY STATUS/ERROR
		MOV A,INSR
		ANL A,#0F0H	;STERG NESEMNIFICATIV
			MOV FOC2A,INSR
			MOV FOC2B,P1R
			MOV FOC2C,P0R	;UPDATE STATUS REGISTER
		    MOV FOC2D,BD0R
		CHECK_2_STB:
		CJNE A,#000H,CHECK_2_VITRO
;			MOV FOC2A,#'0'		;PUT STATUS
			MOV SG1,#000H
		CALL WRT_LED_8_DATA
RET		
		CHECK_2_VITRO:
		CJNE A,#010H,CHECK_2_WIFI
			NOP
		CHECK_2_WIFI:
		CJNE A,#020H,CHECK_2_ERROR
			NOP
		CHECK_2_ERROR:
		;MUST BE E
		CJNE A,#0E0H,CHECK_2_XXX
		CLR LD_P
			MOV FOC2A,INSR
			MOV FOC2B,P1R
			MOV FOC2C,P0R	;UPDATE STATUS REGISTER
		    MOV FOC2D,BD0R
				MOV SG1,#079H	;E
				MOV SG3,#079H	;E
				MOV SG4,#040H	;-
			
			MOV A,P1R	;EROR DIG 1
				MOV B,A	;SAVE VALUE
				SWAP A
			ANL A,#000001111B	;FAC BCD
				MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				   	MOV SG5,A	;SEMNALEZ FOC FUTUT
				MOV A,B
			;MOV A,BD0R	;ERROR DIG 2
			ANL A,#000001111B	;FAC BCD
				MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				   	MOV SG6,A	;SEMNALEZ FOC FUTUT
			CALL WRT_LED_8_DATA
			CALL  WAIT_KEY_PLUS_CONTINUE
				MOV SG3,#000H
				MOV SG4,#000H
				MOV SG5,#000H
				MOV SG6,#000H

			;__________	IF ERR-01=NO RADIO,CLEAR E SYMBOL
				MOV A,P1R
				CJNE A,#001H,CHECK_2_XXX
				MOV SG1,#000H
				CALL WRT_LED_8_DATA
RET
		CHECK_2_XXX:
			CALL WRT_LED_8_DATA
RET		

		
		CHECK2_A: 	;NO COMUNICATION 
		CLR LD_P
			MOV FOC3A,#0E2H
			MOV FOC3B,#000H
			MOV FOC3C,#000H	;UPDATE STATUS REGISTER
		    MOV FOC3D,#000H
			
			MOV SG1,#079H	;E
			MOV SG3,#079H	;E
			MOV SG4,#040H	;-
			MOV SG5,#03FH	;0
			MOV SG6,#03FH	;0
			CALL WRT_LED_8_DATA
			CALL WAIT_KEY_PLUS_CONTINUE
RET
;_____________________________________________________________________________

;************************************************************************************
;************************************************************************************
GET_STATUS_3:
	;TEMPLATE_STATUS
	MOV CLST,#'<'
	MOV INST,#'?'
	MOV P1T,#'3'
	MOV P0T,#'U'
	;___________________________

	CHECK_3:
		CALL READ_STATUS
;	CALL LOAD_SIMULATE_NO_ERROR
;	CALL LOAD_SIMULATE_ER_04
;	CLR ERR
		JB ERR,CHECK3_A	;ERRO DETECTED DISPLAY MESAGE
		;DISPLAY STATUS/ERROR
		MOV A,INSR
		ANL A,#0F0H	;STERG NESEMNIFICATIV
		CHECK_3_STB:
		CJNE A,#'0',CHECK_3_VITRO
			MOV FOC3A,#'0'		;PUT STATUS
			MOV SG2,#000H
				MOV SG3,#000H
				MOV SG4,#000H
				MOV SG5,#000H
				MOV SG6,#000H

		CALL WRT_LED_8_DATA
RET		
		CHECK_3_VITRO:
		CJNE A,#'P',CHECK_3_WIFI
			NOP
		CHECK_3_WIFI:
		CJNE A,#'R',CHECK_3_ERROR
			NOP
		CHECK_3_ERROR:
		CLR LD_P
		;MUST BE E
			MOV FOC3A,INSR
			MOV FOC3B,P1R
			MOV FOC3C,P0R	;UPDATE STATUS REGISTER
		    MOV FOC3D,BD0R
				MOV SG2,#079H	;E
				MOV SG3,#079H	;E
				MOV SG4,#040H	;-
			
			MOV A,P1R	;EROR DIG 1
				MOV B,A	;SAVE VALUE
				SWAP A
			ANL A,#000001111B	;FAC BCD
				MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				   	MOV SG5,A	;SEMNALEZ FOC FUTUT
				MOV A,B
			;MOV A,BD0R	;ERROR DIG 2
			ANL A,#000001111B	;FAC BCD
				MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				   	MOV SG6,A	;SEMNALEZ FOC FUTUT
			CALL WRT_LED_8_DATA
			CALL  WAIT_KEY_PLUS_CONTINUE
				MOV SG3,#000H
				MOV SG4,#000H
				MOV SG5,#000H
				MOV SG6,#000H
				CALL WRT_LED_8_DATA

			;__________	IF ERR-01=NO RADIO,CLEAR E SYMBOL
				MOV A,P1R
				CJNE A,#001H,CHECK_3_XXX
				MOV SG1,#000H
				CALL WRT_LED_8_DATA
RET
		CHECK_3_XXX:
RET		

		
		CHECK3_A: 	;NO COMUNICATION 
		CLR LD_P
			MOV FOC3A,#0E3H
			MOV FOC3B,#000H
			MOV FOC3C,#000H	;UPDATE STATUS REGISTER
		    MOV FOC3D,#000H
			
			MOV SG2,#079H	;E
			MOV SG3,#079H	;E
			MOV SG4,#040H	;-
			MOV SG5,#03FH	;0
			MOV SG6,#03FH	;0
				CALL WRT_LED_8_DATA
			CALL WAIT_KEY_PLUS_CONTINUE
				MOV SG3,#000H	;
				MOV SG4,#000H	;
				MOV SG5,#000H	;
				MOV SG6,#000H	;
				CALL WRT_LED_8_DATA
RET
;_____________________________________________________________________________



































;************************************************************8
WAIT_KEY_PLUS_CONTINUE:		;WAIT TO PRESS KEY +
	CALL CLR_TCH_KEY
			;__________	WAIT_KEY + PRESS
			WAIT_KEY_PLUS_CONTINUE_1:
				CALL WAIT_400MS
				JB ALERT, WAIT_KEY_PLUS_CONTINUE_1
				CALL READ_TCH_KEY
				MOV B,A
				CALL CLR_TCH_KEY
				MOV A,B
				CJNE A,#008H,WAIT_KEY_PLUS_CONTINUE_1	;CIUDAT ASTEAPTA DOUA APASARI
RET
;________________________________________________________

;*******************************************************
;		dezactivez foc 2 complemetar in modul flex
;*******************************************************
DISABLE_FLEX_COMPLEMENT:
			PUSH FOC_A
				MOV FOC_A,#002H
						MOV FOC_B,#000H
						CALL SEND_CMD
						CLR FLEX
							;MOV R7,#000H	;LAS BLANK FOCUL DE SUS
							;call FLEX_PWR_2_SPIRIT	
							MOV R0,#0C1H	; 	;PUT IN SPIRIT SAPCE
							MOV A,#000H
							MOVX @R0,A
							MOV R0,#0C9H	;
								MOV A,#000H
								MOVX @R0,A
							MOV R0,#0D1H	;
							MOV A,#000H
							MOVX @R0,A
							MOV R0,#0D9H	;
							MOV A,#000H
							MOVX @R0,A
							MOV A,#000H
							MOV B,#0C1H
								CALL WRT_DIS_1_SEG	
				   		POP FOC_A
ret
;______________________________________________________________________________

















;****************************************************************
LOAD_STATUS_TEMPLATE:	;PREPARING VALUES FOR STATUS INQUIRE
	MOV CLST,#'<'
	MOV INST,#'?'
	MOV P1T,#'1'
	MOV P0T,#'U'
RET
;________________________________________________________________

LOAD_SIMULATE_F1_NO_ERROR:
RET
	MOV CLSR,#'<'
	MOV INSR,#001H	;0-STANDBY P=PUTERE VITRO,R-PUTERE RADIO,E=EROARE
	MOV P1R,#000H	;PARAMETRU
	MOV P0R,#055H
	MOV BD0R,#0AAH
;	MOV BD1R,#'0'
;	MOV BD2R,#'0'
	MOV CRCR,#'0'
CLR ERR
RET
;________________________________________________________________

LOAD_SIMULATE_F2_NO_ERROR:
	MOV CLSR,#'<'
	MOV INSR,#002H	;0-STANDBY P=PUTERE VITRO,R-PUTERE RADIO,E=EROARE
	MOV P1R,#000H	;PARAMETRU
	MOV P0R,#055H
	MOV BD0R,#0AAH
;	MOV BD1R,#'0'
;	MOV BD2R,#'0'
	MOV CRCR,#'0'
CLR ERR
RET
;________________________________________________________________

LOAD_SIMULATE_1_P5:
	MOV CLSR,#'<'
	MOV INSR,#011H	;0-STANDBY P=PUTERE VITRO,R-PUTERE RADIO,E=EROARE
;	MOV P1R,#00AH	;PARAMETRU
	MOV P1R,#000H
	MOV P0R,#055H
	MOV BD0R,#0AAH
;	MOV BD1R,#'0'
;	MOV BD2R,#'0'
	MOV CRCR,#'0'
CLR ERR
RET
;________________________________________________________________

LOAD_SIMULATE_2_R:
	MOV CLSR,#'<'
	MOV INSR,#022H	;0-STANDBY P=PUTERE VITRO,R-PUTERE RADIO,E=EROARE
	MOV P1R,#005H	;PARAMETRU
	MOV P0R,#055H
	MOV BD0R,#0AAH
;	MOV BD1R,#'0'
;	MOV BD2R,#'0'
	MOV CRCR,#'0'
CLR ERR
RET
;________________________________________________________________






LOAD_SIMULATE_ER_07:
	MOV CLSR,#'<'
	MOV INSR,#0E1H
	MOV P1R,#007H
	MOV P0R,#0AAH	;DUMB
	MOV BD0R,#055H	;DUMB
	MOV CRCR,#'0'
CLR ERR
RET
;________________________________________________________________

LOAD_SIMULATE_ER_01:
	MOV CLSR,#'<'
	MOV INSR,#0E1H
	MOV P1R,#001H
	MOV P0R,#0AAH	;DUMB
	MOV BD0R,#055H	;DUMB
	MOV CRCR,#'0'
CLR ERR
RET
;________________________________________________________________

LOAD_SIMULATE_ER_02:
	MOV CLSR,#'<'
	MOV INSR,#0E1H
	MOV P1R,#002H
	MOV P0R,#0AAH	;DUMB
	MOV BD0R,#055H	;DUMB
	MOV CRCR,#'0'
CLR ERR
RET
;________________________________________________________________

LOAD_SIMULATE_ER_F3_04:
		MOV CLSR,#'<'
	MOV INSR,#0E3H
	MOV P1R,#004H
	MOV P0R,#0AAH	;DUMB
	MOV BD0R,#055H	;DUMB
	MOV CRCR,#'0'
CLR ERR
RET
;________________________________________________________________






;***********************************************************************
;		TRIMIT SEMNAL D EBUZER	 USING TIMER 2 TO STOP
;***********************************************************************
BUZZING:

PUSH ACC
;	MOV XBR1,#001H
	JNB SOUND,BUZZING_1	;DACA NU AM SUNET,LAS PE MUT NU ACTIVEZ PWM
	mov  PCA0CPM0,  #046h	;PORNESC PWM  PT BUZER
;	MOV R1,#002D
	BUZZING_1:
	;PROBEZ CU TIMPUL DE 150US DATA D ETIMPII DE 400uS
	PUSH 000H
	PUSH 001H
	push ie
		clr IE_EA
		MOV R1,#0250D
		BUZZING_1A:
		CALL WAIT_4MS
		DJNZ R1,BUZZING_1A

		MOV R1,#0125D
		BUZZING_1B:
		CALL WAIT_4MS
		DJNZ R1,BUZZING_1B



pop ie
POP 000H
POP 001H
	mov  PCA0CPM0,  #000h	;OPRESC DE FAPT FAC SOFTWARE CAPTURE..PLM 
;	MOV XBR1,#000H

	CLR BUZZ

POP ACC

RET




;*****************************************
WAIT_150_US:
	MOV R0,#000H
	DJNZ R0,$
	MOV R0,#000H
	DJNZ R0,$
	MOV R0,#080H
	DJNZ R0,$

RET
;____________________











TEST_STRING:
   CLR STB
   	MOV A,#040H
	CALL WRT_BYTE_MCW
	SETB STB
	CALL WAIT_MCW
   
   	CLR STB
   	MOV A,#0C0H
	CALL WRT_BYTE_MCW
;	SETB STB
	CALL WAIT_MCW
   
MOV R7,#003H   
   TEST_STRING_1:
	MOV A,#039H
;    CLR STB
	CALL WRT_SEG_DATA_MCW

;	SETB STB
;	CALL WAIT_MCW

	DEC R7
	MOV A,R7
	CJNE A,#000H,TEST_STRING_1


	MOV A,#073H
;    CLR STB
;   	MOV A,#0C0H
	MOV B,A
	CALL WRT_BYTE_MCW
	
	CALL WAIT_MCW
	MOV A,B
	SWAP A
	CALL WRT_BYTE_MCW


	SETB STB
SJMP $
   












;************************************************************
;
;***********************************************************
;SCRIIU UN BYTE MICROWIRE SOFTWARE
WRT_BYTE_MCW:
;	CLR DIO
;	MOV R0,#020H
;	DJNZ R0,$
	MOV R0,#008H
	WRT_BYTE_MCW_1:
		CLR CLK
			MOV R1,#006H
			DJNZ R1,$
		
		RRC A
		MOV DIO,C
	;CALL WAIT_MCW
			MOV R1,#006H
			DJNZ R1,$
		
		SETB CLK
	;CALL WAIT_MCW
			MOV R1,#00bH
			DJNZ R1,$
		
		CLR CLK
	;CALL WAIT_MCW
			MOV R1,#006H
			DJNZ R1,$
		
		
		DJNZ R0,WRT_BYTE_MCW_1
	
	;==========	EXTRA BIT
;	CALL WAIT_MCW	
;		CLR CLK
;			MOV R0,#010H
;			DJNZ R0,$
;		CLR DIO
		;RRC A
		;MOV DIO,C
;			MOV R0,#010H
;			DJNZ R0,$
;		SETB CLK
;			MOV R0,#010H
;			DJNZ R0,$
;	SETB DIO
;	CALL WAIT_MCW

RET
;____________________________________________

				  
WRT_BYTE_MCW_START:
	SETB CLK	
	SETB DIO
	;--------------------	
	MOV R0,#006H
	DJNZ R0,$
		CLR DIO
	MOV R0,#008H
	DJNZ R0,$
		CLR CLK
	MOV R0,#008H
	DJNZ R0,$
RET
;____________________________________________________

WRT_BYTE_MCW_STOP:
	;--------------------	
;	MOV R0,#006H
;	DJNZ R0,$
		SETB CLK
	MOV R0,#008H
	DJNZ R0,$
		SETB DIO
	MOV R0,#008H
	DJNZ R0,$
RET
;____________________________________________________






;****************************************
;	se face in doi biti LOW.HIGH NIBLE
;****************************************
WRT_SEG_DATA_MCW:
	MOV B,A
	CALL WRT_BYTE_MCW
	NOP
	NOP
	NOP
	MOV A,B
;	SWAP A		;HIGH NIBLE
;	CALL WRT_BYTE_MCW 
 mov r0,#000h
	 djnz r0,$
RET
;________________________________________



;CITESC UN BYTE IN SOFTWARE MICROWIRE

READ_BYT_MCW:
	MOV R0,#008H
	CLR A
		READ_BYT_MCW_1:
			CLR CLK
			
			MOV C,DIO
		CALL WAIT_MCW	
			RLC A
			SETB CLK
		CALL WAIT_MCW
			DJNZ R0,READ_BYT_MCW_1
RET
;____________________________________________


WAIT_MCW:
	MOV R1,#020H
	DJNZ R1,$
RET
;_______________________________




	
	






;*******************************************************
;	SCRIUU UN SEGMENT DE DISPLAY
;	DATA ESTE IN A,ADRESA ESTE IN B
;*******************************************************
WRT_SEG:
	CLR STB	
;PUSH ACC
		MOV A,#044H	 ;FIXED MODE ADRESS
		CALL WRT_BYTE_MCW
;		POP ACC
	SETB STB
CALL WAIT_MCW
;__________________________________________	
	CLR STB
		MOV A,GRID	;SCRIU ADRESA SEGMENT
		MOV B,A
		CALL WRT_BYTE_MCW
			CALL WAIT_MCW
;		MOV A,B
;		SWAP A
;		CALL WRT_BYTE_MCW
;			CALL WAIT_MCW
;	CALL WAIT_MCW
		
		MOV A,SGM	;SCRIU DATELE SEGMENT
		MOV B,A
		CALL WRT_BYTE_MCW
			CALL WAIT_MCW
		MOV A,B
		SWAP A
		CALL WRT_BYTE_MCW
			CALL WAIT_MCW	
	SETB STB   
;____________________________________________________	   
RET	   
	   
	   
	   ;CALL WRT_BYTE_MCW	;SCRIU VALOREA DE DISPLAY
CALL WAIT_MCW

	
	CLR STB
		MOV A,#08FH
		CALL WRT_BYTE_MCW
	SETB STB
RET
;________________________________________________________			  	
		  
;*********************************************************************8
;	INITIALIZEZ DISPLAY CELE TREI FOCURI UN SIMBOL,CELE 4 CCCP
;*********************************************************************8
DISPLAY_INIT_tuya:
;	MOV SG3,#039H
;	MOV SG4,#039H
;	MOV SG5,#039H 	;CCCP DISPLAY 4
;	MOV SG6,#073H
;________________________

   	MOV SG3,#039H
	MOV SG4,#039H
	MOV SG5,#078H 	;CCT DISPLAY
	MOV SG6,#000H
;________________________




;	MOV SG6,#03EH
;	MOV SG5,#06DH
;	MOV SG4,#0F7H

;	A=01 B=02 C=04 D=08
;	E=10 F=20 G=40 DP=80

;	MOV SG0,#006H  ;UNU
;	MOV SG1,#05BH 	;DOI
;	MOV SG2,#04FH	;TREI

   	MOV SG0,#000H  ;ZERO
	MOV SG1,#000H 	;ZERO
	MOV SG2,#000H	;ZERO



;	MOV SG0,#0FFH
;	MOV SG1,#0FFH
;	MOV SG2,#0FFH
;	MOV SG3,#0FFH
;	MOV SG4,#0FFH
;	MOV SG5,#0FFH
;	MOV SG6,#0FFH
	MOV SG7,#000H	  ;01=PWRON,02?,04=WIFI,08=+,10=-,20=F3,40=F2,


	CALL WRT_LED_8_DATA

	;_________________	SETEZ LUMOZITATE MAXIMA
		MOV A,#08fH
;		MOV A,#10001000b
;		MOV A,#10001111b
	CALL WRT_BYTE_MCW_START
		CALL WRT_BYTE_MCW
	CALL WRT_BYTE_MCW_STOP
RET
;________________________________________________________

;*********************************************************************8
;	INITIALIZEZ DISPLAY CELE TREI FOCURI UN SIMBOL,CELE 4 CCCP
;*********************************************************************8
DISPLAY_INIT_TIMEOUT:
   	MOV SG3,#078H
	MOV SG4,#05CH
	MOV SG5,#078H 	;CCT DISPLAY
	MOV SG6,#040H
;________________________




;	MOV SG6,#03EH
;	MOV SG5,#06DH
;	MOV SG4,#0F7H

;	A=01 B=02 C=04 D=08
;	E=10 F=20 G=40 DP=80

;	MOV SG0,#006H  ;UNU
;	MOV SG1,#05BH 	;DOI
;	MOV SG2,#04FH	;TREI

   	MOV SG0,#03FH  ;ZERO
	MOV SG1,#03FH 	;ZERO
	MOV SG2,#03FH	;ZERO



;	MOV SG0,#0FFH
;	MOV SG1,#0FFH
;	MOV SG2,#0FFH
;	MOV SG3,#0FFH
;	MOV SG4,#0FFH
;	MOV SG5,#0FFH
;	MOV SG6,#0FFH
	MOV SG7,#000H	  ;01=PWRON,02?,04=WIFI,08=+,10=-,20=F3,40=F2,


	CALL WRT_LED_8_DATA

	;_________________	SETEZ LUMOZITATE MAXIMA
		MOV A,#08fH
;		MOV A,#10001000b
;		MOV A,#10001111b
	CALL WRT_BYTE_MCW_START
		CALL WRT_BYTE_MCW
	CALL WRT_BYTE_MCW_STOP
RET
;________________________________________________________















;	INITIALIZEZ DISPLAY CELE TREI FOCURI UN SIMBOL,CELE 4 CCCP
;*********************************************************************8
DISPLAY_INIT:
;	MOV SG3,#039H
;	MOV SG4,#039H
;	MOV SG5,#039H 	;CCCP DISPLAY 4
;	MOV SG6,#073H
;________________________

   	MOV SG3,#039H
	MOV SG4,#039H
	MOV SG5,#078H 	;CCT DISPLAY
	MOV SG6,#000H
;________________________




;	MOV SG6,#03EH
;	MOV SG5,#06DH
;	MOV SG4,#0F7H

;	A=01 B=02 C=04 D=08
;	E=10 F=20 G=40 DP=80

;	MOV SG0,#006H  ;UNU
;	MOV SG1,#05BH 	;DOI
;	MOV SG2,#04FH	;TREI

   	MOV SG0,#000H  ;ZERO
	MOV SG1,#000H 	;ZERO
	MOV SG2,#000H	;ZERO



;	MOV SG0,#0FFH
;	MOV SG1,#0FFH
;	MOV SG2,#0FFH
;	MOV SG3,#0FFH
;	MOV SG4,#0FFH
;	MOV SG5,#0FFH
;	MOV SG6,#0FFH
	MOV SG7,#000H	  ;01=PWRON,02?,04=WIFI,08=+,10=-,20=F3,40=F2,


	CALL WRT_LED_8_DATA

	;_________________	SETEZ LUMOZITATE MAXIMA
		MOV A,#08fH
;		MOV A,#10001000b
;		MOV A,#10001111b
	CALL WRT_BYTE_MCW_START
		CALL WRT_BYTE_MCW
	CALL WRT_BYTE_MCW_STOP
RET
;________________________________________________________

DISPLAY_OFF:
	MOV SG0,#000H  ;ZERO
	MOV SG1,#000H 	;ZERO
	MOV SG2,#000H	;ZERO
	MOV SG3,#000H
	MOV SG4,#000H
	MOV SG5,#000H 	;CCCP DISPLAY 4
	MOV SG6,#000H
	MOV SG7,#000H
	
	
	CALL WRT_LED_8_DATA
	;_________________	SETEZ LUMOZITATE MINIMA
		MOV A,#08FH
		MOV A,#10000001b
	CALL WRT_BYTE_MCW_START
		CALL WRT_BYTE_MCW
	CALL WRT_BYTE_MCW_STOP
RET
;_______________________________________________________

;*********************************************************
;		SCRIU UN SEGMENT DIN DISPLAY DETEMINAT DE ADRESA DIN B
;*********************************************************
WRT_DIS_1_SEG:
PUSH ACC
   	MOV A,#044H
CALL WRT_BYTE_MCW_START
	CALL WRT_BYTE_MCW
CALL WRT_BYTE_MCW_STOP

	CALL WAIT_MCW
;__________________________________   
   	;MOV A,#0C0H
	
CALL WRT_BYTE_MCW_START
	MOV A,B
	CALL WRT_BYTE_MCW
	CALL WAIT_MCW	
;______________________________
	;MOV A,SG0
POP ACC	
	CALL WRT_SEG_DATA_MCW
;		CALL WRT_BYTE_MCW
;		CALL WAIT_MCW
	CALL WRT_BYTE_MCW_STOP
RET
	;_________________	SETEZ LUMOZITATE MAXIMA
		MOV A,#08FH
	CALL WRT_BYTE_MCW_START
		CALL WRT_BYTE_MCW
	CALL WRT_BYTE_MCW_STOP
RET
;______________________________________________



;*********************************************************
;		SCRIU 4 SEGEMNTE IN DISPLAY TEXTU IN DPTR
;*********************************************************
WRT_DIS_4_SEG:
PUSH ACC
   	MOV A,#044H
CALL WRT_BYTE_MCW_START
	CALL WRT_BYTE_MCW
CALL WRT_BYTE_MCW_STOP

	CALL WAIT_MCW
;__________________________________   
   	;MOV A,#0C0H
	
CALL WRT_BYTE_MCW_START
	MOV A,#0C3H			;START POINTER DISPLAY
	CALL WRT_BYTE_MCW
	CALL WAIT_MCW	
;______________________________
	;MOV A,SG0
POP ACC	
	CLR A
	MOVC A,@A+DPTR
		CALL WRT_SEG_DATA_MCW
	INC DPTR
	CLR A
	MOVC A,@A+DPTR
		CALL WRT_SEG_DATA_MCW
	INC DPTR
	CLR A
	MOVC A,@A+DPTR
		CALL WRT_SEG_DATA_MCW
	INC DPTR
	CLR A
	MOVC A,@A+DPTR
		CALL WRT_SEG_DATA_MCW






	;CALL WRT_SEG_DATA_MCW
;		CALL WRT_BYTE_MCW
;		CALL WAIT_MCW
	CALL WRT_BYTE_MCW_STOP
RET
;==============================================

WRITE_4_DIG_SS:		;SCRIU STARTUL DE LA CAUTARE

;===============================================
PUSH ACC
	MOV R0,#0C3H		;LINE 1
	MOV A,#064H
	MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
	MOV R0,#0CBH		;LINE 2
	MOV A,#064H
	MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
	MOV R0,#0D3H		;LINE 3
	MOV A,#064H
	MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
	MOV R0,#0DBH		;LINE 3
	MOV A,#064H
	MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
POP ACC

RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




;**********************************************************
;	EXTARNAL 1 ISR PT TOUCH CU ALARM P0.7
;**********************************************************
EXT_1_ISR:
;RET

PUSH ACC
PUSH B
PUSH PSW
PUSH 000H
PUSH 001H
	MOV WORD_ADDR_L	,#020H	;KEY_H ADRES
  		CALL 	I2C_READ_1_ADR_32_BYT
   		MOV KEY_L,A
	MOV WORD_ADDR_L	,#021H	;KEY_L ADRES
  		CALL 	I2C_READ_1_ADR_32_BYT
   		MOV KEY_H,A
   ;SA STERG FLAGUL SI S AFAC INTRERUPEREA PE FLANC DOAR
		CJNE A,#000H,EXT_1_ISR_A
			SJMP EXT_1_ISR_C
		EXT_1_ISR_A:
			SETB Y_KEY	;A APASAT O KEYE
			SETB KEYT	;SEMNALEZ CA A APSAT KEYA
SJMP EXT_1_ISR_OUT_A
	
		EXT_1_ISR_C:
		MOV A,KEY_L
		CJNE A,#000H,EXT_1_ISR_D
			SJMP EXT_1_ISR_OUT
		EXT_1_ISR_D:
		SETB Y_KEY	;A APASAT O KEYE
		SETB KEYT	;SEMNALEZ CA A APSAT KEYA
SJMP EXT_1_ISR_OUT_A			

EXT_1_ISR_OUT:
		CLR KEYT	;SA NU IMI DEA SEMNAL CIND A RIDICAT DEGETUL
;RET

EXT_1_ISR_OUT_A:
POP 001H
POP 000H
POP PSW
POP B
POP ACC

RET


;_______________________________________________________
;_______________________________________________________



TIMER_2_ISR:
	CLR TMR2CN0_TF2H
	
PUSH ACC
	DEC TIKT2
	MOV A,TIKT2
	CJNE A,#000H,TIMER_2_ISR_1
		SETB TOT
	TIMER_2_ISR_1:
POP ACC
RET
;-------------------------------------------------------

;**********************************************************
;		INTERUPERE TIMER 3 PT I2C BLOCAT IN LOW
;**********************************************************
TIMER_3_ISR:
	MOV TMR3CN0,#00H	;STERG FLAGUL  SI OPRESC TIMER
	;=======================	RESETEZ BUSUL DE SMB
		CLR SMB_BUSY	;DAU LIBER LA IESIREA DIN RUTINA I2C
	PUSH SFRPAGE
	MOV SFRPAGE,#020H
		ANL SMB0CF,#01111111B
			NOP
			NOP
			NOP
		ORL SMB0CF,#10000000B
	POP SFRPAGE

RET
;__________________________________________________________

;**********************************************************
;	SE INTIMPLA LA 5 SECUNDE
;**********************************************************
TIMER_4_ISR:
PUSH ACC
		MOV SFRPAGE,#010H
	CLR TMR4CN0_TF4H
		MOV SFRPAGE,#000H
	JB Y_KEY,TIMER_4_ISR_RESET_TOT
	;==============		INCREMENTEZ TIMEOUT CONTOR
		DEC TOT_SEC_L
		MOV A ,TOT_SEC_L
		CJNE A,#000H,TIMER_4_ISR_C
	   		MOV TOT_SEC_L,#TOT_SV_L
			DEC TOT_SEC_H
			MOV A,TOT_SEC_H
			CJNE A,#000h,TIMER_4_ISR_C
			;=====	RESET TOTAL KEYBOARD SI POWER
				;SETB TOT_T2
				;---------send signal STOP ALL
				;
				MOV INST,#001H 		;asta sA OPRESC FOCURILE
				MOV P1T	,#000H	  
				MOV P0T,#000H
				CALL SEND_COMMAND
				MOV INST,#002H 		;asta sA OPRESC FOCURILE
				MOV P1T	,#000H	  
				MOV P0T,#000H
				CALL SEND_COMMAND
				;----------------------
				CALL DISPLAY_INIT_TIMEOUT
				
				;ASTEPT SA PRIMESC SEMNAL D EINTRERUPERE D ELA BUTON.ORICARE IL OPRESC
				MOV SFRPAGE,#000H
				CLR IE_EA
				JB ALERT,$
				SETB IE_EA
				CALL WAIT_400MS
				MOV RSTSRC,#010H
				sjmp $

	   TIMER_4_ISR_C:
POP ACC
RET

   TIMER_4_ISR_RESET_TOT:
   		MOV TOT_SEC_H,#TOT_SV_H	;VALORILE PT TIMEOUT
		MOV TOT_SEC_L,#TOT_SV_L
		CLR Y_KEY
POP ACC
RET





;**********************************8
;	TIMER 5 ISR FOLOSESC PT TIMEOUT FIRE STOP
;**********************************8
TIMER_5_ISR:
		MOV SFRPAGE,#010H
	CLR TMR5CN0_TF5H
		MOV SFRPAGE,#000H
PUSH ACC
PUSH 000H
PUSH 001H
	DEC TIKT5_D
	MOV A,TIKT5_D
	CJNE A,#000H,TIMER_4_ISR_1
		SETB TOT4_D
		MOV TIKT5_D,#TICK5D_V	;REWRITE VALUE FOR TICK 4 DISPLAY
		CALL SPIRIT_2_SEG
		MOV A,SPR_AD
		CJNE A,#0C0H,TIMER_4_ISR_1	;EVERY 4 NEW DISPLAY 2SEC IS CHEKING THE STATUS OF ALL PERIF
CPL DBG
			CALL SYSTEM_CHECK
			SETB ST_UPD			;SIGNALING NEW UPDATED STATUS
;			MOV SFRPAGE,#010H
;		CLR TMR5CN0_TR5	  		;STOP TIMER 4
;	   		MOV SFRPAGE,#010H
	TIMER_4_ISR_1:
POP 001H
POP 000H
POP ACC
;SJMP $
RET
;__________________________________________________________





















		MOV SFRPAGE,#010H
	CLR TMR5CN0_TF5H
		MOV SFRPAGE,#000H
PUSH ACC
;	DEC TIKT5
;	MOV A,TIKT5
	CJNE A,#000H,TIMER_5_ISR_1
		SETB TOT
	TIMER_5_ISR_1:
POP ACC
RET
;___________________________



;**************************************************************************************
;		RUTINE PENTRU KEYBOARD
;**************************************************************************************
READ_TCH_KEY: 		;CITESC VALOAREA TASTA
PUSH ACC
	CLR T_SEL
		MOV A,#0C1H
		CALL WR_BYT
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			MOV KEY_H,A
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			MOV KEY_L,A
	SETB T_SEL
POP ACC
RET
;____________________________________________________________________________________

RD_SIGNAL_KEYX:		;CITESC VALOARE RAPAORTATA D ETASTA X (1 NIN CAZU MEU)
PUSH ACC
	CLR T_SEL
;		MOV A,#024H
		CALL WR_BYT
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			MOV KEY_H,A
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			MOV KEY_L,A
	SETB T_SEL
POP ACC
RET
;_____________________________________________________
RD_REF_KEYX:		;CITESC VALOARE RAPAORTATA D ETASTA X (1 NIN CAZU MEU)
PUSH ACC
	CLR T_SEL
		MOV A,#040H
		CALL WR_BYT
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			MOV KEY_H,A
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			MOV KEY_L,A
	SETB T_SEL
POP ACC
RET
;_____________________________________________________


KYB_CALIBRATE:		;CALIBRATE KEYBOARD
PUSH ACC
	CLR T_SEL
		MOV A,#020H
		CALL WR_BYT
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			MOV KEY_H,A
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			MOV KEY_L,A
	SETB T_SEL
POP ACC
RET
;______________________________________________________________




;*******************************************************
;	SEND PACKET 8B BIT	WITH 2 BIT ACK TOT=500MS  AND 
;*******************************************************
SND_PCK:

;		MOV SFRPAGE,#010H
;	MOV TMR5H ,#TIME5H
;	MOV TMR5L ,#TIME5L
;		MOV SFRPAGE,#000H
;	MOV TIKT5,#004H
	MOV TMR2H ,#TIME2H
	MOV TMR2L ,#TIME2L
	MOV TIKT2,#004H
	
	
	
	
	
	CLR TOT
	CLR ERR
	;_____________________
	MOV R0,#024H	;CLST ADDRES
	MOV B,#0A5H		;START CRC VALUE
	SND_PCK_1:
		MOV A,@R0
		CALL SENDCHAR
		ADD A,B
		MOV B,A
		INC R0
		CJNE R0,#02AH,SND_PCK_1
		MOV A,B
		CALL SENDCHAR
	;___________________________
	;SET TIMER

		MOV SFRPAGE,#010H
	SETB TMR5CN0_TR5	;START TIMER 5
		MOV SFRPAGE,#000H
		MOV A,#055H	;SA FIE CEVA IN BUFER	
 	SND_PCK_WAIT_ACK:
		CALL GETCHAR_TOT
		CJNE A,#'O',SND_PCK_NO_ACK
		CALL GETCHAR_TOT
		CJNE A,#'K',SND_PCK_NO_ACK
	SND_PCK_ACK:
		CLR ERR
		CLR TOT
MOV SFRPAGE,#010H
	CLR TMR5CN0_TR5	;STOP TIMER 5
MOV SFRPAGE,#000H
RET
	
	SND_PCK_NO_ACK:
		SETB ERR
		CLR TOT
MOV SFRPAGE,#010H
	CLR TMR5CN0_TR5	;STOP TIMER 5
MOV SFRPAGE,#000H

RET
;________________________________________________________





;*******************************************************************
;	UPDATE STATUS TO RAM AND SPIRIT
;*******************************************************************
UPDATE_STATUS:

RET
;__________________________________________________________________________











;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;			RUTI0NE UART
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;____________________________________________________________________
                                                         ; SENDSTRI0NG

SENDSTRING:     ; sends ASCII stRI0ng to UART starTI0ng at locaTI0on
                ; DPTR and ending with a null (0) value

        PUSH    ACC
        PUSH    B
        CLR     A
        MOV     B,A
IO0010: CLR     A
        MOVC    A,@A+DPTR
        INC     DPTR
		JZ      IO0020
        CALL    SENDCHAR
        JMP     IO0010
IO0020: POP     B
        POP     ACC

        RET

;____________________________________________________________________
                                                           ; SENDCHAR

SENDCHAR:       ; sends ASCII value contained in A to UART
        JNB     SCON0_TI,$            ; wait TI0l present char gone
        CLR     SCON0_TI             ; must clear TI0
        MOV     SBUF0,A
        RET
;____________________________________________________________________


                                                            ; SENDVAL

SENDVAL:        ; converts the hex value of A into two ASCII chars,
		; and then spits these two characters up the UART.
                ; does not change the value of A.

        PUSH    ACC
        SWAP    A
        CALL    HEX2ASCII
        CALL    SENDCHAR        ; send high nibble
        POP     ACC
        PUSH    ACC
        CALL    HEX2ASCII
        CALL    SENDCHAR        ; send low nibble
        POP     ACC
        RET

;____________________________________________________________________
                                                          ; HEX2ASCII

HEX2ASCII:      ; converts A into the hex character represenTI0ng the
                ; value of A's least significant nibble

        ANL     A,#00Fh
        CJNE    A,#00Ah,$+3
        JC      IO0030
        ADD     A,#007h
IO0030: ADD     A,#'0'

        RET

;____________________________________________________________________
                                                          ; ASCII2HEX

ASCII2HEX:      ; converts A from an ASCII digit ('0'-'9' or 'A'-'F')
                ; into the corresponding number (0-15).  returns C=1
                ; when input is other than an ASCII digit,
                ; indicaTI0ng invalid output (returned as 255).

        CLR     C
        SUBB    A,#'0'
        CJNE    A,#10,$+3
        JC      IO0050          ; if '0'<=char<='9', return OK
        CJNE    A,#17,$+3
        JC      IO0040          ; if '9'<char<'A', return FAIL
        SUBB    A,#7
        CJNE    A,#10h,$+3
        JC      IO0050          ; if 'A'<=char<='F', return OK
        CJNE    A,#42,$+3
        JC      IO0040          ; if 'F'<char<'a', return FAIL
        SUBB    A,#20h
        CJNE    A,#10h,$+3
        JC      IO0050          ; if 'a'<=char<='f', return OK..

IO0040: CLR     C               ; ..else return FAIL
        MOV     A,#0FFh

IO0050: CPL     C
        RET

;____________________________________________________________________
                                                            ; GETCHAR

GETCHAR:        ; waits for a single ASCII character to be received
                ; by the UART.  places this character into A.
        JNB     SCON0_RI,$
        MOV     A,SBUF0
        CLR     SCON0_RI
        RET



;____________________________________________________________________
                                                             ; GETVAL

GETVAL:         ; waits for two ASCII hex digits to be received by
                ; the UART.  returns the hex value in A.

        PUSH    B
        PUSH    0
IO0060: CLR     SCON0_RI
        CALL    GETCHAR         ; first nibble
        MOV     0,A             ; store received char
        CALL    ASCII2HEX
        JC      IO0060          ; if not '0' thru 'F', don't accept
        SWAP    A               ; swap nibbles
        MOV     B,A             ; store nibble in B
        MOV     A,0             ; echo received char
        CALL    SENDCHAR
IO0070: CLR     SCON0_RI
        CALL    GETCHAR         ; second nibble
        MOV     0,A             ; store received char
        CALL    ASCII2HEX
        JC      IO0070          ; if not '0' thru 'F', don't accept
        ORL     A,B             ; combine nibbles
        MOV     B,A             ; store results in B
        MOV     A,0             ; echo received char
        CALL    SENDCHAR
        MOV     A,B             ; final result
        POP     0
        POP     B

        RET

SPACE:				;SEMNUL DE SPACE
	DB 10,13,0
;__________________________________________________________________________________________

;******************************************
;	ASTEAPTA SERIAL SAU TOT DE TIMER2
;******************************************8
GETCHAR_TOT1:		
		MOV TICK,#UART_TOT
		SETB TMR2CN0_TR2	;PORNESC TIMER 2
		CLR TOT_T2
	GETCHAR_TOT_11:
		JB     SCON0_RI,GETCHAR_TOT_3
		JNB TOT_T2,GETCHAR_TOT_11
	GETCHAR_TOT_2:
			SETB TOT_SER 	;SEMNALEZ EROARE DE TIMEOUT SERIAL
			CLR TOT_T2
RET

	GETCHAR_TOT_3:
        MOV     A,SBUF0
        CLR     SCON0_RI
		CLR TOT_SER		;SEMNALEZ CA NU E ERARE TIMEOUT
RET
;______________________________________________________________


;***********************************************************************************
;		RUTINE 	SPI
;*****************************************************************************************************
;***********************************************************************************
;		SCRI0U UN BYT SPI
;***********************************************************************************
WR_BYT:
			MOV SPI0DAT,A

			JNB SPI0CN0_SPIF ,$			;CIND E PE 1 ATTERMINAT TRANSMISIA
			CLR SPI0CN0_SPIF			;IL STREG PT URMATORUL BYT
				MOV A,SPI0DAT			;DIN CAUZA CA AR EBUFER ,SI ALTFEL RAMINE AGATZAT
;			MOV R7,A
;			CALL _SPI_Transfer
		RET
;___________________________________________________________________________________

;***********************************************************************************
;		CITESC UN BYT SPI
;***********************************************************************************
RD_BYT:
		    MOV A,#0FFH
		    MOV SPI0DAT,A
		    JNB SPI0CN0_SPIF,$
		    MOV A,SPI0DAT
			CLR SPI0CN0_SPIF
			;MOV R7,#000H
			;CALL _SPI_Transfer
		RET    
;___________________________________________________________________________________

;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



;****************************************************************************************************
;****************************************************************************************************
;
;		DRIVER TOUCH AT42QT111
;****************************************************************************************************
KEYB_TCH_INIT:		;INITIALIZEZ TASTATURA
	;==============	PRIMA DATA RESETEZ
	CLR T_SEL
		MOV A,#004H
		CALL WR_BYT	;SCRIU BITUL
	SETB T_SEL
	;=====================
			call WAIT_400MS
		;_____________
		MOV A,#090H			;DEVICE MODE
;		MOV B,#11110000B	;TIMED ,11KEY,PARALEL,EDGE (NOT USED)
MOV B,#11110010B	;TIMED ,11KEY,PARALEL,EDGE (NOT USED)
		CALL KYB_TCH_SEND_INSTR
		;_______________
		;	EVENTUAL CONFIGURARE CU GUARD KEY,PLM
	
		CALL WAIT_150_US
		CALL WAIT_150_US
			MOV A,#091H			;Dguard key /comms
			MOV B,#00000010B	;T
			CALL KYB_TCH_SEND_INSTR
	
	 	CALL WAIT_150_US
		CALL WAIT_150_US
			MOV A,#092H			;sensibilitate
;			MOV B,#10001000B	;TIMED ,11KEY,PARALEL,EDGE (NOT USED)
			MOV B,#00111000B	;TIMED ,11KEY,PARALEL,EDGE (NOT USED)
			CALL KYB_TCH_SEND_INSTR
	
	
	CALL WAIT_150_US
	CALL WAIT_150_US

	;==============	 calibrate key
	CLR T_SEL
		MOV A,#003H
		CALL WR_BYT	;SCRIU BITUL
	SETB T_SEL
	;=====================
	CALL WAIT_4MS		;4MS
	
RET
;=============================================================

;**************************
KYB_TCH_SEND_INSTR:		;TRIMIT INSTRUCTIUNEA DIN B LA ADRESA DIN A LA KEYBOARD
	CLR T_SEL
		CALL WR_BYT	;SCRIU BITUL
		CALL WAIT_150_US
		MOV A,B
		CALL WR_BYT
		CALL WAIT_150_US
	SETB T_SEL	
RET
;_________________________________________________________________

;*****************************************************************
KYB_TCH_READ_KEY:		;CITESC CA SI DOI BITI
	CLR T_SEL
		MOV A,#0C1H
		CALL WR_BYT
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			MOV KEY_H,A
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			MOV KEY_L,A
	SETB T_SEL
RET
;_________________________________________________________________


;************************************************************8
WAIT_KEY_X:		;WAIT TO PRESS KEY 
JNB KEYT,$
		CLR KEYT
RET
	CALL WAIT_RELEASE	;PENTRU KEYA ANTERIOARA DACA E INCA APASATA
			;__________	WAIT_KEY + PRESS
			WAIT_KEY_X_1:
;				CALL WAIT_400MS
				JNB ALERT, WAIT_KEY_X_2
				JNB TOT4,WAIT_KEY_X_1
					;CALL CLR_TCH_KEY
RET
				WAIT_KEY_X_2:
				
				CALL READ_TCH_KEY
				MOV A,KEY_L					 	;VERIFIC SA NU FIE 0000H
				CJNE A,#000H,WAIT_KEY_X_2_A
					MOV A,KEY_H
					CJNE A,#000H,WAIT_KEY_X_2_A
					SJMP WAIT_KEY_X

				WAIT_KEY_X_2_A:
;				CALL CLR_TCH_KEY
;				CALL WAIT_RELEASE


RET
				WAIT_KEY_X_3:
RET
;________________________________________________________

;********************************************************
CLR_TCH_KEY:		;STERG ORICE POSIBILA INTRERUPERE EXISTENTA IN KEYBARD CONTROLER
ret
PUSH ACC
	CLR T_SEL
		MOV A,#0C1H
		CALL WR_BYT
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			;MOV KEY_H,A
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			;MOV KEY_L,A
	SETB T_SEL

POP ACC		
RET
;________________________________________________________

WAIT_RELEASE:
RET
PUSH ACC
WAIT_RELEASE_1:	
	CALL READ_TCH_KEY
		MOV A,KEY_H
		CJNE A,#000H,WAIT_RELEASE_1
		MOV A,KEY_L
		CJNE A,#000H,WAIT_RELEASE_1
POP ACC
RET
;_____________________________












;***********************************************************************
;	TRANSFIRM DIN HEX IN 7 SEG
;***********************************************************************
HEX_2_7SEG:
	MOV DPTR,#SHW_DIG
	MOVC  A,@A+DPTR
	MOV B,A
RET


	;PT ZERO
	CJNE A,#010H,HEX_2_7SEG_1
		MOV B,#030H
		JMP HEX_2_7SEG_OUT
	HEX_2_7SEG_1:
	CJNE A,#001H,HEX_2_7SEG_2
		MOV B,#006H
		JMP HEX_2_7SEG_OUT
	HEX_2_7SEG_2:
	CJNE A,#002H,HEX_2_7SEG_3
		MOV B,#05BH
		JMP HEX_2_7SEG_OUT
	HEX_2_7SEG_3:
	CJNE A,#003H,HEX_2_7SEG_4
		MOV B,#04FH
		JMP HEX_2_7SEG_OUT
	HEX_2_7SEG_4:
	CJNE A,#004H,HEX_2_7SEG_5
		MOV B,#064H
		JMP HEX_2_7SEG_OUT
	HEX_2_7SEG_5:



HEX_2_7SEG_OUT:
RET





;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;		RUTINE I2C
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




;***********************************************************************		
;		CITESC PAGE_SIZE DE BYTI SI II PUN IN XRAM ,INCEPIND DE LA R0		
;**********************************************************************		
	I2C_READ_32_BYT:		
		MOV DPH,#000H
		MOV DPL,#000H
		MOV SMB_RW,#READ
			mov TARGET,#EEPROM_ADDR		;FIXEZ ADRESA DEVICE
			SETB SMB_SENDWORDADDR_H
			SETB SMB_SENDWORDADDR_L
			SETB SMB_BUSY
			CLR PSW_F1
				MOV R1,#PAGE_SIZE
			SETB SMB_SEND_START
			CLR SMB_ACKPOLL				;FLAG CA ASTEPT ACK
			CLR ERR						;STERG FLAGUL DE EROARE
			SETB SMB0CN0_STA
;		I2C_READ_32_BYT_A:				;DACA AM EROARE,ADICA NU AM ACK IES DIN RUTIN
;			JNB ERR,I2C_READ_32_BYT_B
;	RET
;		I2C_READ_32_BYT_B:	
			JB SMB_BUSY,$

	RET
;____________________________________________________________________


;***********************************************************************		
;		CITESC PAGE_SIZE DE BYTI SI II PUN IN XRAM ,INCEPIND DE LA R0		
;**********************************************************************		
	I2C_WRITE_32_BYT:		
		MOV DPH,#000H
		MOV DPL,#000H
		MOV SMB_RW,#WRITE
			mov TARGET,#EEPROM_ADDR		;FIXEZ ADRESA DEVICE
			SETB SMB_SENDWORDADDR_H
			SETB SMB_SENDWORDADDR_L
			SETB SMB_BUSY
			CLR PSW_F1
			CLR SMB_ACKPOLL				;FLAG CA ASTEPT ACK
				MOV A,#PAGE_SIZE
				ADD A,#0001H
				MOV R1,A
			SETB SMB_SEND_START
			CLR ERR
			SETB SMB0CN0_STA
			JB SMB_BUSY,$
	RET
;____________________________________________________________________

;***********************************************************************		
;		CITESC 64 DE BYTI SI II PUN IN XRAM ,INCEPIND DE LA R0		
;**********************************************************************		
	WAIT_I2C_MEM_IDLE:		
		MOV SMB_RW,#WRITE
			mov TARGET,#EEPROM_ADDR		;FIXEZ ADRESA DEVICE
			SETB SMB_SENDWORDADDR_H
			SETB SMB_SENDWORDADDR_L
			SETB SMB_BUSY
			SETB SMB_ACKPOLL				;FLAG CA ASTEPT ACK
			CLR PSW_F1
			SETB SMB_SEND_START
			CLR ERR
			SETB SMB0CN0_STA
			JB SMB_BUSY,$
	RET
;____________________________________________________________________


;***********************************************************************		
;		CITESC PAGE_SIZE DE BYTI SI II PUN IN XRAM ,INCEPIND DE LA R0 ADRESA ESTE DE 1 BYT		
;**********************************************************************		
	I2C_READ_1_ADR_32_BYT:		
		MOV DPH,#000H
		MOV DPL,#000H
		MOV SMB_RW,#READ
			;mov TARGET,#EEPROM_ADDR		;FIXEZ ADRESA DEVICE
			mov TARGET,#SMB_ADDR		;FIXEZ ADRESA DE DISPOZITIV ADRESABIL PE 1 BYT DRESA
			CLR SMB_SENDWORDADDR_H 		;FIINDCA AM DOAR UN BYT DE ADRESA
			SETB SMB_SENDWORDADDR_L
;			MOV WORD_ADDR_L,#000H	;CITESC ADRESA 000 DE LA INCEPUT
			SETB SMB_BUSY
			CLR PSW_F1
;				MOV R1,#014H
				MOV R1,#001H	;CITESC UN SINGUR BYT
			SETB SMB_SEND_START
			CLR SMB_ACKPOLL				;FLAG CA ASTEPT ACK
			SETB SMB0CN0_STA
			JB SMB_BUSY,$
	RET
;____________________________________________________________________

;***********************************************************************		
;		CITESC PAGE_SIZE DE BYTI SI II PUN IN XRAM ,INCEPIND DE LA R0		
;**********************************************************************		
	I2C_WRITE_1_ADR_32_BYT:		
		MOV DPH,#000H
		MOV DPL,#000H
		MOV SMB_RW,#WRITE
			mov TARGET,#SMB_ADDR		;FIXEZ ADRESA DE DISPOZITIV ADRESABIL PE 1 BYT DRESA
			CLR SMB_SENDWORDADDR_H
			SETB SMB_SENDWORDADDR_L
;			MOV WORD_ADDR_L,#003H
			SETB SMB_BUSY
			CLR PSW_F1
			CLR SMB_ACKPOLL				;FLAG CA ASTEPT ACK
				MOV R1,#002H		;CITI BITI SCRIU DE FAPT ESTE X-1
			SETB SMB_SEND_START
			SETB SMB0CN0_STA
			JB SMB_BUSY,$
	RET
;____________________________________________________________________







;*********************************************************************	
;		RUTINA PT COMUNICARE I2C,SE BAZEAZA PE INTRERUPERI I2C	
;*******************************************************************	
I2C_RUTINA:
		MOV A,SMB0CN0
		ANL A,#0F0H
		CJNE A,#SMB_MTSTA,TEST_SMB_MTDB
	;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	
	;Master Transmitter/Receiver: START condition transmitted.	
		JNB PSW_F1,MST_START_WRITE
			MOV A,SMB_RW
			MOV B,TARGET
			ORL A,B
			MOV SMB0DAT,A
			CLR SMB0CN0_STA
			CLR SMB0CN0_SI
			CLR SMB_SEND_START
	RET
	;_____________________________________________________	
		MST_START_WRITE:
			mov A,target
			MOV SMB0DAT,A
			CLR SMB0CN0_STA
			CLR SMB0CN0_SI
				MOV A,SMB_RW
				CJNE A,#READ,MST_START_WRITE_1
				SETB PSW_F1			;SETEZ FLAGUL CA SA ARAT CA ESTE WRITE
		MST_START_WRITE_1:
	RET
	;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	
	TEST_SMB_MTDB:	
		CJNE A,#SMB_MTDB,TEST_SMB_MRDB
	
	;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// Master Transmitter: Data byte (or Slave Address) transmitted	
		JNB SMB_ACKPOLL,TEST				;FLAG CA ASTEPT ACK
			JNB SMB0CN0_ACK,TEST_2
			SETB SMB0CN0_STO
			CLR SMB_BUSY						;PRIMIT ACK,DECI AM TERMINAT D ESCIRS
		RET
			TEST_2:
			SETB SMB0CN0_STA 						;TRIMIT DIN NOU STARTUL
		RET
		
		TEST:
		JNB SMB0CN0_ACK,SMB_EROR		;DAK  NU A PRIMIT ACK RESETEZ
	;		if (ACK) // Slave Address or Data Byte	
		JNB SMB_SEND_START,MST_SWICH_RCW
		JB SMB_SENDWORDADDR_H,MST_SENDADR_H		;DAK E FLAG,INSEAMAN CA TRE S ATRIMIT ADRESA HIGH
		JB SMB_SENDWORDADDR_L,MST_SENDADR_L	
			MOV A,SMB_RW
			CJNE A,#READ,MST_SEND_DATA			;DAKA ESTE WRITE ,INCEP S ATRIMIT DATELE	 
			 SETB SMB0CN0_STA
			 SETB PSW_F1
	RET
		SJMP MST_SEND_DATA						;DUPA CE AM TRIMIS ADRESA INCEP SA TRIMIT DATELE
		
		MST_SENDADR_H:
			CLR SMB_SENDWORDADDR_H		;STERG FLAGUL DE ADRES HIGH
			MOV SMB0DAT, WORD_ADDR_H 
	RET
		;_________________________________________________________--
		MST_SENDADR_L:
			CLR SMB_SENDWORDADDR_L		;STERG FLAGUL DE ADRES LOW
			MOV SMB0DAT, WORD_ADDR_L 
	RET
		;__________________________________________________________
		MST_SEND_DATA:
			DJNZ R1,MST_SEND_DATA_OUT	;SA NU DEPASESC MARIMEA PAGINII
		;MST_SEND_STOP	
			SETB SMB0CN0_STO
			CLR SMB_BUSY
	RET
		;_______________________________________________________
		MST_SEND_DATA_OUT:
			MOVX A,@DPTR				;CITESC DIN XRAM
			MOV SMB0DAT,A			;TIMIT BITUL
			INC DPTR
	RET
		;_______________________________________________________
		MST_SWICH_RCW:		;CAS A TREC IN MODUL D ERECEPTIE
		SETB SMB_SEND_START
	RET
		;______________________________________________________
	;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	
	
	
	TEST_SMB_MRDB:	
		CJNE A,#SMB_MRDB,SMB_OUT
	
	;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		;INCEP S ARECEPTIONEZ BITII
	MST_RCV_DATA:	
		MOV A,SMB0DAT
		MOVX @DPTR,A
		INC DPTR
		DJNZ R1,MST_RCV_DATA_OUT
			CLR SMB_BUSY 		;STERG FLAGUL DE SMSBUSY
			CLR SMB0CN0_ACK
			SETB SMB0CN0_STO
	RET
		
		MST_RCV_DATA_OUT:	
		;INC R0
		SETB SMB0CN0_ACK		;DAU ACKNOLEDGE
	RET
	;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		SMB_OUT:	
	RET
		SMB_EROR:	
		setb err		;semnalez eroare de smbus
	RET
;___________________________________________________________________________________________










ORG 02000H
SHW_DIG:	;AFISEZ DIGITII	 HEX IN 7SEG

DB	03FH	;VAL PT ZERO	
DB	006H	;VALOARE PT DISPLAY DIGIT 1
DB	05BH	;VAL PT DISPLAY DIGIT 2
DB	04FH	;VAL PT DISPLAY DIGIT 3
DB	066H	;VAL PT DISPLAY DIGIT 4
DB	06DH	;VAL PT DISPLAY DIGIT 5
DB	07DH	;VAL PT DISPLAY DIGIT 6
DB	007H	;VAL PT DISPLAY DIGIT 7
DB	07FH	;VAL PT DISPLAY DIGIT 8
DB	06FH	;VAL PT DISPLAY DIGIT 9
DB	077H	;VAL PT DISPLAY DIGIT A
DB	07CH	;VAL PT DISPLAY DIGIT B
DB	039H	;VAL PT DISPLAY DIGIT C
DB	05EH	;VAL PT DISPLAY DIGIT D
DB	079H	;VAL PT DISPLAY DIGIT E
DB	071H	;VAL PT DISPLAY DIGIT F







;   LD_PW	BIT	P3.4	;POWER LED
;LD_W	BIT	P3.3	;LEDWIFI
;LD_V	BIT	P3.2	;LEDVITRO
;LD_P	BIT	P3.1	;led plus key
;LD_MIN	BIT	P3.0	;LED_MINIM
;LDF3	BIT	P2.3
;LDF2	BIT	P2.2	
;LDF1	BIT	P2.1



;**************************************************************************8888
;	FORMAT SPIRIT SAPCE.LEVE IT IN BLANCK
;)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
SPIRIT_SPACE_FORMAT:
PUSH ACC
		MOV R0,#0C0H
	SPIRIT_SPACE_FORMAT_1:
		MOV A,#000H
		MOVX @R0,A
		INC R0
		CJNE R0,#0E0H,SPIRIT_SPACE_FORMAT_1
		MOV A,#0FFH
		MOVX @R0,A
	;_______________	FORMAT LED SPACE
		MOV A,#0FFH
		MOV R0,#0C7H
		MOVX @R0,A
			MOV R0,#0CFH
			MOVX @R0,A
		MOV R0,#0D7H
		MOVX @R0,A
			MOV R0,#0DFH
			MOVX @R0,A
POP ACC

RET
;_________________________________________________




STATUS_2_SPIRITS:
	MOV A,FOC_A
	ANL A,#0F0H
	CJNE A,#000H,TST_STATUS_2_SPIRITS_VITRO
		STS_2_S_VITRO:		;STATUS FOR VITRO
		MOV A,FOC_B
		SEL_SYMBOL_SPR:	;SELECT DYSPLAYED SYMBOL
			CALL SPIRIT_4_DG_CLEAR
		ANL A,#00001111B
		SEL_SYMBOL_SPR_0:	;STANBBY,LOWEST TEMP
			CJNE A ,#000H,SEL_SYMBOL_SPR_1
			MOV R7,#000H		;SELECT SYMBOL BLANK
			SJMP SEL_SYMBOL_SPR_OUT
		SEL_SYMBOL_SPR_1:	;STANBBY,LOWEST TEMP
			CJNE A ,#001H,SEL_SYMBOL_SPR_2
			MOV R7,#000H		;SELECT SYMBOL BLANK
			SJMP SEL_SYMBOL_SPR_OUT
		SEL_SYMBOL_SPR_2:	;STANBBY,LOWEST TEMP
			CJNE A ,#002H,SEL_SYMBOL_SPR_3
			MOV R7,#076H		;SELECT SYMBOL BLANK
			SJMP SEL_SYMBOL_SPR_OUT
		SEL_SYMBOL_SPR_3:	;STANBBY,LOWEST TEMP
			CJNE A ,#003H,SEL_SYMBOL_SPR_OUT
			MOV R7,#074H		;SELECT SYMBOL BLANK
			SJMP SEL_SYMBOL_SPR_OUT
		

		SEL_SYMBOL_SPR_OUT:

		
				CALL SYMBOL_2_STATIC_SPIRIT
				;_______________
				JMP STATUS_2_SPIRITS_OUT

	TST_STATUS_2_SPIRITS_VITRO:
		CJNE A,#010H,TST_STATUS_2_SPIRITS_WIFI
		;PROBA PT FLEX
			JNB FLEX,TST_STATUS_2_SPIRITS_VITRO_NON_FLEX
				NOP
				;PT FOC 1 U
				MOV R7,#002H	;P SYMBOL
				CALL FLEX_PWR_2_SPIRIT
				SJMP STATUS_2_SPIRITS_OUT
				;PT FOC 2 FAC U INTORS
				
			
			
			
			
			
			TST_STATUS_2_SPIRITS_VITRO_NON_FLEX:
			CALL SPIRIT_4_DG_CLEAR
			SEL_SYMBOL_PWR_VITRO:
				MOV A,FOC_B	;PARAMETER 1 VALUE
			    ANL A,#00001111B	;DELET NO VALUE POWER
				CJNE A,#00AH,SEL_SYMBOL_PWR_VITRO_1
				MOV R7,#073H	;P SYMBOL
					SJMP SEL_SYMBOL_PWR_VITRO_OUT
			SEL_SYMBOL_PWR_VITRO_1:
				 	MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
					MOV R7,A
			SEL_SYMBOL_PWR_VITRO_OUT:
				CALL SYMBOL_2_STATIC_SPIRIT
					;______________	CLEAR 4DIG_DISPLAY_SPIRIT
					CALL SPIRIT_4_DG_CLEAR
				JMP STATUS_2_SPIRITS_OUT
		
		
		
		NOP

	TST_STATUS_2_SPIRITS_WIFI:
		CJNE A,#020H,TST_STATUS_2_SPIRITS_EROR
			CALL SYMBOL_RADIO_2_SPIRIT
;			CALL SPIRIT_4_DG_CLEAR
			JMP STATUS_2_SPIRITS_OUT
	TST_STATUS_2_SPIRITS_EROR:
		CJNE A,#0E0H,STATUS_2_SPIRITS_OUT
			CALL SYMBOL_ERR_2_SPIRIT
			;CALL ERROR_2_SPIRIT_SPACE
			
			
			
			
			
			
			
			
			NOP


STATUS_2_SPIRITS_OUT:

		CALL SPIRIT_2_SEG
RET


;****************************************************
;		SHOW FLEX POWER TO DISPLAY 4 DIGIT

;*****************************************************
;	FAC UPDATE LA DIGIT SI 4 SEGMENTE
;****************************************************
UPDATE_STAT_DISPLAY:
;OPREST TIMER 4
;--------------		stop timer 4 pt update
	MOV SFRPAGE,#010H
		CLR TMR5CN0_TR5	;OPRESC TIMER 4
	MOV SFRPAGE,#000H
;=====================
;FAC UPDATE LA ADRESA DE PORNIRE SI LA TIMERUL DE REFRESH 
	MOV SPR_AD,#0C0H
	MOV TIKT5_D,#TICK5D_V	;REWRITE VALUE FOR TICK 4 DISPLAY

	CALL READ_STATUS
			MOV FOC_A,INSR
			MOV FOC_B,P1R
			MOV FOC_C,P0R
			MOV FOC_D,BD0R
	CALL KEY_SEL_2_SPIRIT
	;================	TEST DACA ESTE FLEX SI ATUNCI CITESC STATUS DE LA FOC 2 ,PT POSIBILE ERORI 

	MOV A,FOC_A
	ANL A,#00FH
	CJNE A,#003H,UPDATE_STAT_DISPLAY_FLEX
		JMP UPDATE_STAT_DISPLAY_NON_FLEX
	UPDATE_STAT_DISPLAY_FLEX:
		JNB FLEX,SALT_UPDATE_STAT_DISPLAY_NON_FLEX
			SJMP TEST_FIRE_FLEX_OFF
		SALT_UPDATE_STAT_DISPLAY_NON_FLEX:
			JMP  UPDATE_STAT_DISPLAY_NON_FLEX


;		SJMP TEST_FIRE_FLEX_ON
		
		;TEST DACA ESTE OPRIT VREUN FOC
		TEST_FIRE_FLEX_OFF:
		;MOV FOC_A,#001H
		;CALL READ_STATUS
		
		MOV R4,FOC_A
		MOV R5,FOC_B
		MOV R6,FOC_C
		MOV R7,FOC_D
			MOV FOC_A,#002H
			CALL READ_STATUS
			MOV R2,INSR
			MOV R3,P1R
			;================	AM IN REGISTRII FOC 1 SI 2
		MOV A,R2
			ANL A,#0F0H
			MOV B,A
			CLR PSW_CY
		MOV A,R4
			ANL A,#0F0H
			ADD A,B
		FOC1_2_DETECTING: 	;AMINDOUA FOCURI IN DETECT
			CJNE A,#067H,TETS_FOC1_2_WORK_DETECT
				NOP
				
		TETS_FOC1_2_WORK_DETECT:	 ;UN FOC MERGE,ALTUL E IN DETECT
			CJNE A,#010H,EXITU
			;1101 SAU 0201
			;-------------	VERIFIC CARE DIN FOCURI E OPRIT SAU IN DETECTIE
;			MOV A,R4
;			ANL A,#0F0H
				;TEST 0101
;				CJNE A,#000H,FOC1_2WORK_DET_A
;				MOV A,R5
;				CJNE A,#001H,FOC1_2WORK_DET_A
;					NOP
;					SJMP FOC_1_1_WORK_DETECT
			FOC1_2WORK_DET_A:
;			MOV A,R2
;			ANL A,#0F0H	
				;TEST 0201
;				CJNE A,#000H,TEST_FOC1_2WORK_OFF
;				MOV A,R3
;				CJNE A,#001H,TEST_FOC1_2WORK_OFF
;					NOP
;			FOC_1_1_WORK_DETECT:	
;					NOP
;		SJMP EXITU				
		
		TEST_FOC1_2WORK_OFF:
			;1101 SAU 0201
			;-------------	VERIFIC CARE DIN FOCURI E OPRIT SAU IN DETECTIE
			MOV A,R4
			ANL A,#0F0H
				;TEST 0101
				CJNE A,#000H,FOC1_2WORK_OFF_A
				MOV A,R5
				;----------- TRE SA EVIT MOMENTUL IN DETECT,HIH TEMP SAU CE O MAI FI
				CJNE A,#001H,FOC_1_1_WORK_OFF
					SJMP EXITU
			FOC1_2WORK_OFF_A:
			MOV A,R2
			ANL A,#0F0H	
				;TEST 0201
				CJNE A,#000H,EXITU
				MOV A,R3
				CJNE A,#001H,FOC_1_1_WORK_OFF
					SJMP EXITU
			FOC_1_1_WORK_OFF:	
					CLR FLEX
					;---------------	SEND STOP ALL 2 FIRE
					MOV FOC_A,#002H
					MOV FOC_B,#000H
					CALL SEND_CMD
						MOV R0,#000H
						DJNZ R0,$
					MOV FOC_A,#001H
					MOV FOC_B,#000H
					CALL SEND_CMD
						MOV R0,#000H
						DJNZ R0,$
					;-------------------
					CALL SYSTEM_CHECK
					CALL SPIRIT_4_DG_CLEAR
						;call DISABLE_FLEX_COMPLEMENT
					;SETB FOC_OFF
		JMP UPD_LED_OUT			




			
			FOC1_2WORK_OFF_C:




						NOP
			EXITU:
		  MOV FOC_A,R4
		  MOV FOC_B,R5
		  MOV FOC_C,R6
		  MOV FOC_D,R7
		  
		  SJMP TEST_FIRE_FLEX_ON

;--------------		stop timer 4 pt update
	MOV SFRPAGE,#010H
		SETB TMR5CN0_TR5	;OPRESC TIMER 4
	MOV SFRPAGE,#000H
;=====================



RET		
;		ANL A,#00FH
;		CJNE A,#000H,TEST_FIRE_FLEX_ON
;				MOV A,FOC_B
;				CJNE A,#001H,TEST_FIRE_FLEX_ON
;					NOP
		
		
		TEST_FIRE_FLEX_ON:
			MOV A,FOC2A
			ANL A,#0F0H
			CJNE A,#0E0H,UPDATE_STAT_DISPLAY_NON_FLEX 
			;==========	DACA ESTE EROARE,PUN VALORE DE FOC 2 STATUS,ETC
			MOV FOC_A,#002H
			CALL READ_STATUS
				MOV FOC_A,INSR
				MOV FOC_B,P1R
				MOV FOC_C,P0R
				MOV FOC_D,BD0R

	UPDATE_STAT_DISPLAY_NON_FLEX:



	CALL STAT_2_SPIR_FIRE_DIG
;		SJMP UPDATE_STAT_DISPLAY_A

;	MOV R0,#023H
;	MOV B,#004H
;	MOV A,FOC_A
;	ANL A,#00000111B	;LEAV ONLY FIRE NUMBER
;	MUL AB
;	MOV B,#020H
;	ADD A,B
;	MOV R0,A
;	MOV A,@R0	;HAVE NEW STATUS
	MOV A,FOC_A
		ANL A,#11110000B
		CJNE A,#0E0H,UPDATE_STAT_DISPLAY_2

	
;			MOV A,@R0
;			MOV FOC_A,A
;				INC R0
;				MOV A,@R0
;				MOV FOC_B,A
;				INC R0
;				MOV A,@R0
;				MOV FOC_C,A
;				INC R0
;				MOV A,@R0
;				MOV FOC_D,A
	UPDATE_STAT_DISPLAY_A:		
			CALL STATUS_2_SPIRITS
			CALL ERROR_2_SPIRIT_SPACE
			;CALL CLR_VITRO_LED		;OFF VITRO LED
			CALL SPIRIT_2_SEG
	;--------------		stop timer 4 pt update
;			MOV SFRPAGE,#010H
;				SETB TMR5CN0_TR5	;OPRESC TIMER 4
;			MOV SFRPAGE,#000H
	;=====================
			
			UPDATE_STAT_DISPLAY_1:
			;CALL SYSTEM_CHECK
			;daca sint cu flex,opresc amindoua focurile
			jnb flex,UPDATE_STAT_DISPLAY_1_F3
				  CALL FLX_STOP_COMPLEMENT
SJMP UPDATE_STAT_DISPLAY_1_F3
;================================
;			MOV A,FOC_A
;			ANL A,#00FH
;			CJNE A,#003H,UPDATE_STAT_DISPLAY_1_F1_F2
;				SJMP UPDATE_STAT_DISPLAY_1_F3
;			UPDATE_STAT_DISPLAY_1_F1_F2:
;				JNB FLEX,UPDATE_STAT_DISPLAY_1_F1_F2_NO_FLEX
;			UPDATE_STAT_DISPLAY_1_F1_F2_FLEX:
;				CLR FLEX
					;---------------	SEND STOP ALL 2 FIRE
					MOV FOC_A,#002H
					MOV FOC_B,#000H
					CALL SEND_CMD
						MOV R0,#000H
						DJNZ R0,$
					MOV FOC_A,#001H
					MOV FOC_B,#000H
					CALL SEND_CMD
						MOV R0,#000H
						DJNZ R0,$
					;-------------------
						CALL WAIT_KEY_X
						call DISABLE_FLEX_COMPLEMENT
							SJMP UPDATE_STAT_DISPLAY_1A
			
			UPDATE_STAT_DISPLAY_1_F1_F2_NO_FLEX:
;======================			
			UPDATE_STAT_DISPLAY_1_F3:
			CALL WAIT_KEY_X
			;CJNE A,#001H,READ_UPDATED_STAT_1
				mov a,key_h	
					CJNE A,#000H,UPDATE_STAT_DISPLAY_1
				mov a,key_L	
					CJNE A,#001H,UPDATE_STAT_DISPLAY_1
				CALL BUZZING
			CALL CLR_VITRO_LED
			;SEND POWER_OFF ORDER
				MOV A,FOC_A
				ANL A,#00001111B	;DELETE INSTRUCTION
				MOV FOC_A,A
				MOV FOC_B,#000H
				CALL SEND_CMD				
				
			;PWER_OFF_ERR_FLEX:
				JNB FLEX, UPDATE_STAT_DISPLAY_1A
					MOV R0,#000H
					DJNZ R0,$
					call DISABLE_FLEX_COMPLEMENT
						MOV FOC_A,#001H
						MOV FOC_B,#000H
							CALL SEND_CMD
						CLR FLEX
				
				
			UPDATE_STAT_DISPLAY_1A:
				CALL STATUS_2_SPIRITS
				CALL CLR_VITRO_LED
				CALL SET_3_LED
				;==================	modific si valorile foc1,2 sa fie in zero
	;--------------		stop timer 4 pt update
			MOV SFRPAGE,#010H
				SETB TMR5CN0_TR5	;OPRESC TIMER 4
			MOV SFRPAGE,#000H
	;=====================



RET


jmp WAIT_FIRE_SELECT
	
	
	UPDATE_STAT_DISPLAY_2:

			
					 

	MOV A,FOC_A
	ANL A,#00FH
	UPDATE_STAT_DISPLAY_F3:
	;FOC3=> TIMER ON-DIPLAY TIMER	
	;		TIMER OFF-CLEAR DISPLAY	
		CJNE A,#003H,UPDATE_STAT_DISPLAY_F1_F2
			MOV A,FOC_D
			JNB ACC.7,UPDATE_STAT_DISPLAY_F3_NO_TIMER
				CALL TIMER_2_SPIRIT_SPACE
					SJMP UPDATE_STAT_DISPLAY_2C
		   	UPDATE_STAT_DISPLAY_F3_NO_TIMER:
				CALL SPIRIT_4_DG_CLEAR
					SJMP UPDATE_STAT_DISPLAY_2C
	UPDATE_STAT_DISPLAY_F1_F2:
	;FOC1,2=> FLEX ON-DISPLAY FLEX
	;			  OFF- TIMER ON- DISPLAY TIMER
	;						 OFF-CLEAR DISPLAY
	
;	MOV FOC_D,#098H	;TIMER PT DEBUG
	MOV A,FOC_D
		JNB ACC.7,UPDATE_STAT_DISPLAY_F1_F2_NO_TIMER
			CALL TIMER_2_SPIRIT_SPACE
				SJMP UPDATE_STAT_DISPLAY_F1_F2_FLEX_TEST
		
		UPDATE_STAT_DISPLAY_F1_F2_NO_TIMER:
			CALL SPIRIT_4_DG_CLEAR
				SJMP UPDATE_STAT_DISPLAY_F1_F2_FLEX_TEST


			UPDATE_STAT_DISPLAY_F1_F2_FLEX_TEST:
				JNB FLEX,UPDATE_STAT_DISPLAY_F1_F2_FLEX_OFF

				UPDATE_STAT_DISPLAY_F1_F2_FLEX_ON:
					 CALL FLEX_PWR_2_SPIRIT
					 SJMP UPDATE_STAT_DISPLAY_2C
				
				UPDATE_STAT_DISPLAY_F1_F2_FLEX_OFF:
					SJMP UPDATE_STAT_DISPLAY_2C
	



	;-----------------		display timer
		MOV A,FOC_D
		JNB ACC.7,UPDATE_STAT_DISPLAY_2A 	;SEMNALEZ TIMER CU PUNCTUL
			
			UPD_DISPLAYU_TIME:
			;CALL SHOW_TIMER
			CALL TIMER_2_SPIRIT_SPACE
	UPDATE_STAT_DISPLAY_2A:
		;in caz de foc 3 care nu este in flex,sar peste diplay d eflex
		mov a,FOC_A
		ANL A,#00FH
			CJNE A,#003H,UPDATE_STAT_DISPLAY_2A1
				 ;=======================	DACA ESTE CU TIMER ACTIVAT,NU MAI STERG ECRANUL
				 MOV A,FOC_D
				 JB ACC.7,UPDATE_STAT_DISPLAY_2B
				 	CALL SPIRIT_4_DG_CLEAR
				 	SJMP UPDATE_STAT_DISPLAY_2B
		UPDATE_STAT_DISPLAY_2A1:
		JNB FLEX, UPDATE_STAT_DISPLAY_2B
			CALL FLEX_PWR_2_SPIRIT
			CALL SPIRIT_2_SEG
	
	
	
	UPDATE_STAT_DISPLAY_2B:		;IN CAZ CA ESE OPRIT AM SA STERG 4 DIGITI
		MOV A,FOC_A
		ANL A,#0F0H
		CJNE A,#000H,UPDATE_STAT_DISPLAY_2C
			CALL SPIRIT_4_DG_CLEAR
	
	
	UPDATE_STAT_DISPLAY_2C:
	CALL SPIRIT_2_SEG
	;SETEZ SI LEDUL RESPECTIV TEST
		MOV A ,FOC_A
		ANL A,#0F0H
		UPD_SEL_LED:
		CJNE A,#000H,UPD_VITRO_LED
			; ON LED INDUCT SI WIFI
			CALL LED_INDON_WIFION
					SJMP UPD_LED_OUT
		UPD_VITRO_LED:
			CJNE A,#010H,UPD_WIFI_LED
			; ON LED INDUCT SI WIFI
			CALL LED_IND_BLINK
					SJMP UPD_LED_OUT

		UPD_WIFI_LED:
			CJNE A,#020H,UPD_LED_X
			; ON LED INDUCT SI WIFI
			CALL LED_WIFI_BLINK
					SJMP UPD_LED_OUT


		
		
		UPD_LED_X:
		
		UPD_LED_OUT:
		 
	   CALL SPIRIT_2_SEG
	
;--------------		stop timer 4 pt update
	MOV SFRPAGE,#010H
		SETB TMR5CN0_TR5	;OPRESC TIMER 4
	MOV SFRPAGE,#000H
;=====================










	NOP
RET
;_____________________________________________________

;*****************************************************
;	PUN IN ON LEDUL VITRO SI IN OFF LEDUL WIFI
;*****************************************************
LED_INDON_WIFION:
			MOV R0,#00C7H
			MOVX A,@R0
			ORL A,#00000110B
			MOVX @R0,A
				MOV R0,#00CFH
				MOVX A,@R0
				;MOV A,#000H
				ORL A,#00000110B
				MOVX @R0,A
			MOV R0,#00D7H
			MOVX A,@R0
			ORL A,#00000110B
			MOVX @R0,A
				MOV R0,#00DFH
				MOVX A,@R0
				ORL A,#00000110B
				MOVX @R0,A

RET
;------------------------------------------------

;*****************************************************
;	PUN IN ON LEDUL VITRO SI IN OFF LEDUL WIFI
;*****************************************************
LED_INDON_WIFIOFF:
		MOV R0,#0C7H
		MOVX A,@R0
		ANL A,#11111101B
		ORL A,#00000100B
		MOVX @R0,A
			MOV R0,#0CFH
			MOVX A,@R0
			ANL A,#11111101B
			ORL A,#00000100B
			MOVX @R0,A
		MOV R0,#0D7H
		MOVX A,@R0
		ANL A,#11111101B
		ORL A,#00000100B
		MOVX @R0,A
			MOV R0,#0DFH
			MOVX A,@R0
			ANL A,#11111101B
			ORL A,#00000100B
			MOVX @R0,A
RET
;---------------------------------------

;*****************************************************
;	PUN IN BLINK LEDUL VITRO SI IN OFF LEDUL WIFI
;*****************************************************
LED_IND_BLINK:
			MOV R0,#00C7H
			MOVX A,@R0
			ANL A,#11111001B
			ORL A,#00000100B
			MOVX @R0,A
				MOV R0,#0CFH
				MOVX A,@R0
				ANL A,#11111001B
				;ORL A,#00000110B
				MOVX @R0,A
			MOV R0,#0D7H
			MOVX A,@R0
			ANL A,#11111001B
			ORL A,#00000100B
			MOVX @R0,A
				MOV R0,#00DFH
				MOVX A,@R0
				ANL A,#11111001B
				;ORL A,#00000110B
				MOVX @R0,A
RET
;---------------------------------------------

;*****************************************************
;	PUN IN BLINK LEDUL VITRO SI IN OFF LEDUL WIFI
;*****************************************************
LED_WIFI_BLINK:
			MOV R0,#00C7H
			MOVX A,@R0
			ANL A,#11111001B
			ORL A,#00000010B
			MOVX @R0,A
				MOV R0,#0CFH
				MOVX A,@R0
				ANL A,#11111001B
				;ORL A,#00000110B
				MOVX @R0,A
			MOV R0,#0D7H
			MOVX A,@R0
			ANL A,#11111001B
			ORL A,#00000010B
			MOVX @R0,A
				MOV R0,#00DFH
				MOVX A,@R0
				ANL A,#11111001B
				;ORL A,#00000110B
				MOVX @R0,A
RET
;---------------------------------------------

;*****************************************************
;	PUN IN BLINK LEDUL VITRO SI IN OFF LEDUL WIFI
;*****************************************************
LED_HOME:
			MOV R0,#00C7H
			MOVX A,@R0
			ORL A,#11100001B
			ANL A,#11100001B
			MOVX @R0,A
				MOV R0,#0CFH
				MOVX A,@R0
				ORL A,#11100001B
				ANL A,#11100001B
				MOVX @R0,A
			MOV R0,#0D7H
			MOVX A,@R0
			ORL A,#11100001B
			ANL A,#11100001B
			MOVX @R0,A
				MOV R0,#00DFH
				MOVX A,@R0
				ORL A,#11100001B
				ANL A,#11100001B
				MOVX @R0,A
RET
;---------------------------------------------









;**************************************************************************
;		aprind cele 5 leduri 4 D EFOCURI SI CEL D EPUTERE
;**************************************************************************
SHOW_POWER_ON_LEDS:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
	MOV A,#11100001B
	MOVX @R0,A
		MOV R0,#0CFH
		MOVX A,@R0
		MOV A,#11100001B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
	MOV A,#11100001B
	MOVX @R0,A
		MOV R0,#0DFH
		MOVX A,@R0
		MOV A,#11100001B
		MOVX @R0,A
POP ACC
RET
;_______________________________________________________________________

;**********************************
;	START LEDS FOR -,+,TIMER
;**********************************
VITRO_CONTROLS_ON:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
	ORL A,#00011000B	;
	MOVX @R0,A
		MOV R0,#0CFH
		MOVX A,@R0
		ORL A,#00011000B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
	ORL A,#00011000B
	MOVX @R0,A
		MOV R0,#0DFH
		MOVX A,@R0
		ORL A,#00011000B
		MOVX @R0,A
POP ACC
RET
;_______________________________________________

;**********************************
;	STOP LEDS FOR -,+,TIMER
;**********************************
VITRO_CONTROLS_OFF:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
	ANL A,#11111011B	;
	MOVX @R0,A
		MOV R0,#0CFH
		MOVX A,@R0
		ANL A,#11111011B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
	ANL A,#11111011B
	MOVX @R0,A
		MOV R0,#0DFH
		MOVX A,@R0
		ANL A,#11111011B
		MOVX @R0,A
POP ACC
RET
;_______________________________________________

;**********************************
;	STOP LEDS FOR -,+,TIMER
;**********************************
FLEX_LED_SELECT_ON:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
	ORL A,#11100000B	;
	MOVX @R0,A
		MOV R0,#0CFH
		MOVX A,@R0
		ORL A,#11100000B
		CLR ACC.7
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
	ORL A,#11100000B
	MOVX @R0,A
		MOV R0,#0DFH
		MOVX A,@R0
		ORL A,#11100000B
		CLR ACC.7
		MOVX @R0,A
POP ACC
RET
;_______________________________________________















;*************************************************************************
;	SET ALL 3 LED FOR FIRE KEY ON
;*************************************************************************
SET_3LED_SPIRIT:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
	ANL A,#11111000B	;ALL ON
	MOVX @R0,A
		MOV R0,#0CFH
		MOVX A,@R0
		ANL A,#11111000B	;ALL ON
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
	ANL A,#11111000B	;ALL ON
	MOVX @R0,A
		MOV R0,#0DFH
		MOVX A,@R0
		ANL A,#11111000B	;ALL ON
		MOVX @R0,A
POP ACC
RET
;_______________________________________________________________________

;***********************************************************************
;		SET VITRO LED ONN
;***********************************************************************
SET_VITRO_LED:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
		;ANL A,#11101111B
		ORL A,#00000100B
		MOVX @R0,A
	MOV R0,#0CFH
	MOVX A,@R0
		;ANL A,#11101111B
		ORL A,#00000100B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
		;ANL A,#11101111B
		ORL A,#00000100B
		MOVX @R0,A
	MOV R0,#0DFH
	MOVX A,@R0
		;ANL A,#11101111B
		ORL A,#00000100B
		MOVX @R0,A
POP ACC
RET
;_________________________________________________________

;***********************************************************************
;		SET VITRO LED ONN
;***********************************************************************
CLR_VITRO_LED:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
		ORL A,#00010000B
		MOVX @R0,A
	MOV R0,#0CFH
	MOVX A,@R0
		ORL A,#00010000B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
		ORL A,#00010000B
		MOVX @R0,A
	MOV R0,#0DFH
	MOVX A,@R0
		ORL A,#00010000B
		MOVX @R0,A
POP ACC
RET
;_________________________________________________________	

;***********************************************************************
;		SET VITRO LED ONN
;***********************************************************************
SET_WIFI_LED:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
		;ANL A,#11011111B
		ORL A,#00000010B
		MOVX @R0,A
	MOV R0,#0CFH
	MOVX A,@R0
		;ANL A,#11011111B
		ORL A,#00000010B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
		;ANL A,#11011111B
		ORL A,#00000010B
		MOVX @R0,A
	MOV R0,#0DFH
	MOVX A,@R0
		;ANL A,#11011111B
		ORL A,#00000010B
		MOVX @R0,A
POP ACC
RET
;_________________________________________________________

;***********************************************************************
;		SET VITRO LED ONN
;***********************************************************************
CLR_WIFI_LED:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
		ANL A,#11111101B
		MOVX @R0,A
	MOV R0,#0CFH
	MOVX A,@R0
		ANL A,#11111101B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
		ANL A,#11111101B
		MOVX @R0,A
	MOV R0,#0DFH
	MOVX A,@R0
		ANL A,#11111101B
		MOVX @R0,A
POP ACC
RET
;_________________________________________________________

;***********************************************************************
;		SETB 3 LED OF FIRE
;***********************************************************************
CLR_3_LED:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
		ORL A,#00000111B
		MOVX @R0,A
	MOV R0,#0CFH
	MOVX A,@R0
		ORL A,#00000111B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
		ORL A,#00000111B
		MOVX @R0,A
	MOV R0,#0DFH
	MOVX A,@R0
		ORL A,#00000111B
		MOVX @R0,A
POP ACC
RET
;_________________________________________________________

;***********************************************************************
;		CLR 3 LED OF FIRE
;***********************************************************************
SET_3_LED:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
		ANL A,#11111000B
		MOVX @R0,A
	MOV R0,#0CFH
	MOVX A,@R0
		ANL A,#11111000B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
		ANL A,#11111000B
		MOVX @R0,A
	MOV R0,#0DFH
	MOVX A,@R0
		ANL A,#11111000B
		MOVX @R0,A
POP ACC
RET
;_________________________________________________________	

	



;SET_3_LED



;*******************************************************************************************************888
;	DRIVER FOR DISPLAY 3 SEG
;**********************************************************************************************************
DISPLAY_DRIVER_1_00:
;**********************************8





;*******************************************************************
; MOV ONE LINE FROM V-RAM IN SEG SPACE(SPACE FOR SEGMENTS)		
;*******************************************************************
SPIRIT_2_SEG:	;MOVE SPIRIT IN RAM DISPLAY SPACE  FIRST ADDRES IS IN SPIRIT ADRES
PUSH 000H
PUSH ACC
PUSH 001H
PUSH 000H
	MOV R0,SPR_AD
	SPIRIT_2_SEG_1:
		MOVX A,@R0
		INC R0
		MOV SG0,A
			MOVX A,@R0
			INC R0
			MOV SG1,A
		MOVX A,@R0
		INC R0
		MOV SG2,A
			MOVX A,@R0
			INC R0
			MOV SG3,A
			MOVX A,@R0
		INC R0
		MOV SG4,A
			MOVX A,@R0
			INC R0
			MOV SG5,A
		MOVX A,@R0
		INC R0
		MOV SG6,A
			MOVX A,@R0
			INC R0
			;MOV SPR_LD,A
			MOV SG7,A
			;CALL WRT_SPIRIT_2_LED ;WRITE ALSO THE VALUE OF LEDS
		;_______________________________________________		
		;TST_END OF DATA	  	;IF END OF V-RAM DATA,RESET START ADRESS
			MOVX A,@R0
			CJNE A,#0FFH,SPIRIT_2_SEG_2
				;MOV DPTR,#SPIRIT_TABLE
				MOV SPR_AD,#0C0H
	CALL WRT_LED_8_DATA
POP 000H
POP 001H
POP ACC
POP 000H
RET
		SPIRIT_2_SEG_2:
	MOV SPR_AD,R0
	CALL WRT_LED_8_DATA
POP 000H
POP 001H
POP ACC
POP 000H
RET
;_________________________________________________


;*************************************************
;	CHECK ALL FIRE
;**********************************
SYSTEM_CHECK:
;SAVE ACTUAL CAHCE
push acc
PUSH 000H
PUSH 001H
	MOV R0,#0F0H	;POINTER FOR SAVING CACHE
	MOV R1,#01BH	;POINTER OF CACHE
	SYSTEM_CHECK_1:
		MOV A,@R1
		MOVX @R0,A
		INC R0
		INC R1
		CJNE R1,#020H,SYSTEM_CHECK_1	;END OF CACHE SPACE
;____________________________
	MOV FOC_A,#001H	;CHEK STAT INSTR
CALL WAIT_4MS
CALL WAIT_4MS
CALL WAIT_4MS

    CALL READ_STATUS
;	CALL LOAD_SIMULATE_F1_NO_ERROR
;	CALL LOAD_SIMULATE_1_P5
;	CALL LOAD_SIMULATE_ER_07
;	CLR ERR
		MOV FOC1A,INSR
		MOV FOC1B,P1R
		MOV FOC1C,P0R	;UPDATE STATUS REGISTER
		MOV FOC1D,BD0R
	    	MOV FOC_A,FOC1A
			MOV FOC_B,FOC1B
			MOV FOC_C,FOC1C
			MOV FOC_D,FOC1D
		;_______________________________
			CALL STAT_2_SPIR_FIRE_DIG
;____________________________
	MOV FOC_A,#002H	;CHEK STAT INSTR
CALL WAIT_4MS
    CALL READ_STATUS
;	CALL LOAD_SIMULATE_F2_NO_ERROR
;	CALL LOAD_SIMULATE_1_P5
;	CALL LOAD_SIMULATE_2_R
;	CLR ERR
		MOV FOC2A,INSR
		MOV FOC2B,P1R
		MOV FOC2C,P0R	;UPDATE STATUS REGISTER
		MOV FOC2D,BD0R
	    	MOV FOC_A,FOC2A
			MOV FOC_B,FOC2B
			MOV FOC_C,FOC2C
			MOV FOC_D,FOC2D
		;_______________________________
			CALL STAT_2_SPIR_FIRE_DIG
SJMP SYSTEM_CHECK_1A
;____________________________
	MOV FOC_A,#003H	;CHEK STAT INSTR
;CALL WAIT_400MS
CALL WAIT_4MS
;MOV R0,#000H
;DJNZ R0,$
    CALL READ_STATUS

;	CALL LOAD_SIMULATE_F1_NO_ERROR
;	CALL LOAD_SIMULATE_1_P5
;	CALL LOAD_SIMULATE_ER_07
;	CLR ERR
		MOV FOC3A,INSR
		MOV FOC3B,P1R
		MOV FOC3C,P0R	;UPDATE STATUS REGISTER
		MOV FOC3D,BD0R
	    	MOV FOC_A,FOC3A
			MOV FOC_B,FOC3B
			MOV FOC_C,FOC3C
			MOV FOC_D,FOC3D
		;_______________________________
			CALL STAT_2_SPIR_FIRE_DIG


	SYSTEM_CHECK_1A:	;SAR PESTE FOC 3

	NOP
;RECOVER CACHE
	MOV R0,#0F0H	;POINTER FOR SAVING CACHE
	MOV R1,#01BH	;POINTER OF CACHE
	SYSTEM_CHECK_9:
		MOVX A,@R0
		MOV @R1,A
		INC R0
		INC R1
		CJNE R1,#020H,SYSTEM_CHECK_9	;END OF CACHE SPACE
	POP 001H
	POP 000H
	POP ACC
RET
;________________________________







;********************************************************8888
;	DISPLAY ONLY STAUS IN 3 DIGIT OF FIRE
;************************************************************
STAT_2_SPIR_FIRE_DIG:
	MOV A,FOC_A
	ANL A,#0F0H
	CJNE A,#000H,TST_STATUS_2_FIRE_DIG_VITRO 
		STS_2_FIRE_DIG_VITRO:		;STATUS FOR VITRO
		MOV A,FOC_B
		FIRE_DIG_SYMBOL_SPR:	;SELECT DYSPLAYED SYMBOL
		ANL A,#00001111B
		SEL_SYMBOL_FIRE_DIG_0:	;STANBBY,LOWEST TEMP
			CJNE A ,#000H,SEL_SYMBOL_FIRE_DIG_1
			MOV R7,#000H		;SELECT SYMBOL BLANK
				SJMP SEL_SYMBOL_FIRE_DIG_OUT
		SEL_SYMBOL_FIRE_DIG_1:	;STANBBY,LOWEST TEMP
			CJNE A ,#001H,SEL_SYMBOL_FIRE_DIG_2
			MOV R7,#040H		;SELECT SYMBOL -
				SJMP SEL_SYMBOL_FIRE_DIG_OUT
		SEL_SYMBOL_FIRE_DIG_2:	;STANBBY,LOWEST TEMP
			CJNE A ,#002H,SEL_SYMBOL_FIRE_DIG_3
			MOV R7,#076H		;SELECT SYMBOL H
				SJMP SEL_SYMBOL_FIRE_DIG_OUT
		SEL_SYMBOL_FIRE_DIG_3:	;STANBBY,LOWEST TEMP
			CJNE A ,#003H,SEL_SYMBOL_FIRE_DIG_OUT
			MOV R7,#074H		;SELECT SYMBOL h
				;SJMP SEL_SYMBOL_SPR_OUT
			;CLEAR POSIBLE SYMBOLS OF 4 DIGIT DISPLAY
	SEL_SYMBOL_FIRE_DIG_OUT:
				CALL SYMBOL_2_STATIC_SPIRIT
				;_______________
				JMP STATUS_2_FIRE_DIG_OUT

	
	
	TST_STATUS_2_FIRE_DIG_VITRO:
		CJNE A,#010H,TST_STATUS_2_FIRE_DIG_WIFI
			;CALL SPIRIT_4_DG_CLEAR
			;in caz de focul 3 sar peste partea cu flex
			mov a,foc_a
			anl a,#00fh
				cjne a,#003h,STATUS_2_FIRE_DIG_VITRO_FLEX_F0
				sjmp STATUS_2_FIRE_DIG_VITRO_NON_FLEX
			
			STATUS_2_FIRE_DIG_VITRO_FLEX_F0:
			JNB FLEX,STATUS_2_FIRE_DIG_VITRO_NON_FLEX
				;==============	TEST DACA ESTE TIMER =1 CA SA IL POT OPRI
				MOV A,FOC_D
				CLR ACC.7
				CJNE A,#001H,STATUS_2_FIRE_DIG_VITRO_FLEX_F0_0
					;================
					;OPRESC TIMER 4
						MOV SFRPAGE,#010H
							clr TMR5CN0_TR5	;START TIMER 4
						MOV SFRPAGE,#000H
					CALL BUZZING
						MOV SFRPAGE,#010H
							SETB TMR5CN0_TR5	;START TIMER 4
						MOV SFRPAGE,#000H
				
				
				STATUS_2_FIRE_DIG_VITRO_FLEX_F0_0:
				MOV A ,FOC_A
				ANL A,#00001111B		;LAS DOAR FOC NUMAR
				CJNE A,#001H,STATUS_2_FIRE_DIG_VITRO_FLEX_F2
				STATUS_2_FIRE_DIG_VITRO_FLEX_F1:
					MOV R7,#00111110B	;FOC 1 FLEX SYMBOL
						SJMP SEL_SYMBOL_PWR_FIRE_DIG_VITRO_OUT
				STATUS_2_FIRE_DIG_VITRO_FLEX_F2:
					CJNE A,#002H,STATUS_2_FIRE_DIG_VITRO_NON_FLEX
						MOV R7,#00110111B	;FOC 2 FLEX SYMBOL
							SJMP SEL_SYMBOL_PWR_FIRE_DIG_VITRO_OUT
				;=============================================================
			STATUS_2_FIRE_DIG_VITRO_NON_FLEX:
			SEL_SYMBOL_FIRE_DIG_PWR_VITRO:
				MOV A,FOC_B	;PARAMETER 1 VALUE
			    ANL A,#00001111B	;DELET NO VALUE POWER
				CJNE A,#00AH,SEL_SYMBOL_PWR_FIRE_DIG_VITRO_1
				MOV R7,#073H	;P SYMBOL
					SJMP SEL_SYMBOL_PWR_FIRE_DIG_VITRO_OUT
			SEL_SYMBOL_PWR_FIRE_DIG_VITRO_1:
				 	MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
					;====================	TEST TO SHOW TIMER POINT
						MOV B,A		;SAVE A IN B
						MOV A,FOC_D
						JNB ACC.7,SEL_SYMBOL_PWR_FIRE_DIG_VITRO_2
							MOV A,B
							ORL A,#10000000B  ;DECIMAL POINT
							MOV R7,A
							;daca este 1 minut ramas..fac piu piu
								mov a,foc_d	
								clr acc.7
								cjne a,#001H,SEL_SYMBOL_PWR_FIRE_DIG_VITRO_1A
								;OPRESC TIMER 4
								MOV SFRPAGE,#010H
									clr TMR5CN0_TR5	;START TIMER 4
								MOV SFRPAGE,#000H
									CALL BUZZING
								MOV SFRPAGE,#010H
									SETB TMR5CN0_TR5	;START TIMER 4
								MOV SFRPAGE,#000H
									MOV R7,#0F8H	;SIMBOL t.
									
								
								SEL_SYMBOL_PWR_FIRE_DIG_VITRO_1A:
							SJMP SEL_SYMBOL_PWR_FIRE_DIG_VITRO_OUT
					SEL_SYMBOL_PWR_FIRE_DIG_VITRO_2:
					MOV R7,B
			SEL_SYMBOL_PWR_FIRE_DIG_VITRO_OUT:
				CALL SYMBOL_2_STATIC_SPIRIT
				JNB FLEX,SEL_SYMBOL_PWR_FIRE_DIG_VITRO_OUT_NO_FLEX
					;CALL FLEX_PWR_2_SPIRIT
				SEL_SYMBOL_PWR_FIRE_DIG_VITRO_OUT_NO_FLEX:
				JMP STATUS_2_FIRE_DIG_OUT
		NOP



	TST_STATUS_2_FIRE_DIG_WIFI:
		CJNE A,#020H,TST_STATUS_2_FIRE_DIG_EROR
			CALL SYMBOL_RADIO_2_SPIRIT
;			CALL SPIRIT_4_DG_CLEAR
			JMP STATUS_2_FIRE_DIG_OUT
	TST_STATUS_2_FIRE_DIG_EROR:
;		CJNE A,#0E0H,STATUS_2_SPIRITS_OUT
			CALL SYMBOL_ERR_2_SPIRIT
			;CALL ERROR_2_SPIRIT_SPACE
			NOP


STATUS_2_FIRE_DIG_OUT:
RET
;___________________________________________________________























;*****************************************************
;	WRITE VALUE OF SPIRIT TO 8 LED  1-F1,2-F2,3-F3,4-,5,VITRO,6-WIFI,7PWR,8-+	
;**************************************************88
WRT_SPIRIT_2_LED:	
;	MOV A,
	MOV C,ACC.7
	MOV LD_FL,C
		MOV C,ACC.6
		MOV LDF1,C
	MOV C,ACC.5
	MOV LDF2,C
		MOV C,ACC.4
		MOV LDF3,C
	MOV C,ACC.3
	MOV LD_MIN,C
		MOV C,ACC.2
		MOV LD_P,C
	MOV C,ACC.1
	MOV LD_TOT,C
		MOV C,ACC.0
		MOV LD_PW,C
RET
;_________________________________________________________

;*****************************************************************
;	WRITE COMPLET ALL DISPLAY 7 SEGMENTS VALUE TO WRITE AR EIN SG0,SG1,SG2..SG6
;***************************************************************88
WRT_LED_8_DATA:
   	MOV A,#040H
CALL WRT_BYTE_MCW_START
	CALL WRT_BYTE_MCW
CALL WRT_BYTE_MCW_STOP

	CALL WAIT_MCW
;__________________________________   
   	MOV A,#0C0H
CALL WRT_BYTE_MCW_START
	CALL WRT_BYTE_MCW
	CALL WAIT_MCW	
;______________________________
	MOV A,SG0
	CALL WRT_SEG_DATA_MCW
		MOV A,SG1
		CALL WRT_SEG_DATA_MCW
	MOV A,SG2
	CALL WRT_SEG_DATA_MCW
		MOV A,SG3
		CALL WRT_SEG_DATA_MCW
	MOV A,SG4
	CALL WRT_SEG_DATA_MCW
		MOV A,SG5
		CALL WRT_SEG_DATA_MCW
	MOV A,SG6
	CALL WRT_SEG_DATA_MCW
		MOV A,SG7
		CALL WRT_SEG_DATA_MCW
CALL WRT_BYTE_MCW_STOP
RET
;_________________________________________________________



;********************************************************************************8
;		DIFERENT SYMBOLS ON 4 DIGIT SCREEN
;********************************************************************************
WIFI_DISPLAY_00:
MOV DPTR,#SPIRIT_WIFI_OFF
CALL SPIRIT_WIFI_2_VRAM
RET
				;________________
				MOV R7,#040H	
					MOV R0,#0C3H	; 	;PUT IN SPIRIT SAPCE MSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CBH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D3H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DBH	;
						MOV A,R7	;1
						MOVX @R0,A	
				;___________________________
				MOV R7,#040H
					MOV R0,#0C4H	; 	;PUT IN SPIRIT SAPCE LSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CCH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D4H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DCH	;
						MOV A,R7	;1
						MOVX @R0,A
			
		;-------------------------------------------------------------
				;________________
				MOV R7,#040H
					MOV R0,#0C5H	; 	;PUT IN SPIRIT SAPCE MSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CDH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D5H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DDH	;
						MOV A,R7	;1
						MOVX @R0,A	
				;________________
				MOV R7,#040H	
					MOV R0,#0C6H	; 	;PUT IN SPIRIT SAPCE LSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CEH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D6H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DEH	;
						MOV A,R7	;1
						MOVX @R0,A
;MOV DPTR,#SPIRIT_WIFI_ONPLACE
;CALL SPIRIT_WIFI_2_VRAM
RET
;_________________________________________________________________________________


;********************************************************************************8
;		DIFERENT SYMBOLS ON 4 DIGIT SCREEN
;********************************************************************************
WIFI_DISPLAY_01:
MOV DPTR,#SPIRIT_WIFI_WAITING
CALL SPIRIT_WIFI_2_VRAM
RET
				;________________
				MOV R7,#03FH	
					MOV R0,#0C3H	; 	;PUT IN SPIRIT SAPCE MSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CBH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D3H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DBH	;
						MOV A,R7	;1
						MOVX @R0,A	
				;___________________________
				MOV R7,#03FH
					MOV R0,#0C4H	; 	;PUT IN SPIRIT SAPCE LSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CCH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D4H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DCH	;
						MOV A,R7	;1
						MOVX @R0,A
			
		;-------------------------------------------------------------
				;________________
				MOV R7,#03FH
					MOV R0,#0C5H	; 	;PUT IN SPIRIT SAPCE MSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CDH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D5H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DDH	;
						MOV A,R7	;1
						MOVX @R0,A	
				;________________
				MOV R7,#03FH	
					MOV R0,#0C6H	; 	;PUT IN SPIRIT SAPCE LSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CEH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D6H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DEH	;
						MOV A,R7	;1
						MOVX @R0,A
RET
;_________________________________________________________________________________


;***************************************************************************
;COPY VALUE FROM CODE SPACE IN 4 LINE/4 DIGIT FOR VIDEO RAM
;**************************************************************************8
SPIRIT_WIFI_2_VRAM:
	;DPTR IS ALREADY WITH THE SELECTED ADDRES
	;LINE_1
	MOV R0,#0C3H
	SPIRIT_WIFI_2_VRAM_1:
		CLR A
		MOVC A,@A+DPTR
		MOVX @R0,A
		INC R0
		INC	DPTR
			CLR A
			MOVC A,@A+DPTR
			MOVX @R0,A
			INC R0
			INC	DPTR
	    CLR A
		MOVC A,@A+DPTR
		MOVX @R0,A
		INC R0
		INC	DPTR
			CLR A
			MOVC A,@A+DPTR
			MOVX @R0,A
			INC R0
			INC	DPTR
		;_______________________
		 MOV A,R0
		 MOV B,#004H
		 ADD A,B
		 MOV R0,A
		 CJNE A,#0E3H,SPIRIT_WIFI_2_VRAM_1
RET
;_________________________________________________



WIFI_DISPLAY_02:
	MOV DPTR,#SPIRIT_WIFI_ONPLACE
	CALL SPIRIT_WIFI_2_VRAM
RET
;________________________________________________




;===========================
;===========================
HEX_TO_BCD:
;	 MOV B,#0DBH
;	 MOV A,B
	 MOV B,#0100D
	 DIV AB
	 	;IN A AM 1DIG
		MOV R2,A
		MOV A,B
		MOV B,#010D
		DIV AB
		MOV R3,A
		MOV R4,B
RET
;===========================








	
	
	
	
	
	
	MOV DPTR,#FRW
	CALL DEL_PG_CODE
	MOV DPTR,#02004H 	;PAGINA UND EESTE FIRMWAREUL 
	MOV R0,#0030H
	dumb_pgm_1:
		MOV DPTR,#02004H
		MOVX A,@DPTR
		MOV DPTR,#06000H
				CLR IE_EA			
					ORL PSCTL,#001H		 
					ANL PSCTL,#0FDH		 	
					MOV FLKEY ,#0A5H
					MOV FLKEY,#0F1H
					MOVX @DPTR,A
		;----------------------------
		MOV DPTR,#02005H
		MOVX A,@DPTR
		MOV DPTR,#06001H
				CLR IE_EA			
					ORL PSCTL,#001H		 
					ANL PSCTL,#0FDH		 	
					MOV FLKEY ,#0A5H
					MOV FLKEY,#0F1H
					MOVX @DPTR,A
		;--------------------------------------------
		MOV DPTR,#02006H
		MOVX A,@DPTR
		MOV DPTR,#06002H
				CLR IE_EA			
					ORL PSCTL,#001H		 
					ANL PSCTL,#0FDH		 	
					MOV FLKEY ,#0A5H
					MOV FLKEY,#0F1H
					MOVX @DPTR,A	


RET



	
	
	
	
	
	MOV DPTR,#FRW
	CALL DEL_PG_CODE
	MOV DPTR,#02004H 	;PAGINA UND EESTE FIRMWAREUL 
	MOV R0,#0030H
	dumb_pgm_1_P1:
		MOV DPTR,#02004H
		MOVX A,@DPTR
		MOV DPTR,#06000H
				CLR IE_EA			
					ORL PSCTL,#001H		 
					ANL PSCTL,#0FDH		 	
					MOV FLKEY ,#0A5H
					MOV FLKEY,#0F1H
					MOVX @DPTR,A
		;----------------------------
		MOV DPTR,#02005H
		MOVX A,@DPTR
		MOV DPTR,#06001H
				CLR IE_EA			
					ORL PSCTL,#001H		 
					ANL PSCTL,#0FDH		 	
					MOV FLKEY ,#0A5H
					MOV FLKEY,#0F1H
					MOVX @DPTR,A
		;--------------------------------------------
		MOV DPTR,#02006H
		MOVX A,@DPTR
		MOV DPTR,#06002H
				CLR IE_EA			
					ORL PSCTL,#001H		 
					ANL PSCTL,#0FDH		 	
					MOV FLKEY ,#0A5H
					MOV FLKEY,#0F1H
					MOVX @DPTR,A	
RET
;______________________________________________________________________________________


ORG	03400H
CONFIG_FILE:
DB	012H	;SENSIBILITATE KEYBOARD

ORG	03800H
DB	001H	;CONFIG SOUND ON OFF









;*****************************************************************************************************************
;*****************************************************************************************************************
;*****************************************************************************************************************
;*****************************************************************************************************************
;*****************************************************************************************************************
;*****************************************************************************************************************
;*****************************************************************************************************************
;*****************************************************************************************************************
;*****************************************************************************************************************
;*****************************************************************************************************************
;*****************************************************************************************************************
;*****************************************************************************************************************
;*****************************************************************************************************************
;*****************************************************************************************************************
;*****************************************************************************************************************















ORG 0A000H	;BOOT LOADER SEGMENT

;______________________________________________________
;TUYA ONLY BOOT PREPARE

; Peripheral specific initialization functions,
; Called from the Init_Device label
PCA_Init_TY:
    mov  PCA0CN0,   #040h
    anl  PCA0MD,    #0BFh
    mov  PCA0MD,    #004h
    mov  PCA0CPM0,  #046h
    mov  PCA0CPH0,  #00Ah 	;2400
;	mov  PCA0CPH0,  #00Dh 	;2000
    ret

Timer_Init_TY:
    mov  TCON,      #050h
    mov  TMOD,      #022h
    mov  CKCON0,     #004h
    mov  TH0,       #002h
    mov  TH1,       #0CBh
    mov  TMR2RLL,   #093h
    mov  TMR2RLH,   #038h
    mov  TMR2L,     #09Eh
    mov  TMR2H,     #038h
    ret

UART_Init_TY:
    mov  SCON0,     #052h
MOV SFRPAGE,#020H
	mov  SCON1,     #012h
	MOV SBCON1,#043H	;ENABLE BAUD   PRESCALER 1
	MOV SBRLH1,#0FDH	;BPS SPEED
	MOV SBRLL1,#082H
MOV SFRPAGE,#000H
	ret

SMBus_Init_TY:
    mov  SMB0CF,    #080h
    ret

SPI_Init_TY:
    mov  SPI0CFG,   #070h
    mov  SPI0CN0,    #001h
    mov  SPI0CKR,   #008h
    ret

Port_IO_Init_TY:
 ; P0.0  -  SCK  (SPI0), Open-Drain, Digital
    ; P0.1  -  MISO (SPI0), Open-Drain, Digital
    ; P0.2  -  MOSI (SPI0), Open-Drain, Digital
    ; P0.3  -  Unassigned,  Open-Drain, Digital
    ; P0.4  -  TX0 (UART0), Open-Drain, Digital
    ; P0.5  -  RX0 (UART0), Open-Drain, Digital
    ; P0.6  -  Skipped,     Open-Drain, Digital
    ; P0.7  -  Skipped,     Open-Drain, Digital

    ; P1.0  -  Unassigned,  Open-Drain, Digital
    ; P1.1  -  Unassigned,  Open-Drain, Digital
    ; P1.2  -  Unassigned,  Push-Pull,  Digital
    ; P1.3  -  Unassigned,  Open-Drain, Digital
    ; P1.4  -  Unassigned,  Open-Drain, Digital
    ; P1.5  -  Unassigned,  Push-Pull,  Digital
    ; P1.6  -  Unassigned,  Open-Drain, Digital
    ; P1.7  -  Unassigned,  Open-Drain, Digital

    ; P2.0  -  Unassigned,  Open-Drain, Digital
    ; P2.1  -  Unassigned,  Push-Pull,  Digital
    ; P2.2  -  Unassigned,  Push-Pull,  Digital
    ; P2.3  -  Unassigned,  Push-Pull,  Digital
    ; P2.4  -  Unassigned,  Push-Pull,  Digital
    ; P2.5  -  Unassigned,  Push-Pull,  Digital
    ; P2.6  -  Unassigned,  Open-Drain, Digital
    ; P2.7  -  Skipped,     Open-Drain, Digital


MOV SFRPAGE,#020H
;mov p0mdin,#0ffh
;mov p1mdin,#0ffh
;mov p2mdin,#0ffh
;mov p3mdin,#0ffh

;original fara tuya
;mov  P1MDOUT,   #024h
;    mov  P2MDOUT,   #03Eh
;    mov  P0SKIP,    #0C8h
;	 mov  P1SKIP,    #003h
;    mov  XBR0,      #003h
;    mov  XBR2,      #040h

;cu tuya	
	mov  P1MDOUT,   #024h
    mov  P2MDOUT,   #03Eh
    mov  P0SKIP,    #0C8h
    mov  P1SKIP,    #007h
    mov  XBR0,      #003h
    mov  XBR2,      #041h	;activate second UART XBR2.0



	

MOV SFRPAGE,#000H
    ret

Oscillator_Init_TY:
;    mov  FLSCL,     #040h
    mov  CLKSEL,    #010h
    ret

Interrupts_Init_TY:
 	mov  EIE1,      #001h
	mov  IE,        #0A0h
    ret


; Initialization function for device,
; Call Init_Device from your main program
LOADER_START:
Init_Device_TY:
		;WATCHDOG DISABLE
	MOV WDTCN,#0DEh ; disable software watchdog timer
	MOV WDTCN,#0ADh
;sjmp $
;CLR P1.0
    lcall PCA_Init_TY
	lcall Timer_Init_TY
    lcall UART_Init_TY
    lcall SMBus_Init_TY
	lcall SPI_Init_TY	
	lcall Port_IO_Init_TY
	lcall Oscillator_Init_TY
	lcall Interrupts_Init_TY



	MOV SP,#058H
	 mov  PCA0CPM0,  #030H



	 ANL P3,#11100000B
;SETB LD_P	;LOCK
;SETB LD_MIN	;AUX1
;SETB LD_AX
;SETB LD_W	 
;SETB LD_V	;CLEAN
	 
	 CLR BUZZ



   	CLR TOT_T2
CLR PSW_CY	
	CLR ST_UPD	;NO NEW STATUS UPDATE
	
	
	
	MOV ERHRD,#000H	;STERG REGISTRUL DE ERORI
;JNB PSW_CY,$
	CLR AUX_0	;STERG FLAG DE IESIREA RELE AUXILIAR
	












	





;====================================

STV1	EQU	067H	;STOVE+KEYBOARD_VERSION
STV2	EQU	068H
STV3	EQU	069H
KYBV	EQU	06AH

D_P	DATA	040H	;ADRESA DATA POINT
FRW_H	DATA	041H
FRW_M	DATA	042H
FRW_L	DATA	043H

FRW_EXT	BIT	007H	;FLAG PT SELECTAT FIRMWARE EXTERN	
	
	

CLR LD_MIN			;SEMNALEZ STAR BOOTLOADER


;CALL TY_GET_WIFISTATUS




LOAD_DUMB_FRW_FOC1:
	MOV DPTR,#08000H
	CLR A
	MOVC A,@A+DPTR
		MOV DPTR,#0200H
		MOV B,A
		SWAP A
		ANL A,#00FH
		ORL A,#030H
		MOVX @DPTR,A
		INC DPTR
		MOV A,B
		ANL A,#00FH
		ORL A,#030H
		MOVX @DPTR,A
			INC DPTR
			MOV A,#'.'
			MOVX @DPTR,A
	   ;=========================
	MOV DPTR,#08001H
	CLR A
	MOVC A,@A+DPTR
		MOV DPTR,#0203H
		MOV B,A
		SWAP A
		ANL A,#00FH
		ORL A,#030H
		MOVX @DPTR,A
		INC DPTR
		MOV A,B
		ANL A,#00FH
		ORL A,#030H
		MOVX @DPTR,A
			INC DPTR
			MOV A,#'.'
			MOVX @DPTR,A
	   ;=========================
	MOV DPTR,#08002H
	CLR A
	MOVC A,@A+DPTR
		MOV DPTR,#0206H
		MOV B,A
		SWAP A
		ANL A,#00FH
		ORL A,#030H
		MOVX @DPTR,A
		INC DPTR
		MOV A,B
		ANL A,#00FH
		ORL A,#030H
		MOVX @DPTR,A
			
	
	
	
;SETB P1.0	 ;RESET END
	

;SAR INNAPOI LA PROGRAMUL PRINCIPAL
;CURU:
; MOV A,#055H
;CALL SENDCHAR1
;SJMP CURU


JMP	INIT_DEVICE






CLR IE_EA	;OPRESC TATE INTRERUPERILE
	MOV SFRPAGE,#020H


	;ASTEPT SA CEARA INITIALIZARE
WAIT_TUYA_MODULE:
	CALL WAIT_TUY_MSG
	MOV A,TY_CMD
	CJNE A,#000H,WAIT_TUYA_MODULE_1
		WAIT_TUYA_MODULE_DUMB_MSG:		;TRIMIT MESAJ HARDBEAT PT ORICE ALT ORDIN
		CALL TY_MCU_ANS_BEAT
SJMP WAIT_TUYA_MODULE	
	WAIT_TUYA_MODULE_1:	;TRIMIT INITIALIZAREA
	CJNE A,#001H,WAIT_TUYA_MODULE_DUMB_MSG
		 CLR LD_P	;SEMNALEZ CA AM TUYA OK
		 CALL TY_PROD_ID_ANS
	;ASTEPT STATUSUL WIFI SAU PAIRING MODE
	
	;WORCKING MODE

	MOV R0,#000H
	DJNZ R0,$

	CALL TY_RESET_WIFI
	CALL WAIT_TUY_MSG


	WAIT_TUYA_MODULE_PAIRING:			;ASTEPT SA VAD CE FEL DE PAIRING ARE 	
		CALL WAIT_TUY_MSG
		CALL TUYA_MSG_DECODE
		
		MOV A,TY_CMD
		CJNE A,#003H,WAIT_TUYA_MODULE_PAIRING
		;	TEST IF IS CONNECTED TO ROUTER
			MOV R0,#000H
			MOVX A,@R0
			CJNE A,#004H,WAIT_TUYA_MODULE_PAIRING
			CLR LD_W	;semnalez conectat la nube
		SJMP TUYA_INITILIZED

	
TUYA_INITILIZED:

clr PSW_CY
jnb PSW_CY,CURU_TEST

CALL TY_RESET_WIFI
CALL WAIT_TUY_MSG	;astept raspunsul de la modul

;CALL WAIT_400MS
;CALL WAIT_400MS




	CURU_TEST:
	CALL WAIT_TUY_MSG

	CALL TUYA_MSG_DECODE
SJMP CURU_TEST
;*********************************************************
;	DECODE/INTERPRET TUYA MSG OVER UART
;&********************************************************
TUYA_MSG_DECODE:


		MOV A,TY_CMD
		TST_TY_CMD_00:	;TET DACA ESTE COMMANDA DE HARTBEAT
		CJNE A,#000H,TST_TY_CMD_01
			CALL TY_MCU_ANS_BEAT
RET
		TST_TY_CMD_01:	;PRODUCT IDENTIFICATION
		CJNE A,#001H,TST_TY_CMD_02
			MOV R0,#000H
			DJNZ R0,$
			CALL TY_PROD_ID_ANS
RET
		TST_TY_CMD_02:	;QUERRY WORCK NMODULE
		CJNE A,#002H,TST_TY_CMD_03
			MOV R0,#000H
			DJNZ R0,$
			CALL TY_WORK_MODE_ANS
;			CALL TY_PROD_ID_ANS
RET
		TST_TY_CMD_03:	 	;WIFI STATUS
		CJNE A,#003H,TST_TY_CMD_06
			MOV R0,#000H
			DJNZ R0,$
			CALL TY_GET_WIFI_STAUS
RET
		TST_TY_CMD_06:	 	;WIFI STATUS
		CJNE A,#006H,TST_TY_CMD_08
			CALL TUYA_DATAPOINT_PROCESS
RET	
			
			
		;	
			
			
			
			TST_TY_CMD_08:	 	;WIFI STATUS
		CJNE A,#008H,TST_TY_CMD_0A
			MOV R0,#000H
			DJNZ R0,$
CALL TY_MCU_ANS_BEAT			
RET			
			MOV D_P,#STV1
				MOV FRW_H,#012H
				MOV FRW_M,#034H
				MOV FRW_L,#056H
			CALL TY_GET_DP_STATUS

			MOV R0,#000H
			DJNZ R0,$
			MOV D_P,#STV3
				MOV FRW_H,#078H
				MOV FRW_M,#090H
				MOV FRW_L,#009H
			CALL TY_GET_DP_STATUS

			MOV R0,#000H
			DJNZ R0,$
			MOV D_P,#KYBV
				MOV FRW_H,#087H
				MOV FRW_M,#065H
				MOV FRW_L,#065H
			CALL TY_GET_DP_STATUS
RET		

		TST_TY_CMD_0A:;55 AA 03 0A 00 01 00 0D RASPUNS LA UPDATE REQUEST?
			CJNE A,#00AH,TST_TY_CMD_0B
				MOV R0,#000H
				DJNZ R0,$
				;00,00,04,29,0b,00,00,00  crc---pt update canal 11
				;00,00,04,29  crc        pt update normal de MCU
				;daca lenght este 04-update MCU
				;daca este 08=extended firmware
				MOV A,TY_LN_L
				CJNE A,#004H,TST_TY_CMD_0A_1
					SJMP TST_TY_CMD_0A_2
			TST_TY_CMD_0A_1:
				;DE TESTAT DACA ESTE CANAL 10,11,12
				SETB FRW_EXT
				CALL ERASE_FIRMWARE_PWR1;STERG FIRM POWER 1
				CALL TY_UPD_STS_ANS
RET
			TST_TY_CMD_0A_2:
				CLR FRW_EXT
			CALL ERASE_FIRMWARE_MCU			;STERG MAI INTII FIRMWARELE
			CALL TY_UPD_STS_ANS
RET
		TST_TY_CMD_0B:;55 AA 03 0B 00 00 0D
		CJNE A,#00BH,TST_TY_CMD_0C
				MOV R0,#000H
				DJNZ R0,$
		;-----------------------	SELECT DEVICE TO PROGRAMM
			JNB FRW_EXT,TST_TY_CMD_0B_MCU
				NOP
				CALL POWER_1_PCB_PGM
CALL TY_UPD_PROCESS_ANS
RET
			TST_TY_CMD_0B_MCU:
call KEYBOARD_PGM
			CALL TY_UPD_PROCESS_ANS
RET


		TST_TY_CMD_0C:
		CALL TY_MCU_ANS_BEAT
;		CALL TY_MCU_ANS_BEAT

	CALL WAIT_400MS

;CALL TY_GET_WIFI_STAUS
RET

;*****************************************************************************
;	TUYA COMANDA 06--DATA POINT
;*****************************************************************************8
;55 AA 00 06 00 08 69 02 00 04 00 00 00 0A 86 	;TRIMIS PUTEREA 10
;55 AA 03 07 00 08 69 02 00 04 00 00 00 0A 8A	;RASPUNS PUTERA 10? ADICA A PRIMIT ORDINUL
TUYA_DATAPOINT_PROCESS:
	;TRIMIT RASPUNSUL LA ORDINUL PRIMIT
	MOV A,#055H
		CALL SENDCHAR1
	MOV A,#0AAH
		CALL SENDCHAR1
	MOV A,#003H
		CALL SENDCHAR1
	MOV A,#007H
		CALL SENDCHAR1
	;-------------------------
	   	MOV B,#009H
		MOV A,TY_LN_H
			CALL SENDCHAR1
			ADD A,B
			MOV B,A
		MOV A,TY_LN_L
			CALL SENDCHAR1
			ADD A,B
			MOV B,A
	MOV R0,#000H
	TY_DP_ANS1:
		MOVX A,@R0
			CALL SENDCHAR1
			ADD A,B
			MOV B,A
		INC R0
		MOV A,R0
		CJNE A,TY_LN_L,TY_DP_ANS1
			MOV A,B
			CALL SENDCHAR1
	
	
	TUYA_DATAPOINT_PROCESS_ANSWER:




RET
;_________________________________________________








;*************************************
;	ASTEPT MESAJ DE LA TUYA
;************************************
WAIT_TUY_MSG:
	MOV B,#000H
	;ATENTIE TRE S SAREZOLV SI CRC
	CALL GETCHAR1
   	;CJNE A,#055H,TUY_HARDBEAT_ANS
	CJNE A,#055H,WAIT_TUY_MSG
		ADD A,B
		MOV B,A
	CALL GETCHAR1
	;CJNE A,#0AAH,TUY_HARDBEAT_ANS
	CJNE A,#0AAH,WAIT_TUY_MSG
		ADD A,B
		MOV B,A
	CALL GETCHAR1
	;CJNE A,#000H,TUY_HARDBEAT_ANS
	CJNE A,#000H,WAIT_TUY_MSG
		ADD A,B
		MOV B,A
	;_____________________________________
		CALL GETCHAR1
		MOV TY_CMD,A	;GET COMMAND WORD
			ADD A,B
			MOV B,A
		CALL GETCHAR1
		MOV TY_LN_H,A
			ADD A,B
			MOV B,A
		CALL GETCHAR1
		MOV TY_LN_L,A
			ADD A,B
			MOV B,A
		;VERIFIC DACA ESTE HARDBEAT,ADIC ALUNGIME 00,00
	   	MOV A,TY_LN_L
		CJNE A,#000H,WAIT_TUY_MSG_BODY
		MOV A,TY_LN_H
		CJNE A,#000H,WAIT_TUY_MSG_BODY	
			SJMP WAIT_TUY_MSG_CRC

WAIT_TUY_MSG_BODY:	;RECIEVE DATA
	;MOV R0,#000H
	MOV DPTR,#000H
	WAIT_TUY_MSG_BODY_1:
		CALL GETCHAR1
		;MOVX @R0,A
		MOVX @DPTR,A
			ADD A,B
			MOV B,A
		;INC R0
		INC DPTR
		MOV A,DPL
		CJNE A,TY_LN_L,	WAIT_TUY_MSG_BODY_1
			MOV A,DPH
			CJNE A,TY_LN_H,	WAIT_TUY_MSG_BODY_1
;			SJMP WAIT_TUY_MSG_CRC
		NOP

WAIT_TUY_MSG_CRC:
		CALL GETCHAR1
		MOV TY_CRC,A	;GET COMMAND WORD
		;calculate crc if is ok
		WAIT_TUY_MSG_CRC_CHECK:
		cjne a,b,WAIT_TUY_MSG_CRC_CHECK_ERR

RET
		WAIT_TUY_MSG_CRC_CHECK_ERR:
		NOP
	SJMP $
;*************************************
;	reset wifi module  pairing mode
;	55 aa 03 04 00 00 06
;************************************
TY_RESET_WIFI:
	MOV A,#055H
		CALL SENDCHAR1
	MOV A,#0AAH
		CALL SENDCHAR1
	MOV A,#003H
		CALL SENDCHAR1
	MOV A,#004H
		CALL SENDCHAR1
	MOV A,#000H
		CALL SENDCHAR1
	MOV A,#000H
		CALL SENDCHAR1
	MOV A,#006H
		CALL SENDCHAR1
RET
;__________________________________________



;*************************************
;	RASPUND LA SEMNALUL HARDBEAT
;************************************
TY_HARDBEAT_ANS:
	MOV A,#055H
		CALL SENDCHAR1
	MOV A,#0AAH
		CALL SENDCHAR1
	MOV A,#003H
		CALL SENDCHAR1
	MOV A,#000H
		CALL SENDCHAR1
	MOV A,#000H
		CALL SENDCHAR1
	MOV A,#001H
		CALL SENDCHAR1
	MOV A,#001H
		CALL SENDCHAR1
	MOV A,#004H
		CALL SENDCHAR1
RET
;__________________________________________




;*************************************
;	RASPUND LA SEMNALUL HARDBEAT
;	55 AA 03 00 00 01 01 04
;************************************
TY_MCU_ANS_BEAT:
	MOV A,#055H
		CALL SENDCHAR1
	MOV A,#0AAH
		CALL SENDCHAR1
	MOV A,#003H
		CALL SENDCHAR1
	MOV A,#000H
		CALL SENDCHAR1
	MOV A,#000H
		CALL SENDCHAR1
	MOV A,#001H
		CALL SENDCHAR1
	MOV A,#001H
		CALL SENDCHAR1
	MOV A,#004H
		CALL SENDCHAR1
RET
;__________________________________________



;55 AA 00 06 00 05 01 01 00 01 00 0D	ON
;55 AA 00 06 00 05 01 01 00 01 01 0E 	OFF
WAIT_ON_ORDER:
   	CALL GETCHAR1
   	CJNE A,#055H,WAIT_ON_ORDER
   		CALL GETCHAR1
   		CJNE A,#0AAH,WAIT_ON_ORDER
		CALL GETCHAR1	;00	 VERSION
			ANL UART1FCN0,#11111011B	;FLUSH FIFORX
		CALL GETCHAR1   ;06	 FRAME TYPE
		CALL GETCHAR1	;00	 LENGHT MSB
		CALL GETCHAR1	;05	 LENGHT LSB
		MOV R0,A
		WAIT_ON_ORDER_1:
			CALL GETCHAR1
			MOVX @R0,A
			DJNZ R0,WAIT_ON_ORDER_1

   		CJNE A,#001H,WAIT_ON_ORDER
;JMP ON_TUYA

;*******************************************************************************8
;DIFERENT HARDCODED ORDERS FOR TUYA

;*************************************
;	RASPUND LA SEMNALUL WIFISTATUS
;	55 AA 03 03 00 00 05
;************************************
TY_GET_WIFI_STAUS:
	MOV A,#055H
		CALL SENDCHAR1
	MOV A,#0AAH
		CALL SENDCHAR1
	MOV A,#003H
		CALL SENDCHAR1
	MOV A,#003H
		CALL SENDCHAR1
	MOV A,#000H
		CALL SENDCHAR1
	MOV A,#000H
		CALL SENDCHAR1
	MOV A,#005H
		CALL SENDCHAR1
RET
;_____________________________________




;*************************************
;	RASPUND LA STATUS DATA POINT
;55 AA 03 07 00 0C 68 03 00 08 38 33 2E 39 30 2E 30 31 19

;*************************************
TY_GET_DP_STATUS:
	MOV DPTR,#DP_PLM
	MOV R0,#013H
;	MOV R0,#012H
	MOV R1,#0A0H		;IRAM POINTER
	TY_GET_DP_STATUS_1:			;PUN VALORILE DE SCHELET IN IRAM 0XE0-0XFF
	CLR A
	MOVC A,@A+DPTR
		;CALL SENDCHAR1
		MOV @R1,A
		;CRC
;			ADD A,B
;			MOV B,A
		INC R1
		INC DPTR
		DJNZ R0,TY_GET_DP_STATUS_1
    ;________________________________
		MOV R0,#0A6H	;POINTER UNDE ESTE DATAPOINT 
		MOV A,D_P
		MOV @R0,A
		;_______________POINTER PENTRU FIRMWARE
		MOV A,FRW_H
		MOV B,A
		SWAP A
			ANL A,#0FH
			ORL A,#030H	;ASCII
			MOV R0,#0AAH
			MOV @R0,A
		MOV A,B
		   	ANL A,#0FH
			ORL A,#030H	;ASCII
			MOV R0,#0ABH
			MOV @R0,A

		MOV A,FRW_M
		MOV B,A
		SWAP A
			ANL A,#0FH
			ORL A,#030H	;ASCII
			MOV R0,#0ADH
			MOV @R0,A
		MOV A,B
		   	ANL A,#0FH
			ORL A,#030H	;ASCII
			MOV R0,#0AEH
			MOV @R0,A

		MOV A,FRW_L
		MOV B,A
		SWAP A
			ANL A,#0FH
			ORL A,#030H	;ASCII
			MOV R0,#0B0H
			MOV @R0,A
		MOV A,B
		   	ANL A,#0FH
			ORL A,#030H	;ASCII
			MOV R0,#0B1H
			MOV @R0,A

	
	MOV R0,#0A0H
	MOV B,#000H
	TY_GET_DP_STATUS_2:
		MOV A,@R0
		CALL SENDCHAR1
			ADD A,B
			MOV B,A
		INC R0
		CJNE R0,#0B2H,TY_GET_DP_STATUS_2
		;--------------	CRC
		MOV A,B
		CALL SENDCHAR1

RET

;****************************************
;	ASK FOR TUYA WIFI_STATUS
;****************************************
TY_GET_WIFISTATUS:


RET




DP_PLM:	;TEST DE STATUS
DB	055H,0AAH,003H,007H,000H,00CH,067H,003H,000H,008H,038H,033H,02EH,036H,030H,02EH,030H,031H,019H

frw_plm:  ;TRIMIT FIRMWARE,ETC	
DB  055H,0AAH,003H,007H,000H,00CH,067H,003H,000H,008H,032H,030H,02EH,030H,039H,02EH,038H,039H,0Fh

;*******************************************
;	STERG FIRMWARE 16 KB INCEPIND DE LA 6000
;******************************************
ERASE_FIRMWARE_MCU:
PUSH SFRPAGE
MOV SFRPAGE,#000H
;	MOV DPTR,#06000H
;CLR IE_EA
MOV DPTR,#00000H
	;MOV R0,#004H
	MOV R0,#010H
	ERASE_FIRMEWARE_1:
	CALL DEL_PG_CODE
		INC DPH
		INC DPH
		INC DPH
		INC DPH
		DJNZ R0,ERASE_FIRMEWARE_1
;SETB IE_EA
POP SFRPAGE
RET
;_________________________-


;*******************************************
;	STERG FIRMWARE 16 KB INCEPIND DE LA 6000
;******************************************
ERASE_FIRMWARE_PWR1:
	MOV DPTR,#08000H
	MOV R0,#004H
	ERASE_FIRMWARE_PWR_1:
	CALL DEL_PG_CODE
		INC DPH
		INC DPH
		INC DPH
		INC DPH
		DJNZ R0,ERASE_FIRMWARE_PWR_1


RET
;_________________________-


;*************************************
;	RASPUND LA SEMNALUL HARDBEAT
;55 AA 03 0A 00 01 00 0D
;*************************************
TY_UPD_STS_ANS:
	MOV A,#055H
		CALL SENDCHAR1
	MOV A,#0AAH
		CALL SENDCHAR1
	MOV A,#003H
		CALL SENDCHAR1
	MOV A,#00AH
		CALL SENDCHAR1
	MOV A,#000H
		CALL SENDCHAR1
	MOV A,#0001H
		CALL SENDCHAR1
	MOV A,#000H
		CALL SENDCHAR1
	MOV A,#00DH
		CALL SENDCHAR1
RET
;_____________________________________


;*************************************
;	RASPUND LA SEMNALUL HARDBEAT
;55 AA 03 0B 00 00 0D
;*************************************
TY_UPD_PROCESS_ANS:
	MOV A,#055H
		CALL SENDCHAR1
	MOV A,#0AAH
		CALL SENDCHAR1
	MOV A,#003H
		CALL SENDCHAR1
	MOV A,#00BH
		CALL SENDCHAR1
	MOV A,#000H
		CALL SENDCHAR1
	MOV A,#0000H
		CALL SENDCHAR1
	MOV A,#00DH
		CALL SENDCHAR1
RET
;_____________________________________

;*************************************
;	RASPUND LA SEMNALUL HARDBEAT
;55 AA 03 02 00 00 04
;*************************************
TY_work_mode_ANS:
	MOV A,#055H
		CALL SENDCHAR1
	MOV A,#0AAH
		CALL SENDCHAR1
	MOV A,#003H
		CALL SENDCHAR1
	MOV A,#002H
		CALL SENDCHAR1
	MOV A,#000H
		CALL SENDCHAR1
	MOV A,#0000H
		CALL SENDCHAR1
	MOV A,#004H
		CALL SENDCHAR1
RET
;_____________________________________

;*************************************
;	RASPUND LA PRODUCT ID
;55 AA 03 0B 00 00 0D
;*************************************
TY_PROD_ID_ANS:
   mov r0,#031h
   mov dptr,#prod_info_short
   TY_PROD_ID_ANS_aa:
   		clr a
		movc a,@a+dptr
		call SENDCHAR1
		inc dptr
		djnz r0,TY_PROD_ID_ANS_aa
ret

	MOV B,#000H
		MOV DPTR,#PRODUCT_INFORMATION
;		MOV R0,#052H
		MOV R0,#012D
	TY_PROD_ID_ANS_A:
		CLR A
		MOVC A,@A+DPTR
		CALL SENDCHAR1
			ADD A,B
			MOV B,A
		INC DPTR
		DJNZ R0,TY_PROD_ID_ANS_A	
;JMP CRCUL
;=======================================	
		MOV DPTR,#TY_PID	 ;PID
		;MOV R0,#052H
		MOV R0,#016D
	TY_PROD_ID_ANS_B:
		CLR A
		MOVC A,@A+DPTR
		CALL SENDCHAR1
			ADD A,B
			MOV B,A
		INC DPTR
		DJNZ R0,TY_PROD_ID_ANS_B	
;=======================================	
		MOV DPTR,#PR_INF_3	 ;VARIOS
		;MOV R0,#052H
		MOV R0,#07D
	TY_PROD_ID_ANS_C:
		CLR A
		MOVC A,@A+DPTR
		CALL SENDCHAR1
			ADD A,B
			MOV B,A
		INC DPTR
		DJNZ R0,TY_PROD_ID_ANS_C		
;=======================================	
		MOV DPTR,#FRW	 ;FIRMWARE MCU
		;MOV R0,#052H
		MOV R0,#08D
	TY_PROD_ID_ANS_D:
		;====================
		CLR A
		MOVC A,@A+DPTR
			SWAP A
			ANL A,#00FH
			ORL A,#030H
			CALL SENDCHAR1
			ADD A,B
			MOV B,A
		CLR A
		MOVC A,@A+DPTR
			ANL A,#00FH
			ORL A,#030H
			CALL SENDCHAR1
			ADD A,B
			MOV B,A
	   MOV A,#'.'
	   CALL	SENDCHAR1
	   		ADD A,B
			MOV B,A
	   ;==========================
		INC DPTR
		CLR A
		MOVC A,@A+DPTR
			SWAP A
			ANL A,#00FH
			ORL A,#030H
			CALL SENDCHAR1
			ADD A,B
			MOV B,A
		CLR A
		MOVC A,@A+DPTR
			ANL A,#00FH
			ORL A,#030H
			CALL SENDCHAR1
			ADD A,B
			MOV B,A
	   MOV A,#'.'
	   CALL	SENDCHAR1
	   		ADD A,B
			MOV B,A
		;==========================	
		INC DPTR
		CLR A
		MOVC A,@A+DPTR
			SWAP A
			ANL A,#00FH
			ORL A,#030H
			CALL SENDCHAR1
			ADD A,B
			MOV B,A
		CLR A
		MOVC A,@A+DPTR
			ANL A,#00FH
			ORL A,#030H
			CALL SENDCHAR1
			ADD A,B
			MOV B,A
;=======================================	
		MOV DPTR,#PR_INF_5	 ;VARIOS
		;MOV R0,#052H
		MOV R0,#027D
	TY_PROD_ID_ANS_E:
		CLR A
		MOVC A,@A+DPTR
		CALL SENDCHAR1
			ADD A,B
			MOV B,A
		INC DPTR
		DJNZ R0,TY_PROD_ID_ANS_E			
;=======================================	
		MOV DPTR,#0200H	 ;FIRMWARE CH11	  ;DATELE SINT IN XRAM IN FORMAT ASCII
		;MOV R0,#052H
		MOV R0,#08D
	TY_PROD_ID_ANS_F:
		CLR A
		MOVX A,@DPTR
		CALL SENDCHAR1
			ADD A,B
			MOV B,A
		INC DPTR
		DJNZ R0,TY_PROD_ID_ANS_F		





;=======================================	
		MOV DPTR,#PR_INF_7	 ;VARIOS
		;MOV R0,#052H
		MOV R0,#04D
	TY_PROD_ID_ANS_G:
		CLR A
		MOVC A,@A+DPTR
		CALL SENDCHAR1
			ADD A,B
			MOV B,A
		INC DPTR
		DJNZ R0,TY_PROD_ID_ANS_G	
			
	CRCUL:	
		NOP
		MOV A,B
	   	CALL SENDCHAR1



	 


RET



;******************************************************************
;	tuya uart comunication
;******************************************************************

GETCHAR1:        ; waits for a single ASCII character to be received
                ; by the UART.  places this character into A.
        JNB     SCON1_RI,$
        MOV     A,SBUF1
        CLR     SCON1_RI
        RET
;____________________________________________________________________

SENDCHAR1:       ; sends ASCII value contained in A to UART
MOV SFRPAGE,#020H
        JNB     SCON1_TI,$            ; wait TI0l present char gone
        CLR     SCON1_TI             ; must clear TI0
        MOV     SBUF1,A
		JNB     SCON1_TI,$            ; wait TI0l present char gone
MOV SFRPAGE,#000H
        RET
;____________________________________________________________________

;********************************************************************
;	getchar 1 cu timeout
;********************************************************************
GETCHAR1_TOT:
	NOP
RET
;____________________________________________________________________







;**********************************************************************
;	KEYBPOARD CODE PROGRAMMING
;**********************************************************************
KEYBOARD_PGM:
	;SHIFT_DATA 	;DEPLASEZ DATELELSA FIE PE 256 BITI
PUSH SFRPAGE
MOV SFRPAGE,#000H
	SHIFT_TY_2_256:
		MOV R0,#002H
		MOVX A,@R0
		MOV R6,A		;SAVE ADDRES OFFSET
			MOV R0,#003H
			MOVX A,@R0
			MOV R7,A		;SAVE ADDRES OFFSET


		MOV DPTR,#0004H
		MOV R0,#000H
		SHIFT_TY_2_256_1:
			MOVX A,@DPTR
			MOVX @R0,A
			INC DPTR
			INC R0
			CJNE R0,#000H,SHIFT_TY_2_256_1	

	;PORNESC D ELA PREMISA CA ESTE STERS DE DINNAINTE TAT SECTORUL
	MOV DPTR,#00000H	;POINTER DE UND EINCEPE
	MOV DPTR,#0E000H	;POINTER DE UND EINCEPE
	MOV A,DPH
	ADD A,R6
	MOV DPH,A		;ADUN OFSETUL
	MOV R0,#000H
;POP SFRPAGE
;RET

	WRITE_256_BYT_CODE:	
		MOVX A,@R0
		;CEVA PT PROGRAMARE
			ORL PSCTL,#001H		 
			ANL PSCTL,#0FDH		 	
			MOV FLKEY ,#0A5H
			MOV FLKEY,#0F1H
		MOVX @DPTR,A
		INC DPTR
		INC R0
		CJNE R0,#000H,WRITE_256_BYT_CODE

		ANL PSCTL,#0FEH		 ;CLR  PSWE
		ANL PSCTL,#0FDH		 ;CLR  PSEE
POP SFRPAGE
CPL LD_W		;SEMNALIZEZ UPDATE
RET		
;----------------------------------------------------------------------------------	



;****************************************************************************************
;	PROGRAMEZ PLACA PWR1
;****************************************************************************************
POWER_1_PCB_PGM:
	;SHIFT_DATA 	;DEPLASEZ DATELELSA FIE PE 256 BITI

	SHIFT_TY_2_256_P1:
		MOV R0,#002H
		MOVX A,@R0
		MOV R6,A		;SAVE ADDRES OFFSET
			MOV R0,#003H
			MOVX A,@R0
			MOV R7,A		;SAVE ADDRES OFFSET
		MOV DPTR,#0004H
		MOV R0,#000H
		SHIFT_TY_2_256_1_P1:
			MOVX A,@DPTR
			MOVX @R0,A
			INC DPTR
			INC R0
			CJNE R0,#000H,SHIFT_TY_2_256_1_P1	
;RET
	;PORNESC D ELA PREMISA CA ESTE STERS DE DINNAINTE TAT SECTORUL
	MOV DPTR,#08000H	;POINTER DE UND EINCEPE
	MOV A,DPH
	ADD A,R6
	MOV DPH,A		;ADUN OFSETUL
	MOV R0,#000H
	WRITE_256_BYT_CODE_P1:	
		MOVX A,@R0
		;CEVA PT PROGRAMARE
			ORL PSCTL,#001H		 
			ANL PSCTL,#0FDH		 	
			MOV FLKEY ,#0A5H
			MOV FLKEY,#0F1H
		MOVX @DPTR,A
		INC DPTR
		INC R0
		CJNE R0,#000H,WRITE_256_BYT_CODE_P1
RET


;*******************************************************************************
;	SALVEZ MODIFIC SI RESCRIU 16 BITI DE CONFIG	 foloses 0x200h
;*******************************************************************************
UPD_CONFIG_PAGE:
	mov r0,#000h
	cfg_t_xram:
	;mov dptr,



RET
;_______________________________________________________________________________





;********************************************************************************
;		STERG PAGINA DE 1024 BYT DATA DE DE ADRESA DPTR DIN MEM INTERNA MCU
;********************************************************************************
DEL_PG_CODE:
	PUSH IE						;
		CLR IE_EA		
		MOV FLKEY ,#0A5H
		MOV FLKEY,#0F1H
		ORL PSCTL,#002H	
		ORL PSCTL,#001H		 
		MOVX @DPTR,A
		ANL PSCTL,#0FEH		 
		ANL PSCTL,#0FDH		 
	POP IE						
	RET
;_________________________________________________________________________________







;*************************************************
;	WAIT 100MS 250 x 4MS
;*************************************************
WAIT_100MS:
PUSH 000H
PUSH 001H
push ie
clr IE_EA
	MOV R1,#0250D
;	MOV R1,#0050D
;	MOV R1,#0035D
	WAIT_100MS_1:
	CALL WAIT_4MS
	DJNZ R1,WAIT_100MS_1
pop ie
POP 000H
POP 001H
;setb IE_EA
RET

;-------------------------------------------------







WAIT_400MS:

PUSH 000H
PUSH 001H
push ie
clr IE_EA
	MOV R1,#0100D
;	MOV R1,#0050D
;	MOV R1,#0035D
	WAIT_400MS_1:
	CALL WAIT_4MS
	DJNZ R1,WAIT_400MS_1
pop ie
POP 000H
POP 001H
;setb IE_EA

RET
;__________________________________________


;***********************************************
WAIT_5MS:
;/MUT CLOCKUL LA TIMER 0 IN SYSTEM /48
PUSH CKCON0
	MOV R0,#0C8H
	setb tcon_tr0
	WAIT_5MS_1:
		CLR TCON_TF0
		jNb TCON_TF0,$	;ASTEPT TIMER0,ADICA 500US
		DJNZ R0,WAIT_5MS_1
POP CKCON0
RET
;________________________________________________





;***********************************************
WAIT_4MS:
push 000H
	MOV R0,#0C8H
	setb tcon_tr0
	WAIT_4MS_1:
		CLR TCON_TF0
		jNb TCON_TF0,$	;ASTEPT TIMER0,ADICA 500US
		DJNZ R0,WAIT_4MS_1
POP 000H
RET
;________________________________________________









TY_VAR_ANSWER:	;RASPUNS VARIABIL CU CRC PT TUYA





;CONFIG DE PRODUCTO GENERATE FROM JSON FILE
;PRODUCT_INFORMATION:
DB	055H,0AAH,003H,001H,000H,02AH,07BH,022H,070H,022H,03AH,022H
;-PID
DB  065H,062H,032H,06CH
DB  06FH,073H,075H,030H,031H,076H,063H,062H,074H,065H,06FH,074H
;-------------------
DB  022H,02CH,022H,076H

DB  022H,03AH,022H
;----MCU FIRMWARE
DB  032H,02EH,030H,02EH,030H   ;X,Y,Z   2.0.0
;--------------------------

DB	022H,02CH,022H,06DH,022H,03AH,030H,07DH
DB	004H


;PRODUCT_INFORMATION:
DB	055H,0AAH,003H,001H,000H,02DH,07BH,022H,070H,022H,03AH,022H 
;--PID
;DB	'rdm2oyjaflhh0ilv'
DB	't4ylabuzf7kquxvp'
;72 64 6D 32 6F 79 6A 61 66 6C 
;    68 68 30 69 6C 76 
;------------------------
DB	022H,02CH,022H,076H,022H,03AH,022H 

;--MCU-FIRMWARE
;34 32 2E 30 32 2E 30 31 
DB	'42.02.01'
;-----------------------------

DB	022H,02CH,022H,06DH,022H,03AH,030H,07DH
DB	0CFH   ;CRC SUM D E8BIT IN TOT DE LA 55 INCEPIND


;stop hardbeat
;? MCU sends data             [2024/08/06 11:32:53.65]

;    55 AA 03 25 00 00 27

;? Close heartbeat reply sent by the 
;   receiving module             [2024/08/06 11:32:53.72]

;    55 AA 00 25 00 00 24

;-------------	reset?
;MCU sends data           [2024/08/06 11:38:13.48]
;55 AA 03 04 00 00 06

;Reset reply sent by receiving module           [2024/08/06 11:38:13.55]
;55 AA 00 04 00 00 03








;fire_1_ver:
;55 AA 03 34 00 15 0B 01 00 18 08 05 0C 32 39 67 03 00 08 38 32 2E 30 
;31 2E 30 31 ED

;fire_2_ver:
;55 AA 03 34 00 15 0B 01 00 18 08 05 0C 32 39 68 03 00 08 38 32 2E 30 
;32 2E 30 31 EF

;fire_3_ver:
;55 AA 03 34 00 15 0B 01 00 18 08 05 0C 32 39 69 03 00 08 38 32 2E 30 
;34 2E 30 31 F2

;kyb_ver:
;55 AA 03 34 00 15 0B 01 00 18 08 05 0C 32 39 6A 03 00 08 34 32 2E 30 
;32 2E 30 31 ED


PRODUCT_INFORMATION:
PR_INF_1:
DB	055H,0AAH,003H,001H,000H,04CH,07BH,022H,070H,022H,03AH,022H

PR_INF_2:
;6j3koqzsnx0bpvaq	PID
DB	036H,06AH,033H,06BH,06FH,071H,07AH,073H,06EH,078H,030H,062H,070H,076H,061H,071H
PR_INF_3:
DB	022H,02CH,022H,076H,022H,03AH,022H 

PR_INF_4:
;	42.02.01   -FRW
DB	034H,032H,02EH,030H,032H,02EH,030H,031H

PR_INF_5:
DB	022H,02CH,022H,06DH,022H,03AH,030H,02CH,022H,06DH,061H,022H,03AH,05BH,07BH,022H
					;CANAL 10
DB	074H,022H,03AH,031H,030H,02CH,022H,076H,022H,03AH,022H 	 ;canal 10

PR_INF_6:
;FRW   80.43.21
DB	038H,030H,02EH,034H,033H,02EH,032H,031H	  ;firmware extended

PR_INF_7:	;	"}]} CRC
DB	022H,07DH,05DH,07DH,056H


;	pt probat
;**************************************8
prod_info_short:
db	55H,0AAH,003H,001H,000H,02AH,07BH,022H,070H,022H,03AH,022H,036H,06AH,033H,06BH,06FH,071H,07AH,073H,06EH,078H,030h 
db  62H,070H,076H,061H,071H,022H,02CH,022H,076H,022H,03AH,022H,031H,02EH,030H,02EH,030H,022H,02CH,022H,06DH,022H,03Ah 
db  30H,07DH,02Ah





;ascii:
;{"p":"6j3koqzsnx0bpvaq","v":"40.12.34","m":0,"ma":[{"t":10,"v":"80.43.21"}]}






;DB	044H 	;CRC CU EROARE



;reserv spatiul 0x00-0x200 pt buferul de 256 maxim pentru update este 0x0104

TY_PID:
DB	'6j3koqzsnx0bpvaq';KAZANV 43

;DB	'63fnd0kzlkvzjws5';VERSIUNAEA DE CLOEN



#include <tuya_control.asm>





;**************************************************************************************
;		LIBRARIE D ECOMUNICARE
;**************************************************************************************
COMUNICATION_UART:

;************************************************************8888
;	'READ STATUS  FORMAT: < ? FOC_NR 00 CRC
;response format	 > ? FOC_NR 00 STAD_1 STAT_2 STAT_3 CRC
;****************************************************************
READ_STATUS:
;	MOV TIKT5,#030H			  ;MULTIPLE OF TIMER5 TOT
	CALL LOAD_GET_STAT_VAL		;LOAD DEFAULT VALUE FOR STATUS
	MOV A,FOC_A					;ADD FIRE NUMBER
	ANL A,#00000111B
	MOV B,A
	MOV A,INST
	ADD A,B
	MOV INST,A					;PUT FIRE NUMBER VALUE
SEND_COMMAND:
	MOV A,SBUF0			;READ BUFFER,AND CLEAR FLAG
	CLR SCON0_RI
;	MOV SFRPAGE,#010H
;		MOV TMR5H ,#TIME5H
;		MOV TMR5L ,#TIME5L
;	MOV SFRPAGE,#000H
;	MOV TIKT5,#004H
		MOV TMR2H ,#TIME2H
		MOV TMR2L ,#TIME2L
	MOV TIKT2,#004H	
	
	CLR TOT
	CLR ERR
	;_____________________
	MOV R0,#030H	;PAKET_STAT RAM START ADDRES
	MOV B,#0A5H		;START CRC VALUE
	MOV CLST,#'>'	;>
	READ_STATUS_1:
		MOV A,@R0
		CALL SENDCHAR
		ADD A,B
		MOV B,A
		INC R0
		CJNE R0,#035H,READ_STATUS_1	; PAKET_END_ADDRESS_RAM
		MOV A,B
		CALL SENDCHAR
	;__________________________	
	;__________________________
;			MOV SFRPAGE,#010H
;				SETB TMR5CN0_TR5	;START TIMER 5
;			MOV SFRPAGE,#000H	
	;__________________________
	SETB TMR2CN0_TR2	;START TIMER 2
	 
 
 
 		JNB     SCON0_TI,$            ; wait TI0l present char gone
	READ_STATUS_2:
		CALL GETCHAR_TOT 		;CHECK HEADER >
			JB TOT,READ_STATUS_4
		MOV R0,#038H		;START RECIVED_DATA_ADRESS_RAM
		mov b,#0e3H 			;a5	+3e start
		READ_STATUS_3:	
			CALL GETCHAR_TOT
			JB TOT,READ_STATUS_4
			MOV @R0,A
		ADD A,B
		MOV B,A
			INC R0
			CJNE R0,#03CH,READ_STATUS_3
				CALL GETCHAR_TOT   			;crc
				JB TOT,READ_STATUS_4
				CJNE A,B,READ_STATUS_4	;CHEK CRC
				NOP
				CLR ERR
				CLR TOT
;					MOV SFRPAGE,#010H
;				CLR TMR5CN0_TR5	;STOP TIMER 5
;					MOV SFRPAGE,#000H
			CLR TMR2CN0_TR2	;STOP TIMER 5
		
RET
		READ_STATUS_4:	;TIMOUT OCCURED NO ANSWER
			SETB ERR	;SEMNALEZ EROARE
			CLR TOT
;				MOV SFRPAGE,#010H
;			CLR TMR5CN0_TR5	;STOP TIMER 5
;				MOV SFRPAGE,#000H
		CLR TMR2CN0_TR2	;STOP TIMER 2
			;SET ERROR VALUES
			MOV A,INST
			ANL A,#00000111B	;USE FOC NUMBER
			MOV B,#0E0H			;TIMOUT ERROR
			ADD A,B
			MOV INSR,A
			MOV P1R,#000H		;TIMEOUT ERROR EROR
RET
;________________________________________________________


;*************************************************************
;		PREPARE GET STATUS VALUES FOR SENDING
;*************************************************************
LOAD_GET_STAT_VAL:
	MOV CLST,#'>'
	MOV	INST,#0D0H	;	DX INSTR=GET STAT
	MOV P1T,#000H 
	MOV P0T,#000H
	MOV BD0T,#000H
RET
;_____________________________________________________________

;*************************************************************
;	GETCHAR CU TIMEOUT DAT DE TIMER5
;*************************************************************
GETCHAR_TOT:
		JB     SCON0_RI,GETCHAR_TOT_1
    	JNB TOT,GETCHAR_TOT
		MOV A,#055H
;		SETB ERR		;SEMNALEZ EROARE DE TIMEOUT
		CLR     SCON0_RI 	;STERG FLAG IN CAZ C AAM PRINS COADA DE LA UN BYTE
RET
	GETCHAR_TOT_1:	
		MOV     A,SBUF0
        CLR     SCON0_RI
RET
;___________________________________________________________





;**************************************************************
;	rutina de la display si driver
;	CONTENT
;	---SPIRIT RUTINES =4 DIGIT DISPLAY
;		--FLEX_PWR_2_SPIRIT		SHOW POWER AND TOT OF FLEX MODE FIRE1+FIRE2
;		--ERROR_2_SPIRIT_SPACE	SHOW ERROR ON DISPLAY WITH ERROR NUMBER
;		--WIFI_DATA_2_SPIRITS   SHOW WIFI SYMBOLS ON BIG 4 DIGIT DISPLAY

;**************************************************************
DISPLAY_LIBARY:


;**************************************************************
;	FLEX ON 4DIG,IN CASE OF TIMER HAVE INTERCALATED TIMER VALUE
;*************************************************************
FLEX_PWR_2_SPIRIT:
PUSH ACC
	MOV A,FOC_A
	ANL A,#0F0H
	CJNE A,#010H,FLEX_WITH_TIMER
;________________
			MOV R0,#0C3H	; 	;PUT IN SPIRIT SAPCE
			MOV A,#01110001B	;1
			MOVX @R0,A
				MOV R0,#0CBH	;
				MOV A,#01110001B	;1
				MOVX @R0,A
;			MOV R0,#0D3H	;
;			MOV A,#01110001B	;1
;			MOVX @R0,A
				MOV R0,#0DBH	;
				MOV A,#01110001B	;1
				MOVX @R0,A				
;================================================			
					;MOV SG3,#04FH	;1
					MOV R0,#0C4H	;
					MOV A,#038H
					MOVX @R0,A
						MOV R0,#0CCH	;
						MOV A,#038H
						MOVX @R0,A
;				    MOV R0,#0D4H	;			
;					MOV A,#038H	;1
;					MOVX @R0,A
						MOV R0,#0DCH	;
						MOV A,#038H
						MOVX @R0,A
;================================================
			MOV R0,#0C5H	; 	;PUT IN SPIRIT SAPCE
			MOV A,#000H	;1
			MOVX @R0,A
				MOV R0,#0CDH	;
				MOV A,#000H	;1
				MOVX @R0,A
;			MOV R0,#0D5H	;
;			MOV A,#000H	;1
;			MOVX @R0,A
				MOV R0,#0DDH	;
				MOV A,#000H	;1
				MOVX @R0,A	
;================================================

			;==========================		POWER LEVEL
				MOV A,FOC_B
				ANL A,#00001111B	;GET POWER LEVEL
				cjne a,#00ah,FLEX_PWR_2_SPIRIT_NO_P
					MOV R7,#073H	;SYMBOL P
					SJMP FLEX_PWR_2_SPIRIT_A
				
				FLEX_PWR_2_SPIRIT_NO_P:
				MOV DPTR,#SHW_DIG
;				CLR A
				MOVC A,@A+DPTR
				;-------------	ADD DECIMAL PINT SEG4 IF SOUND OFF
					MOV C,SOUND
					CPL C
					MOV ACC.7,C
				;-------------
				MOV R7,A
				FLEX_PWR_2_SPIRIT_A:
				;________________
				MOV R0,#0C6H	; 	;PUT IN SPIRIT SAPCE LSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CEH	;
						MOV A,R7	;1
						MOVX @R0,A
;				    MOV R0,#0D6H	;
;					MOV A,R7	;1
;					MOVX @R0,A
						MOV R0,#0DEH	;
						MOV A,R7	;1
						MOVX @R0,A
;	DACA NU E TIMER ACTIV,ADAUG SI SPATIILE LASATE POT TIMER
	MOV A,FOC_D
	JB ACC.7 ,FLEX_WITH_TIMER
	FLEX_NO_TIMER:
			MOV R0,#0D3H	;
			MOV A,#01110001B	;1
			MOVX @R0,A
			;--------------------------	
				    MOV R0,#0D4H	;			
					MOV A,#038H	;1
					MOVX @R0,A
			;--------------------------
			MOV R0,#0D5H	;
			MOV A,#000H	;1
			MOVX @R0,A
			;--------------------------
				    MOV R0,#0D6H	;
					MOV A,R7	;1
					MOVX @R0,A
	FLEX_WITH_TIMER:
POP ACC	
RET
;==============================================================

;******************************************************************
;	PUT ERRON NUMBER IN DISPLAY BIG,IN SPIRIT SAPCE
;****************************************************************88
ERROR_2_SPIRIT_SPACE:
PUSH ACC
					;MOV SG3,#04FH	;1
					MOV R0,#0C4H	;
					MOV A,#079H	;1
					MOVX @R0,A
						MOV R0,#0CCH	;
						MOV A,#079H	;1
						MOVX @R0,A
				    MOV R0,#0D4H	;			
					MOV A,#079H	;1
					MOVX @R0,A
						MOV R0,#0DCH	;
						MOV A,#079H	;1
						MOVX @R0,A
				
				;MOV SG4,#079H	;E			
				MOV A,FOC_A
				ANL A,#00000111B	;GET FIRE NUMBER
				MOV DPTR,#SHW_DIG
;				CLR A
				MOVC A,@A+DPTR
				MOV R7,A
				;________________
					MOV R0,#0C3H	; 	;PUT IN SPIRIT SAPCE
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CBH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D3H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DBH	;
						MOV A,R7	;1
						MOVX @R0,A	
				;_______________________	PUT ERRO NR IN SPIRIT SPACE
				MOV A,FOC_B
				SWAP A
					ANL A,#00001111B
					MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				MOV R7,A
				;________________
					MOV R0,#0C5H	; 	;PUT IN SPIRIT SAPCE MSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CDH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D5H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DDH	;
						MOV A,R7	;1
						MOVX @R0,A	
				;______________________
				MOV A,FOC_B
					ANL A,#00001111B
					MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
						;-------------	ADD DECIMAL PINT SEG4 IF SOUND OFF
						MOV C,SOUND
						CPL C
						MOV ACC.7,C
						;-------------
				MOV R7,A
				;________________
					MOV R0,#0C6H	; 	;PUT IN SPIRIT SAPCE LSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CEH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D6H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DEH	;
						MOV A,R7	;1
						MOVX @R0,A
				;STOP ALL NON FIRE LEDS
				MOV R0,#0C7H
					MOVX A,@R0
					ORL A,#00001110B
					MOVX @R0,A
				MOV R0,#0CFH
					MOVX A,@R0
					ORL A,#00001110B
					MOVX @R0,A
				MOV R0,#0D7H
					MOVX A,@R0
					ORL A,#00001110B
					MOVX @R0,A
				MOV R0,#0DFH
					MOVX A,@R0
					ORL A,#00001110B
					MOVX @R0,A
;				SETB LD_W
;				SETB LD_V
POP ACC	
RET
;__________________________________________________________________

;*******************************************************************
;	PUT RECIVED HEX DATA IN SPRIT SAPCE.NUMBER /SYMBOLS
;*******************************************************************
WIFI_DATA_2_SPIRITS:
PUSH ACC
		;-------------		TEST IF IS ERROR MESAGE
		MOV A,FOC_A
		ANL A,#11110000B
		CJNE A,#0E0H,WIFI_DATA_2_SPIRITS_NORMAL	
			CALL ERROR_2_SPIRIT_SPACE
			JMP WIFI_DATA_2_SPIRITS_OUT
		WIFI_DATA_2_SPIRITS_NORMAL:
		MOV A,FOC_B	 	;P1R
		ANL A,#00001111B
		WIFI_DATA_2_SPIRITS_TEST_00:	;TEST IF IS LOW CURRENT,WAITING CONTACT AND CURRENT
			CJNE A,#000H,WIFI_DATA_2_SPIRITS_TEST_01 	
				CALL WIFI_DISPLAY_00	   ;C  
					SJMP WIFI_DATA_2_SPIRITS_OUT

		WIFI_DATA_2_SPIRITS_TEST_01: 				;01=LOW CURRENT CONECTED NOT IN POSITION
			CJNE A,#001H,WIFI_DATA_2_SPIRITS_TEST_02
				CALL WIFI_DISPLAY_01	   ;0000
					SJMP WIFI_DATA_2_SPIRITS_OUT
		
		
		WIFI_DATA_2_SPIRITS_TEST_02:
		 	CJNE A,#002H,WIFI_DATA_2_SPIRITS_TEST_03
				CALL WIFI_DISPLAY_02
					SJMP WIFI_DATA_2_SPIRITS_OUT

		WIFI_DATA_2_SPIRITS_TEST_03:
		 	CJNE A,#002H,WIFI_DATA_2_SPIRITS_HEX
				NOP
	;****************************************************************
	;****************************************************************	   
		WIFI_DATA_2_SPIRITS_HEX:
		;WRITE 4 DIGIT DISPLAY FROM P0R,BD0R IN HEX FORMAT
		;_______________________	PUT ERRO NR IN SPIRIT SPACE
				MOV A,FOC_C
				SWAP A
					ANL A,#00001111B
					MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				MOV R7,A
				;________________
					MOV R0,#0C3H	; 	;PUT IN SPIRIT SAPCE MSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CBH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D3H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DBH	;
						MOV A,R7	;1
						MOVX @R0,A	
				;______________________
				MOV A,FOC_C
					ANL A,#00001111B
					MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				MOV R7,A
				;________________
					MOV R0,#0C4H	; 	;PUT IN SPIRIT SAPCE LSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CCH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D4H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DCH	;
						MOV A,R7	;1
						MOVX @R0,A
		
		
		;-------------------------------------------------------------
				MOV A,FOC_D
				SWAP A
					ANL A,#00001111B
					MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				MOV R7,A
				;________________
					MOV R0,#0C5H	; 	;PUT IN SPIRIT SAPCE MSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CDH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D5H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DDH	;
						MOV A,R7	;1
						MOVX @R0,A	
				;______________________
				MOV A,FOC_D
					ANL A,#00001111B
					MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				MOV R7,A
				;________________
					MOV R0,#0C6H	; 	;PUT IN SPIRIT SAPCE LSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CEH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D6H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DEH	;
						MOV A,R7	;1
						MOVX @R0,A
WIFI_DATA_2_SPIRITS_OUT:
POP ACC
RET
;______________________________________________________________


;******************************************************************
;	PUT TIMER VALUE,IN SPIRIT SAPCE
;****************************************************************88
TIMER_2_SPIRIT_SPACE:
PUSH ACC
				;MOV SG4,#079H	;E			
				MOV A,FOC_A
				ANL A,#00000111B	;GET FIRE NUMBER
				MOV DPTR,#SHW_DIG
;				CLR A
				MOVC A,@A+DPTR
				MOV R7,A
				MOV R7,#078H	;BLANK SPACE
				;________________
					MOV R0,#0C3H	; 	;PUT IN SPIRIT SAPCE
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CBH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D3H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DBH	;
						MOV A,R7	;1
						MOVX @R0,A	
		 ;==============================================
MOV A,FOC_D	 ;IN B AM VALOARE TIMER
CLR ACC.7	;STERG FLAGUL DE TIMER_ON
CALL HEX_TO_BCD
		  		MOV A,R2
				;SWAP A
					ANL A,#00001111B
					CJNE A,#000H,TIMER_2_SPIRIT_SPACE_1
					;-----------	ASTA ESTE PENTRU DIGITUL LSB DIGIT DIN TIMER
					;MOV SG3,#04FH	;1
					MOV R0,#0C4H	;
					MOV A,#000H	;1
					MOVX @R0,A
						MOV R0,#0CCH	;
						MOV A,#000H	;1
						MOVX @R0,A
				    MOV R0,#0D4H	;			
					MOV A,#000H	;1
					MOVX @R0,A
						MOV R0,#0DCH	;
						MOV A,#000H	;1
						MOVX @R0,A
						SJMP TIMER_2_SPIRIT_SPACE_2
	;=======================================================
				TIMER_2_SPIRIT_SPACE_1:

					MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				MOV R7,A
				;________________
					MOV R0,#0C4H	; 	;PUT IN SPIRIT SAPCE MSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CCH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D4H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DCH	;
						MOV A,R7	;1
						MOVX @R0,A	

				;TIMER NUMBER

; HJHKJ
				;_______________________	PUT ERRO NR IN SPIRIT SPACE
				;MOV A,FOC_B
				;IN B AM VALOAREA TIMER IN HEX

	TIMER_2_SPIRIT_SPACE_2:
				
				MOV A,R3
				;SWAP A
					ANL A,#00001111B
					MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				MOV R7,A
				;________________
					MOV R0,#0C5H	; 	;PUT IN SPIRIT SAPCE MSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CDH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D5H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DDH	;
						MOV A,R7	;1
						MOVX @R0,A	

				;______________________
				;MOV A,FOC_B
				MOV A,R4
					ANL A,#00001111B
					MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
					;-------------	ADD DECIMAL PINT SEG4 IF SOUND OFF
						MOV C,SOUND
						CPL C
						MOV ACC.7,C
					;-------------
				MOV R7,A
				;________________
					MOV R0,#0C6H	; 	;PUT IN SPIRIT SAPCE LSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CEH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D6H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DEH	;
						MOV A,R7	;1
						MOVX @R0,A
POP ACC	
RET	
				;STOP ALL NON FIRE LEDS
				MOV R0,#0C7H
					MOVX A,@R0
					;ORL A,#00001110B
					ANL A,#11111101B
					MOVX @R0,A
				MOV R0,#0CFH
					MOVX A,@R0
					ORL A,#00000010B
					MOVX @R0,A
				MOV R0,#0D7H
					MOVX A,@R0
					ANL A,#11111101B
					MOVX @R0,A
				MOV R0,#0DFH
					MOVX A,@R0
					ORL A,#00000010B
					MOVX @R0,A
;				SETB LD_W
;				SETB LD_V


POP ACC	
RET
;__________________________________________________


;**************************************************
;	COPY SYMBOL FROM R7 TO 4 DIFERENTO LOCATION FOR DISPLAY,IS THE SAME VALUE
;*************************************************8
SYMBOL_2_STATIC_SPIRIT:
		MOV B,#0BFH
		MOV A,FOC_A
		ANL A,#00000111B	;DELET NON NUMBER BIT
		ADD A,B
		MOV R0,A
			;-------------	4 ADDRES
			MOV A,R7	;BLANK DIGIT
			MOV B,A		;SAVE VALUE	
			MOVX @R0,A
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,R7
				MOVX @R0,A
				;_______________
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,R7
				MOVX @R0,A
				;_______________
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,R7
				MOVX @R0,A
RET
;__________________________________________________

;**************************************************
;	COPY SYMBOL FROM R7 TO 4 DIFERENTO LOCATION FOR DISPLAY,IS THE SAME VALUE
;*************************************************8
SYMBOL_RADIO_2_SPIRIT:
		MOV B,#0BFH
		MOV A,FOC_A
		ANL A,#00000111B	;DELET NON NUMBER BIT
		ADD A,B
		MOV R0,A
			;-------------	4 ADDRES
			MOV A,#008H	;BLANK DIGIT
			MOV B,A		;SAVE VALUE	
			MOVX @R0,A
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,#0048H
				MOVX @R0,A
				;_______________
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,#0049H
				MOVX @R0,A
				;_______________
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,#000H
				MOVX @R0,A
RET
;__________________________________________________

;**************************************************
;	COPY SYMBOL FROM R7 TO 4 DIFERENTO LOCATION FOR DISPLAY,IS THE SAME VALUE
;*************************************************8
SYMBOL_ERR_2_SPIRIT:
		MOV B,#0BFH
		MOV A,FOC_A
		ANL A,#00000111B	;DELET NON NUMBER BIT
		ADD A,B
		MOV R0,A
			;-------------	4 ADDRES
			MOV A,#079H	;E
			MOV B,A		;SAVE VALUE	
			MOVX @R0,A
				MOV A,R0
				
				ADD A,#008H
				MOV R0,A
				MOV A,#079H	;BLANK
				MOVX @R0,A
				;_______________
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,#079H
				MOVX @R0,A
				;_______________
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,#079H
				MOVX @R0,A
RET
;__________________________________________________











;********************************************************************
;	CLEAR 4 DIG DISPLAY SPIRIT
;*****************************************************************
SPIRIT_4_DG_CLEAR:

PUSH ACC
	MOV R0,#0C3H		;LINE 1
	MOV A,#000H
	MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
	MOV R0,#0CBH		;LINE 2
	MOV A,#000H
	MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
	MOV R0,#0D3H		;LINE 3
	MOV A,#000H
	MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
	MOV R0,#0DBH		;LINE 3
	MOV A,#000H
	MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
	;---------------	cazul e
	JB SOUND,SPIRIT_4_DG_CLEAR_OUT
		MOV R0,#0C6H
		MOV A,#080H
		MOVX @R0,A
			MOV R0,#0CEH
			MOV A,#080H
			MOVX @R0,A 
		MOV R0,#0D6H
		MOV A,#080H
		MOVX @R0,A
			MOV R0,#0DEH
			MOV A,#080H
			MOVX @R0,A 
	SPIRIT_4_DG_CLEAR_OUT:
POP ACC

RET
;____________________________________________________________

;*********************************************************************
;	WRITE FLASH,CONSTANT VALUT TO LED  USING FOC_A,VALUE,THE SELECTED VALUE
;*********************************************************************
KEY_SEL_2_SPIRIT:
	MOV A,FOC_A
	ANL A,#0000111B		;USE ONLY FIRE NUMBER
	JB FLEX,KEY_SEL_2_SPIRIT_FLEX		;PT FLEX STING LEDURILE DE F1 F2 SI LAS PARPADEO CEL DE FLEX

		MOV B,SPR_LD
	KEY_SEL_2_SPIRIT_K1:
		CJNE A,#001H,KEY_SEL_2_SPIRIT_K2
			MOV A,SPR_LD
			;_____________________________________
			
			MOV R0,#0C7H	;LDE ADRESS LINE 1
			MOVX A,@R0
			ORL A,#11100000B;ALL FIRE LEDS ON
				SETB ACC.7	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0CFH	;LDE ADRESS LINE 2
			MOVX A,@R0
			ORL A,#11100000B;ALL FIRE LEDS ON
				CLR ACC.7	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0D7H	;LDE ADRESS LINE 1
			MOVX A,@R0
			ORL A,#11100000B;ALL FIRE LEDS ON
				SETB ACC.7	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0DFH	;LDE ADRESS LINE 1
			MOVX A,@R0
			ORL A,#11100000B;ALL FIRE LEDS ON
				CLR ACC.7	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________

			SJMP KEY_SEL_2_SPIRIT_KX
	KEY_SEL_2_SPIRIT_K2:
		CJNE A,#002H,KEY_SEL_2_SPIRIT_KX
			MOV A,SPR_LD
			;_____________________________________	ANL A,#11111101B	;LED_ON
			;_____________________________________
			
			MOV R0,#0C7H	;LDE ADRESS LINE 1
			MOVX A,@R0
			ORL A,#11100000B;ALL FIRE LEDS ON
				SETB ACC.6	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0CFH	;LDE ADRESS LINE 2
			MOVX A,@R0
			ORL A,#11100000B;ALL FIRE LEDS ON
				CLR ACC.6	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0D7H	;LDE ADRESS LINE 1
			MOVX A,@R0
			ORL A,#11100000B;ALL FIRE LEDS ON
				SETB ACC.6	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0DFH	;LDE ADRESS LINE 1
			MOVX A,@R0
			ORL A,#11100000B;ALL FIRE LEDS ON
				CLR ACC.6	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			SJMP KEY_SEL_2_SPIRIT_KX
	KEY_SEL_2_SPIRIT_FLEX:
		CJNE A,#003H,KEY_SEL_2_SPIRIT_KX	
			MOV A,SPR_LD
			;_____________________________________
			
			MOV R0,#0C7H	;LDE ADRESS LINE 1
			MOVX A,@R0
			ORL A,#11100000B;ALL FIRE LEDS ON
				SETB ACC.5	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0CFH	;LDE ADRESS LINE 2
			MOVX A,@R0
			ORL A,#11100000B;ALL FIRE LEDS ON
				CLR ACC.5	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0D7H	;LDE ADRESS LINE 1
			MOVX A,@R0
			ORL A,#11100000B;ALL FIRE LEDS ON
				SETB ACC.5	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0DFH	;LDE ADRESS LINE 1
			MOVX A,@R0
			ORL A,#11100000B;ALL FIRE LEDS ON
				CLR ACC.5	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			;SJMP KEY_SEL_2_SPIRIT_KX
	KEY_SEL_2_SPIRIT_KX:
RET
;________________________________________________________________________



;*********************************************************8888
;KEY SELECT MENIU DISPLAY LED
;*************************************************************
KEY_SEL_SHOW_LED_MSG:
MOV DPTR,#KEY_SEL_SHOW_LED
	MOV R0,#0C7H
	CLR A
	MOVC A,@A+DPTR
	MOVX @R0,A
		INC DPTR
	MOV R0,#0CFH
	CLR A
	MOVC A,@A+DPTR
	MOVX @R0,A
		INC DPTR
		MOV R0,#0D7H
	CLR A
	MOVC A,@A+DPTR
	MOVX @R0,A
		INC DPTR
	MOV R0,#0DFH
	CLR A
	MOVC A,@A+DPTR
	MOVX @R0,A
		INC DPTR
RET
;________________________________________________________________











; 4 CHARACTERS FOR 4 LINES ..THE 4 DIGIT LEDS
SPIRIT_WIFI_ONPLACE:
DB 039H,009H,009H,040H	 ;SEMNUL DE ANTENE	SS
DB 039H,009H,009H,00FH
DB 039H,009H,009H,00FH
DB 039H,009H,009H,00FH



;DB 028H,001H,008H,005H
;DB 011H,008H,001H,00AH	  ;SE MISCA CERCUL..CAM AIUREA
;DB 028H,001H,008H,005H
;DB 011H,008H,001H,00AH

;DB 039H,009H,009H,00FH
;DB 039H,009H,009H,00FH
;DB 039H,009H,009H,00FH		ZEOURI
;DB 039H,009H,009H,00FH




; 4 CHARACTERS FOR 4 LINES ..THE 4 DIGIT LEDS
SPIRIT_WIFI_WAITING:


DB 064H,040H,040H,040H	 ;SEMNUL DE ANTENE	-SS- SE MISCA
DB 040H,064H,064H,040H
DB 040H,040H,064H,064H
DB 040H,040H,040H,064H

SPIRIT_WIFI_OFF:
DB 040H,000H,000H,000H
DB 040H,040H,000H,000H
DB 040H,040H,040H,000H
DB 040H,040H,040H,040H


RF_LINK_WAIT_DISP: 			;SIMBOLUL DEPUS IN SEMNALUL DE DETECTIE PE 4 DIGITI...CUM CA ESTE PORNIT SA NU MAI ASTEPT UPDATE
DB 064H,064H,064H,064H


CLEANER_MSG: 			;
DB 000H,039H,038H,054H
CLEANER_MSG1: 			;
DB 000H,000H,000H,000H



KEY_SEL_SHOW_LED:	;
DB	11100001B
DB	11100001B
DB	11100001B
DB	11100001B










SPIRIT_TABLE:	
;	SG1	  SG2  SG3   SG4  SG5  SG6  SG7    LED 1,2,3,-,VITRO,RADIO,PWR,+
DB	008H,07DH,03FH,	030H,000H,000H,000H,  000H	   ;SPIRIT 1
DB	048H,07DH,000H,	000H,001H,001H,000H,  000H	   ;SPIRIT 1
DB	049H,07DH,03FH,	000H,000H,000H,006H,  000H	   ;SPIRIT 1
DB	000H,07DH,004H,	000H,008H,008H,000H,  000H	   ;SPIRIT 1
DB  0FFH	;END OF DATA SIGNAL
;------------------------------------------------------------------------------------
;------------------------------------------------------------------------------------
;------------------------------------------------------------------------------------


ORG 0C000H	;KEYBOARD CONFIG
KYB_CFG:
DB	080H		;CFG.7=SOUND ON OFF		
DB	034H,0FFH,0FFH



DB	0FFH,0FFH,0FFH,0FFH
DB	0FFH,0FFH,0FFH,0FFH
DB	0FFH,0FFH,0FFH,0FFH

DB	0FFH,0FFH,0FFH,0FFH
DB	0FFH,0FFH,0FFH,0FFH
DB	0FFH,0FFH,0FFH,0FFH
DB	0FFH,0FFH,0FFH,0FFH





ORG 0E000H	;PT TESTAT FIRMWARE

ORG 0E0FDH  ;
frw:
;DB 043H,002,000H
DB 012H,034H,056H








;ORG 0FA00H	;BOOTLOADER JUMP ADRESS
;	JMP LOADER_START
;	ORL RSTSRC,#010H

;ORG 0FBFEH	;BOOT LOADER SIGNATURE
;DB 	0A5H




