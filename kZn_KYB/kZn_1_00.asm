#include <SI_EFM8BB3_Defs.inc>
;SENZOR 1=40,2=80,3=20,MINUS=10 PLUS=08,0M/0FF=01,VITRO=04,WIFI=02


;********************************************************************
;	MEMORIA VIDEO V-RAM
;	SG0	SG1	SG2	SG3	SG4	SG5	SG6	LED
;   C0H	C1H	C2H	.....			C7H		LINE1
;	C8H	........				CFH		LINE2
;	D0H	D1H	........			D7H		LINE3
;	D8H	.....					DFH		LINE4

;led=FLX,1,2,3,-,+,TMR,POW

;	E0H=0FFH VALUE TO SIGNAL END OF DATA



;STB		BIT	P0.7
;CLK		BIT	P0.6
;DIO		BIT	P0.3
;BUZZ	BIT	P0.2

;	pini pt i2c cap1298
;P1.0	SMDAT
;P1.1	SMCLK



T_SEL	BIT	P0.3	;TOUCH SELECT SIGNAL
T_IRQ	BIT	P0.7	;BITUL DE DETECTAT IRQ DE LA TACTIL

DIO		BIT	P2.6 	;DIG
CLK		BIT	P2.5   	;PUSH
STB		BIT	P2.4	;PUSH

BUZZ	BIT	P1.2

LED		BIT	P1.5	;PUSH

ALERT	BIT	P0.7	;ISR D ELA CONTROLER KEYBOARD

LD_PW	BIT	P3.4	;POWER LED
LD_W	BIT	P3.3	;LEDWIFI
LD_V	BIT	P3.2	;LEDVITRO
LD_P	BIT	P3.1	;led plus key
LD_MIN	BIT	P3.0	;LED_MINIM
LDF3	BIT	P2.3
LDF2	BIT	P2.2	
LDF1	BIT	P2.1
LD_AX	BIT	P1.6	;LED AUXILIAR
LD_TOT	BIT	P1.7	;LED TIMEOUT
LD_FL	BIT	P2.0	;LED FLEX



;BTN		BIT	P0.2

DBG		BIT	P0.3	;SAME WITH SCN PT SPI

WI_CN	BIT	P1.5	;PICIORUL D ECONTROL






;	I2C RUTINE
;******************************************
SMB_BUSY			BIT		000H
SMB_SENDWORDADDR_H	BIT		001H	;FLAGURI PT ADRESS H SI LOW
SMB_SENDWORDADDR_L	BIT		002H
SMB_RANDOMREAD		BIT		003H
SMB_ACKPOLL			BIT		004H
SMB_SEND_START		BIT		005H
;___________________________________
SMB_DATA_IN		   	DATA	008H	
SMB_DATA_OUT		DATA	009H
SMB_DATA_LEN 		DATA	00AH
WORD_ADDR_H  		DATA	00BH
WORD_ADDR_L  		DATA	00CH
SMB_RW				DATA	00DH
TARGET				DATA	00EH
;_____________________________________
WRITE		EQU		000H
REAd		EQU		001H
EEPROM_ADDR	EQU		050H	;ADRESA MEMORIEI
SMB_ADDR	EQU		050H	;ADRESA KEYBOARD
PAGE_SIZE	EQU		020H	;MARIME PAGINII DIN MEM I2C
	
SMB_MTSTA   EQU		0E0H
SMB_MTDB	EQU		0C0H	;STATUSURI VECTORI INTRERUPERE
SMB_MRDB	EQU		080H	

;******************************************




;00-05==BIT RESERVED FOR I2C
TOT_T2	BIT		006H	;FLAG DE TIMEOUT TIMER 0
TOT_SER	BIT		007H	;FLAG DE ERARE D ETIMEOUT LA SERIAL
FOCON	BIT		008H	;FLAG CA ESTE PORNIT DIN TASTATURA
ERR		BIT		009H	;EROARE SFISRIT D ESPATIU S AU TIMEOUT
TOT		BIT		00AH	;FLAG DE TIMEUT DIVERSE
TOT4	BIT		00BH	;FLAG DE TIMEUT TIMER4 
TOT4_D	BIT		00CH	;FLAG TIMEOUT FOR DISPLAY REFRESH
ST_UPD	BIT		00DH	;BIT SET WHEN IS A NEW STATUS UPDATED
AUX_0	BIT		00EH	;FLAG PT IESIEREA AUXILIARA	IN 1 ESTE ACTIVA
FLEX	BIT		00FH	;FLAG CARE ARATA FLEX ACTIV




;08-0E I2C DATA RESEVED FOR 12C

TICK	DATA	00FH	;CONTOR DE CITE TICKURI DE 50 MS SA FAC 51041 CONTOR DE CLK/12 TIMER 3893H
ERHRD	DATA	010H	;REGISTRU PT ERORI HARDWARE (SENZOT TEMP,RADIO,PLM)
TIKT4	DATA	011H	;CONTOR DE CITE TICKURI DE 50MS SA FACA TIMERUL 4
TIKT4_D	DATA	012H	;VALUE FOR TICK TIMER 4 DISPLAY REFRESH
TIKT5	DATA	013H	;TICK PT TIMER 5 CITI MULTIPLII D ETIMP FACE PINA LA OVERFLOW

PWR		DATA	015H	;PUTEREA COMANDATA
SPR_AD	DATA	016H	;ADDRES FOR SPIRIT
SPR_LD	DATA	017H	;VALUE FOR LEDS


FOC1	DATA	018H
FOC2	DATA	019H
FOC3	DATA	01AH	;CONFIGURATIII DE LA OCHIURI

FOC_A	DATA	01BH	;VALORI PENTRU DIVERSE VALORI FOCUL ACTUAL
FOC_B	DATA	01CH
FOC_C	DATA	01DH
FOC_D	DATA	01EH
FOC_E	DATA	01FH	;FOC NUMAR







;080-ENABLE
;040-VITRO
;020-WIFI
;X1-POWER 1
		
;020-023 RESERVED FOR FLAGS


;____________________	FOC STATUS REGISTERS
FOC1A	DATA	024H   ;STATUS 0=STANDBY/E=ERROR/P=VITRO/R=RADIO
FOC1B	DATA	025H   ;VALUE
FOC1C	DATA	026H   ;RFU1
FOC1D	DATA	027H   ;RFU2

FOC2A	DATA	028H
FOC2B	DATA	029H
FOC2C	DATA	02AH
FOC2D	DATA	02BH

FOC3A	DATA	02CH
FOC3B	DATA	02DH
FOC3C	DATA	02EH
FOC3D	DATA	02FH



;FLAG1	DATA	020H
;FLAG2	DATA	021H	
;FLAG3	DATA	022H	;SPACE RESERVED FOR BITD

;__________________		TRANSMITED PACKET
CLST	DATA	030H
INST	DATA	031H 	;INSTRUCTION(5B)+FIRE_NR(3B) 0=OK,STB/ 1=VITRO_POWER/ 2=WIFI/ E-ERROR
P1T		DATA	032H	;FIRE NUMBER
P0T		DATA	033H	;SENSE 0=RD  1=WR
BD0T	DATA	034H
;BD1T	DATA	035H
CRCT	DATA	036H	;CRC 

;__________________		RECIVED PACKET
CLSR	DATA	037H	;SENSE >=RD  >=WR
INSR	DATA	038H 	;INSTRUCTION P-POWER,S-STOP,A-START,E-ERROR
P1R		DATA	039H	;FIRE NUMBER
P0R		DATA	03AH	;DATA RELATIVE TO INSTRUCTION
BD0R	DATA	03BH
;BD1R	DATA	03CH
CRCR	DATA	03DH	;CRC 
TICKT2	DATA	03EH	;TICK OF TIMER 2 FOR BUZZING
VDET	DATA	03FH	;TICK OF 1S TO WAIT FOR TOOL DETECT

KEY_H	DATA	040H	;BUFER PT KEYBOARD
KEY_L	DATA	041H















SG0		DATA	040H
SG1		DATA	041H
SG2		DATA	042H
SG3		DATA	043H
SG4		DATA	044H
SG5		DATA	045H
SG6		DATA	046H
;SG7		DATA	047H

SGM		DATA	048H	;DATELE DE LA SEGMENT
GRID	DATA	049H	;ADRESA DE LA GRID



	



GRD1	EQU		023H
UART_TOT	EQU	010D	;TIMEOUT PT SERIAAL

TIME5H	EQU	09BH		;VAL TIMER 5 PT 50MS
TIME5L	EQU	0A0H

TICK4D_V	EQU	00AH	;TICK OF 50 MS FOR DISPLAY REFRESH
VDET_V	EQU	01BH		;WAIT 10 TICK DE 1 MS



























ORG 000H
JMP INIT_DEVICE

ORG 02BH	;TIMER_2 ISR
	CALL TIMER_2_ISR
RETI

ORG 003BH		;I2C ISR
	CALL I2C_RUTINA
		CLR SMB0CN0_SI
	RETI
ORG	08BH	;TIMER4 ISR
RETI

ORG	008BH	;TIMER 4 ISR
;CPL DBG
	CALL TIMER_4_ISR
RETI


ORG	093H	;TIMER 5 ISR
	CALL TIMER_5_ISR
RETI


ORG 0100H
;INIT_DEVICE:

; Peripheral specific initialization functions,
; Called from the Init_Device label
PCA_Init:
    mov  PCA0CN0,   #040h
    anl  PCA0MD,    #0BFh
    mov  PCA0MD,    #004h
    mov  PCA0CPM0,  #046h
    mov  PCA0CPH0,  #00Ah 	;2400
;	mov  PCA0CPH0,  #00Dh 	;2000
    ret

Timer_Init:
 mov  TCON,      #050h
    mov  TMOD,      #022h
    mov  CKCON0,     #004h
    mov  TH0,       #002h
    mov  TH1,       #0CBh
    mov  TMR2RLL,   #093h
    mov  TMR2RLH,   #038h
    mov  TMR2L,     #09Eh
    mov  TMR2H,     #038h
    ret

UART_Init:
    mov  SCON0,     #052h
    ret

SMBus_Init:
    mov  SMB0CF,    #080h
    ret

SPI_Init:
    mov  SPI0CFG,   #070h
    mov  SPI0CN0,    #001h
    mov  SPI0CKR,   #008h
    ret

Port_IO_Init:
 ; P0.0  -  SCK  (SPI0), Open-Drain, Digital
    ; P0.1  -  MISO (SPI0), Open-Drain, Digital
    ; P0.2  -  MOSI (SPI0), Open-Drain, Digital
    ; P0.3  -  Unassigned,  Open-Drain, Digital
    ; P0.4  -  TX0 (UART0), Open-Drain, Digital
    ; P0.5  -  RX0 (UART0), Open-Drain, Digital
    ; P0.6  -  Skipped,     Open-Drain, Digital
    ; P0.7  -  Skipped,     Open-Drain, Digital

    ; P1.0  -  Unassigned,  Open-Drain, Digital
    ; P1.1  -  Unassigned,  Open-Drain, Digital
    ; P1.2  -  Unassigned,  Push-Pull,  Digital
    ; P1.3  -  Unassigned,  Open-Drain, Digital
    ; P1.4  -  Unassigned,  Open-Drain, Digital
    ; P1.5  -  Unassigned,  Push-Pull,  Digital
    ; P1.6  -  Unassigned,  Open-Drain, Digital
    ; P1.7  -  Unassigned,  Open-Drain, Digital

    ; P2.0  -  Unassigned,  Open-Drain, Digital
    ; P2.1  -  Unassigned,  Push-Pull,  Digital
    ; P2.2  -  Unassigned,  Push-Pull,  Digital
    ; P2.3  -  Unassigned,  Push-Pull,  Digital
    ; P2.4  -  Unassigned,  Push-Pull,  Digital
    ; P2.5  -  Unassigned,  Push-Pull,  Digital
    ; P2.6  -  Unassigned,  Open-Drain, Digital
    ; P2.7  -  Skipped,     Open-Drain, Digital


MOV SFRPAGE,#020H
;mov p0mdin,#0ffh
;mov p1mdin,#0ffh
;mov p2mdin,#0ffh
;mov p3mdin,#0ffh
mov  P1MDOUT,   #024h
    mov  P2MDOUT,   #03Eh
    mov  P0SKIP,    #0C8h
	 mov  P1SKIP,    #003h
    mov  XBR0,      #003h
    mov  XBR2,      #040h
MOV SFRPAGE,#000H
    ret

Oscillator_Init:
;    mov  FLSCL,     #040h
    mov  CLKSEL,    #010h
    ret

Interrupts_Init:
 	mov  EIE1,      #001h
	mov  IE,        #0A0h
    ret


; Initialization function for device,
; Call Init_Device from your main program
Init_Device:
		;WATCHDOG DISABLE
	MOV WDTCN,#0DEh ; disable software watchdog timer
	MOV WDTCN,#0ADh
;sjmp $

    lcall PCA_Init
	lcall Timer_Init
    lcall UART_Init
    lcall SMBus_Init
	lcall SPI_Init	
	lcall Port_IO_Init
	lcall Oscillator_Init
	lcall Interrupts_Init

	MOV SFRPAGE,#010H
;	MOV EIE2,#008H	;TIMER5 ISR ENABLED
	MOV EIE2,#00CH	;TIMER5 TIMER 4 ISR ENABLED
	MOV EIP2,#008H	;TIMER 5 ISR HIGH PRIORITY
	MOV TMR5H ,#TIME5H
	MOV TMR5L ,#TIME5L
	MOV TMR5RLH,#TIME5H
	MOV TMR5RLL,#TIME5L
	CLR TMR5CN0_TF5H
	;_______________________________
	MOV TMR4H ,#TIME5H
	MOV TMR4L ,#TIME5L
	MOV TMR4RLH,#TIME5H
	MOV TMR4RLL,#TIME5L

	MOV TMR4RLH,#036H
	MOV TMR4RLL,#080H
	MOV TIKT4_D,#TICK4D_V	;REWRITE VALUE FOR TICK 4 DISPLAY
	CLR TMR4CN0_TF4H
	
	MOV SFRPAGE,#000H
	MOV IP,#020H	;TIMER 2 ISR HIGH

	MOV SP,#058H
	 mov  PCA0CPM0,  #030H

	 ANL P3,#11100000B
	 
	 CLR BUZZ
	 
	 SETB LDF3  ;FOC3
	 SETB LDF2  ;FOC2
	 SETB LDF1  ;FOC1

	 SETB LD_PW  ;ON
	 SETB LD_W  ;LEDWIFI
	 SETB LD_V  ;LEDVITRO
	 SETB LD_P  ;LED+
	 SETB LD_MIN  ;LED-

   	CLR TOT_T2
CLR PSW_CY	
	CLR ST_UPD	;NO NEW STATUS UPDATE
	
	
	
	MOV ERHRD,#000H	;STERG REGISTRUL DE ERORI
;JNB PSW_CY,$
	CLR AUX_0	;STERG FLAG DE IESIREA RELE AUXILIAR
	SETB LD_AX




	CALL  SYSTEM_INIT 	;INITIALIZE KEYBOARD DISPLAY
	CALL BUZZING


NOP

	CLR FLEX	;STERG FLAGUL DE FLEX,DEFAULT DEZACTIVAT
	CLR TOT4
	PLMU:
;	CALL WAIT_KEY_X
;		SJMP PLMU


	SETB LD_W
	SETB LD_V

	CALL WAIT_KEY_ON_OFF
	CALL BUZZING
	CALL DISPLAY_INIT	
	CALL SPIRIT_SPACE_FORMAT
;		SJMP $








;___________________________________________
	MOV DPTR,#SPIRIT_TABLE
		MOV SPR_AD,#0C0H	;SPIRIT START ADDRES	

	;__________________________


;	SJMP $


	CALL SYSTEM_CHECK






;	CALL CHECK_COM 
;		CALL LOAD_SIMULATE_F1_NO_ERROR
;			MOV FOC1A,INSR
;			MOV FOC1B,P1R
;			MOV FOC1C,P0R	;UPDATE STATUS REGISTER
;		    MOV FOC1D,BD0R
;		CALL LOAD_SIMULATE_F2_NO_ERROR
;			MOV FOC2A,INSR
;			MOV FOC2B,P1R
;			MOV FOC2C,P0R	;UPDATE STATUS REGISTER
;		    MOV FOC2D,BD0R
;		CALL LOAD_SIMULATE_ER_F3_04
;			MOV FOC3A,INSR
;			MOV FOC3B,P1R
;			MOV FOC3C,P0R	;UPDATE STATUS REGISTER
;		    MOV FOC3D,BD0R





			MOV SFRPAGE,#010H
	SETB TMR4CN0_TR4	;START TIMER 4
			MOV SFRPAGE,#000H


;	MOV FOC_A,FOC1A
;	MOV FOC_B,FOC1B
;	MOV FOC_C,FOC1C
;	MOV FOC_D,FOC1D
;		CALL STATUS_2_SPIRITS
;	MOV FOC_A,FOC2A
;	MOV FOC_B,FOC2B
;	MOV FOC_C,FOC2C
;	MOV FOC_D,FOC2D
;		CALL STATUS_2_SPIRITS
;	MOV FOC_A,FOC3A
;	MOV FOC_B,FOC3B
;	MOV FOC_C,FOC3C
;	MOV FOC_D,FOC3D
;		CALL STATUS_2_SPIRITS



CLR TOT4	;DE MOMENT PT TIMOUT KEYBOARD




	;CEVA PT SA SE OPREASCA DUPA 15 S NEPORNIT
WAIT_FIRE_PREPARE:
;	CLR LDF1
;	CLR LDF2
;	CLR LDF3		;LIGHT FIRE ON
;	CALL SET_3LED_SPIRIT
	;_________________________	TIMER 4 START
;	CALL CLR_TCH_KEY
;	CALL WAIT_400MS
	CALL CLR_TCH_KEY

	
CALL SHOW_POWER_ON_LEDS
	MOV R0,#0C7H	;UND EE PRIMUL DIN SPIRIT DELA LED
	MOVX A,@R0
CALL WRT_SPIRIT_2_LED	;SA NU MAI ASTEPT DUPA UPDATE

;**************************************************************************
;	MAIN PROGRAM START
;*************************************************************************8
WAIT_FIRE_SELECT:


;SJMP $
;	JNB ALERT,WAIT_FIRE_SELECT_A
	CALL WAIT_KEY_X
;	JNB ALERT,WAIT_FIRE_SELECT_1:
	WAIT_FIRE_SELECT_A:		;ASTA PTE KEY APASATE CARE N SINT PUTERI 











	WAIT_FIRE_SELECT_1:
;	JNB TOT4,SELECTED_FIRE_1
;	   	CALL DISPLAY_OFF
;		ORL RSTSRC,#010H
;	NOP
	SELECTED_FIRE_1: ;080H
		MOV A,KEY_L
		CJNE A,#080H,SELECTED_FIRE_2
			MOV A,KEY_H
			CJNE A,#000H,SELECTED_FIRE_2
		CALL BUZZING
			MOV FOC_A,FOC1A
			MOV FOC_B,FOC1B
			MOV FOC_C,FOC1C
			MOV FOC_D,FOC1D	
		MOV INST,#0D1H
;		CALL 			
				CALL STATUS_2_SPIRITS
				CALL KEY_SEL_2_SPIRIT
			JMP SELECTED_FIRE_OUT
	SELECTED_FIRE_2:;040H
		CJNE A,#040H,SELECTED_FIRE_3
			MOV A,KEY_H
			CJNE A,#000H,SELECTED_FIRE_3
		CALL BUZZING
			MOV FOC_A,FOC2A
			MOV FOC_B,FOC2B
			MOV FOC_C,FOC2C
			MOV FOC_D,FOC2D
				CALL STATUS_2_SPIRITS
				CALL KEY_SEL_2_SPIRIT
			;CALL WAIT_RELEASE
			SJMP SELECTED_FIRE_OUT
	SELECTED_FIRE_3:;O20H
		CJNE A,#020H,SELECTED_FLEX
			MOV A,KEY_H
			CJNE A,#000H,SELECTED_FLEX
		CALL BUZZING
			MOV FOC_A,FOC3A
			MOV FOC_B,FOC3B
			MOV FOC_C,FOC3C
			MOV FOC_D,FOC3D
				CALL STATUS_2_SPIRITS
				CALL KEY_SEL_2_SPIRIT
			SJMP SELECTED_FIRE_OUT
	SELECTED_FLEX:
		   CJNE A,#000H,SELECTED_FIRE_0
			MOV A,KEY_H
			CJNE A,#001H,SELECTED_FIRE_0
		
		CALL FLEX_SELECTED
		SJMP $
		;JMP SELECTED_FIRE_OUT


	SELECTED_FIRE_0:;O20H
		CJNE A,#001H,WAIT_FIRE_SELECT
			MOV A,KEY_H
			CJNE A,#000H,WAIT_FIRE_SELECT
		CALL BUZZING
		SELECTED_FIRE_0A:		;DOUBLE TP FOR POWER OFF
			CALL WAIT_KEY_X	
				CALL BUZZING
				MOV A,KEY_L
				CJNE A,#001H,SELECTED_FIRE_0B	;IF NOT POWER OG,IS ANOTHER SELECTED FIRE	
					MOV A,KEY_H
					CJNE A,#000H,SELECTED_FIRE_0B
				;send stop to all fires
				;SEND POWER_OFF ORDER_fire_1
;				MOV A,FOC_A
;				ANL A,#00001111B	;DELETE INSTRUCTION
				MOV FOC_A,#001H
				MOV FOC_B,#000H
				CALL SEND_CMD
					MOV FOC_A,#002H
					MOV FOC_B,#000H
					CALL SEND_CMD
				MOV FOC_A,#003H
				MOV FOC_B,#000H
				CALL SEND_CMD
				CALL WAIT_400MS
			ORL RSTSRC,#010H
	
			SELECTED_FIRE_0B:
			JMP WAIT_FIRE_SELECT_1


	SELECTED_FIRE_OUT:		;already have the selected fire in the cache (FOC_A,...FOC_D)
;	____________________________________________________________________________________________
	
	SELECT_FIRE_OPERATION:	;ALREADY CACHE SELECTED
		MOV A,FOC_A
		ANL A,#11110000B	;LEAVE ONLY STATUS
		CJNE A,#0E0H,SELECT_FIRE_OPERATION_1 
;			CALL BUZZING
;			CALL BUZZING
;			CALL BUZZING	;SOUND ALARM
			CALL ERROR_2_SPIRIT_SPACE
				CALL WAIT_RELEASE
		JMP  WAIT_FIRE_SELECT	;START SELECTION AGAIN
		SELECT_FIRE_OPERATION_1:
			CJNE A,#000H,SELECT_FIRE_OPERATION_SELECTED
;			CALL SET_VITRO_LED
;			CALL SET_WIFI_LED
				CLR LD_W
				CLR LD_V
			SELECT_FIRE_OPERATION_1A:
			CALL WAIT_KEY_X
			NOP

			SELECT_FIRE_OPERATION_TST_VITRO:
				CJNE A,#004H,SELECT_FIRE_OPERATION_TST_WIFI
				MOV A,KEY_H
				CJNE A,#000H,SELECT_FIRE_OPERATION_TST_WIFI
					
					CALL BUZZING
					;CALL CLR_WIFI_LED
					SETB LD_W
						CALL VITRO_SELECTED_MAIN
JMP WAIT_FIRE_SELECT
			SELECT_FIRE_OPERATION_TST_WIFI:
				;CJNE A,#002H,SELECT_FIRE_OPERATION_1A
				CJNE A,#002H,SELECT_FIRE_OPERATION_TST_X_KEY
				MOV A,KEY_H
				CJNE A,#000H,SELECT_FIRE_OPERATION_TST_X_KEY
					CALL BUZZING
					CALL CLR_VITRO_LED
					CALL WIFI_SELECTED_MAIN
JMP WAIT_FIRE_SELECT
		    SELECT_FIRE_OPERATION_TST_X_KEY:

;					JNZ SELECT_FIRE_OPERATION_OUT

					CALL CLR_WIFI_LED
					CALL CLR_VITRO_LED
						CLR LDF1
						CLR LDF2
						CLR LDF3		;LIGHT FIRE ON
						CALL SET_3LED_SPIRIT
						CALL SPIRIT_4_DG_CLEAR
	
	
	
	
	
	SELECT_FIRE_OPERATION_OUT:
	JMP WAIT_FIRE_SELECT_1


	SELECT_FIRE_OPERATION_SELECTED:
		MOV A,FOC_A
		ANL A,#11110000B
		CJNE A,#010H,SELECT_FIRE_OPERATION_SELECTED_1
			CALL CLR_WIFI_LED
			CALL SET_VITRO_LED
				CALL VITRO_SELECTED_MAIN
JMP WAIT_FIRE_SELECT
		SELECT_FIRE_OPERATION_SELECTED_1:
		CJNE A,#020H,SELECT_FIRE_OPERATION_SELECTED_2	
			CALL SET_WIFI_LED
			CALL CLR_VITRO_LED
				CALL 	WIFI_SELECTED_MAIN
JMP WAIT_FIRE_SELECT
		SELECT_FIRE_OPERATION_SELECTED_2:
			SJMP $






;***********************************************************************
;	VITRO SELECTED MAIN OPERATION
;**********************************************************************8
VITRO_SELECTED_MAIN:
	;TEST IF IS ALREADY POWERED ON
	MOV A,FOC_A
	ANL A,#11110000B
	CJNE A,#000H,VITRO_SELECTED_SET_POWER
	
	;SEND TOOL DETECT=START VITRO
		MOV A,FOC_A
		ANL A,#00001111B
		MOV INST,A
		MOV P1T,#001H		;COMMAND FOR START DETECTION
	

SND_CMD:	
;MOV SFRPAGE,#010H
;	CLR TMR4CN0_TR4	;OPRESC TIMER 4,CA MOLESTA TIMER 5
;MOV SFRPAGE,#000H
;		CLR     SCON0_RI
;		MOV A,SBUF0
;		CLR     SCON0_RI
;		CALL READ_STATUS
		CALL SEND_COMMAND
;MOV SFRPAGE,#010H
;	SETB TMR4CN0_TR4	;START TIMER 4
;MOV SFRPAGE,#000H



;______________________________________________________	
		MOV VDET,#VDET_V
	VITRO_WAIT_DETECTED:	;WAIT TO RECIVE STATUS POWER =1
		CALL WAIT_400MS
		MOV A,FOC_A
		ANL A,#0000111B		;USE FOC NUMBER		;
		MOV B,#0D0H			;GET STATUS INSTRUCTION
		ADD A,B
		MOV INST,A			;SET VALUE FOR INSTRUCTION TO BE SEND
		CALL READ_STATUS 	;SIMULATE DETECTED TOOL
			MOV FOC_A,INSR
			MOV FOC_B,P1R
			MOV FOC_C,P0R
			MOV FOC_D,BD0R
;			CALL STATUS_2_SPIRITS
;			CALL ERROR_2_SPIRIT_SPACE
;		SJMP $
		
		
		CALL UPDATE_STATUS
		MOV A,FOC_A
		ANL A,#11110000B
		CJNE A,#000H,VITRO_WAIT_DETECTED_A 	;STILL WAIT RESULTS OF DETECTION
			DEC VDET
			MOV A,VDET
			CJNE A,#000H,VITRO_WAIT_DETECTED
			;_____________FIRST BUZZ
			CALL BUZZING
			JMP VITRO_SELECTED_SET_POWER_OFF_1
		


;		CALL TEST_TOOL_PRESENT



		VITRO_WAIT_DETECTED_A:
;			MOV FOC_B,#001H
;			MOV FOC_A,#011H		
		MOV A,FOC_B
		ANL A,#00000111B

;SJMP VITRO_WAIT_DETECTED_2
		CJNE A,#000H,VITRO_WAIT_DETECTED_2
			CALL WAIT_KEY_X
				CALL BUZZING
		 		;SEND POWER_OFF ORDER
				MOV A,FOC_A
				ANL A,#00001111B	;DELETE INSTRUCTION
				MOV FOC_A,A
				MOV FOC_B,#000H
				CALL SEND_CMD				

				CALL STATUS_2_SPIRITS
				CALL CLR_VITRO_LED
				CALL CLR_WIFI_LED
;				CALL CLR_3_LED
				CALL SET_3_LED
RET
			SJMP VITRO_WAIT_DETECTED_2
		VITRO_WAIT_DETECTED_1:
				CJNE A,#002H,VITRO_WAIT_DETECTED
				CALL STATUS_2_SPIRITS
				;JNB ALERT,VITRO_WAIT_DETECTED
				CALL CLR_TCH_KEY
				CALL WAIT_KEY_X
		
		
		VITRO_WAIT_DETECTED_2:
		CALL STATUS_2_SPIRITS
		CALL VITRO_CONTROLS_ON
		CALL CLR_TCH_KEY

	VITRO_SELECTED_SET_POWER:
	;WAIT FOR KEY + -
;	CALL WAIT_400MS
	JB ST_UPD,READ_UPDATED_STAT
	JNB ALERT,VITRO_SELECTED_SET_POWER_1
		JMP VITRO_SELECTED_SET_POWER
;	CALL CLR_TCH_KEY

	READ_UPDATED_STAT:
	CLR ST_UPD
	;_________________________	READ NEW UPDATEED STATOS FOR CACHE
	MOV R0,#023H
	MOV B,#004H
	MOV A,FOC_A
	ANL A,#00000111B	;LEAV ONLY FIRE NUMBER
	MUL AB
	MOV B,#020H
	ADD A,B
	MOV R0,A
	MOV A,@R0	;HAVE NEW STATUS
	
	    



		ANL A,#11110000B
		CJNE A,#0E0H,READ_UPDATED_STAT_2
		;DISPLAY ERROR AND GET OOUT
;			MOV R0,A
			MOV A,@R0
			MOV FOC_A,A
				INC R0
				MOV A,@R0
				MOV FOC_B,A
				INC R0
				MOV A,@R0
				MOV FOC_C,A
				INC R0
				MOV A,@R0
				MOV FOC_D,A
			
			CALL STATUS_2_SPIRITS
			CALL ERROR_2_SPIRIT_SPACE
			CALL CLR_VITRO_LED		;OFF VITRO LED

			READ_UPDATED_STAT_1:
			CALL WAIT_KEY_X
			CJNE A,#001H,READ_UPDATED_STAT_1
			CALL CLR_VITRO_LED
			;SEND POWER_OFF ORDER
				MOV A,FOC_A
				ANL A,#00001111B	;DELETE INSTRUCTION
				MOV FOC_A,A
				MOV FOC_B,#000H
				CALL SEND_CMD				

				CALL STATUS_2_SPIRITS
				CALL CLR_VITRO_LED
				CALL CLR_WIFI_LED
;				CALL CLR_3_LED
				CALL SET_3_LED
;				CALL CLR_3_LED
RET 
	
	
	READ_UPDATED_STAT_2:
	JMP VITRO_SELECTED_SET_POWER




	SJMP VITRO_SELECTED_SET_POWER

	NOP

	CALL WAIT_400MS
	JNB ALERT,VITRO_SELECTED_SET_POWER_1
	CALL WAIT_400MS
	JNB ALERT,VITRO_SELECTED_SET_POWER_1
	CALL WAIT_400MS
	JNB ALERT,VITRO_SELECTED_SET_POWER_1
	CALL GET_GENERAL_STATUS
	SJMP VITRO_SELECTED_SET_POWER















		JNB ALERT,VITRO_SELECTED_SET_POWER_1
		SJMP VITRO_SELECTED_SET_POWER
	VITRO_SELECTED_SET_POWER_1:
		CALL BUZZING
		CALL READ_TCH_KEY
;		CALL WAIT_RELEASE
;		CALL CLR_TCH_KEY
		;ACCEPT ONLY + - AN OFF KEY
   	VITRO_SELECTED_SET_POWER_MAX:		;MORE
   		 MOV A,KEY_L
		 CJNE A,#008H,	VITRO_SELECTED_SET_POWER_MIN
		 MOV A,KEY_H
		 CJNE A,#000H,	VITRO_SELECTED_SET_POWER_MIN
;		 	CALL BUZZING
			MOV A,FOC_B
			ANL A,#00001111B
			CJNE A,#00AH,VITRO_SELECTED_SET_POWER_MAX_1	;TEST NOT MAXIMUM POWER
		   	   	SJMP VITRO_SELECTED_SET_OUT
			VITRO_SELECTED_SET_POWER_MAX_1:
				MOV A,FOC_B
				ADD A,#001H
				MOV FOC_B,A
CALL WAIT_4MS
				CALL SEND_CMD

				CALL STATUS_2_SPIRITS
				CALL WAIT_RELEASE
				SJMP VITRO_SELECTED_SET_OUT
   	
	
	VITRO_SELECTED_SET_POWER_MIN:  		;LESS 
		 CJNE A,#010H,VITRO_SELECTED_SET_POWER_OFF
		 	MOV A,KEY_H
			CJNE A,#000H,VITRO_SELECTED_SET_POWER_OFF
		 	CALL WAIT_RELEASE
			;CALL BUZZING
			MOV A,FOC_B
			ANL A,#00001111B
			CJNE A,#001H,VITRO_SELECTED_SET_POWER_MIN_1	;TEST NOT MAXIMUM POWER
		   	   	SJMP VITRO_SELECTED_SET_OUT
			VITRO_SELECTED_SET_POWER_MIN_1:
				MOV A,FOC_B
				CLR C
				SUBB A,#001H
				MOV FOC_B,A
				CALL SEND_CMD
				
				CALL STATUS_2_SPIRITS
				CALL CLR_TCH_KEY
				SJMP VITRO_SELECTED_SET_OUT
   	
	
	
	
	VITRO_SELECTED_SET_POWER_OFF:		;POWERDOWN
		 CJNE A,#001H,VITRO_SELECTED_SET_POWER_X
		 	MOV A,KEY_H
			CJNE A,#000H,VITRO_SELECTED_SET_POWER_X
			
		VITRO_SELECTED_SET_POWER_OFF_1:
		 	;CALL BUZZING
		 		;SEND POWER_OFF ORDER
				MOV A,FOC_A
				ANL A,#00001111B	;DELETE INSTRUCTION
				MOV FOC_A,A
				MOV FOC_B,#000H
				CALL SEND_CMD				

				CALL STATUS_2_SPIRITS
				SETB LD_V
				SETB LD_W
;				CALL CLR_VITRO_LED
;				CALL CLR_WIFI_LED
;				CALL CLR_3_LED
;				CALL SET_3_LED
				CALL VITRO_CONTROLS_OFF
				CALL SHOW_POWER_ON_LEDS
				MOV R0,#0C7H	;UND EE PRIMUL DIN SPIRIT DELA LED
				MOVX A,@R0
				CALL WRT_SPIRIT_2_LED	;SA NU MAI ASTEPT DUPA UPDATE
				CALL WAIT_RELEASE
				;UIU
RET
   	VITRO_SELECTED_SET_POWER_X:		;ANOTHER FIRE SELECTED
		;OTHER FIRES 80,20,40
		ANL A,#11100000B	;LEAVE ONLY 3 KEYBOARD
		JNZ	VITRO_SELECTED_SET_POWER_X_1
			JMP VITRO_SELECTED_SET_POWER
	VITRO_SELECTED_SET_POWER_X_1: 	;GO BACK TO SELECT FIRE
		CALL SET_3LED_SPIRIT
		CALL CLR_VITRO_LED
		CALL CLR_WIFI_LED		
		

RET

	JMP VITRO_SELECTED_SET_POWER
   	VITRO_SELECTED_SET_OUT:
	JMP	VITRO_SELECTED_SET_POWER








				CJNE A,#000H,WAIT_KEY_X_2_AT
					;SJMP WAIT_KEY_X
					NOP
				WAIT_KEY_X_2_AT:
;				MOV B,A
				CALL CLR_TCH_KEY



	CALL WAIT_KEY_X
	MOV FOC_A,#011H
	MOV FOC_B,#015H	;DEBUG TEST POWER6
	CALL STATUS_2_SPIRITS
;	ANL A,#

	SJMP $

;**********************************************************************	
;	READ STATUS OF ALL 3 FIRE
;**********************************************************************
GET_GENERAL_STATUS:	
	NOP
;	CALL GET_STATUS
;	CALL GET_STATUS
;	CALL GET_STATUS
RET
;___________________________________________________________________
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
;***********************************************************************
;	WIFI SELECTED MAIN OPERATION
;**********************************************************************8	
	WIFI_SELECTED_MAIN:
	CALL SYMBOL_RADIO_2_SPIRIT
	CALL SPIRIT_4_DG_CLEAR
	MOV SPR_AD,#0C8H		;SA PORNEASC LA PAGIN2A
		MOV A,FOC_A
		ANL A,#00001111B
		MOV B,#020H
		ADD A,B
		MOV FOC_A,A
		CALL SEND_CMD
CLR ST_UPD
		WIFI_SELECTED_MAIN_1:


	;WAIT FOR KEY + -
;	CALL WAIT_400MS
	JB ST_UPD,READ_UPDATED_STAT_WIFI
	JB ALERT,WIFI_SELECTED_MAIN_1
		WIFI_SELECTED_MAIN_1A:
		;___________________			;TEST PRESSED KEY
		CALL BUZZING
		CALL READ_TCH_KEY
		CJNE A,#001H,CLEAR_KEY
			CALL WAIT_RELEASE
			CALL CLR_TCH_KEY
			SJMP READ_UPDATED_STAT_1WIFIA
		CLEAR_KEY:
		CALL WAIT_RELEASE
		CALL CLR_TCH_KEY
			SJMP WIFI_SELECTED_MAIN_1


		JMP VITRO_SELECTED_SET_POWER
;	CALL CLR_TCH_KEY

	READ_UPDATED_STAT_WIFI:
	CLR ST_UPD
	;_________________________	READ NEW UPDATEED STATOS FOR CACHE
	MOV A,FOC_A		;CHECK STATUS OF FIRE IF IS 0X.IS POWERED DOWN
	ANL A,#00000111B	;LEAV ONLY FIRE NUMBER
	CJNE A,#000H,READ_UPDATED_STAT_WIFIA
		CALL SPIRIT_4_DG_CLEAR
		JMP READ_UPDATED_STAT_1WIFIA
;		SJMP $
	
	READ_UPDATED_STAT_WIFIA:
	MOV R0,#023H	;ONE ADRES BEFORE THE ACTUAL START
	MOV B,#004H
	MOV A,FOC_A
	ANL A,#00000111B	;LEAV ONLY FIRE NUMBER
	MUL AB
	MOV B,#020H
	ADD A,B
	MOV R0,A
	MOV A,@R0	;HAVE IN ACC NEW STATUS OF SELECTED FIRE
		ANL A,#11110000B
;		CJNE A,#0E0H,READ_UPDATED_STAT_2WIFI



		;COPY DATA FROM STATUS FIRE BUFFER IN CACHE,IN SELECTED FIRE SPACE
			MOV A,@R0	  	;
			MOV FOC_A,A
				INC R0
				MOV A,@R0
				MOV FOC_B,A
				INC R0
				MOV A,@R0
				MOV FOC_C,A
				INC R0
				MOV A,@R0
				MOV FOC_D,A
			
			CALL STATUS_2_SPIRITS
				MOV A,FOC_A		;READ POWER STATUS
				ANL A,#11110000B
 				CJNE A,#000H,READ_UPDATED_STAT_WIFIA_1	;IF IS IN POWER DOWN,DONT,WRITE THE SCREEN 4 DIGIT
					CALL CLR_VITRO_LED
					CALL CLR_WIFI_LED
					CALL SET_3_LED	
ret
				
				
				
				READ_UPDATED_STAT_WIFIA_1:


				;clear leds and 
;					CALL CLR_VITRO_LED
;					CALL CLR_WIFI_LED
;					CALL SET_3_LED

			CALL WIFI_DATA_2_SPIRITS	;must do something so to mantAIN clear display
				


;			CALL CLR_VITRO_LED		;OFF VITRO LED
SJMP  WIFI_SELECTED_MAIN_1



			READ_UPDATED_STAT_1WIFI:
			CALL WAIT_KEY_X
			CJNE A,#001H,READ_UPDATED_STAT_1WIFI
			READ_UPDATED_STAT_1WIFIA:
			CALL CLR_VITRO_LED
			;SEND POWER_OFF ORDER
				MOV A,FOC_A
				ANL A,#00001111B	;DELETE INSTRUCTION
				MOV FOC_A,A
				MOV FOC_B,#000H
				CALL SEND_CMD				

				CALL STATUS_2_SPIRITS
				CALL CLR_VITRO_LED
				CALL CLR_WIFI_LED
;				CALL CLR_3_LED
				CALL SET_3_LED
;				CALL CLR_3_LED
RET 
;_____________________________________________________























			CALL WAIT_KEY_X
			ANL A,#11100001B
		   	;JZ WIFI_SELECTED_MAIN_1
			JNZ WIFI_SELECTED_MAIN_OFF
				JMP  WIFI_SELECTED_MAIN_1
			
			
			
			WIFI_SELECTED_MAIN_OFF:
				CALL BUZZING
				MOV A,FOC_A
				ANL A,#00001111B	;DELETE INSTRUCTION
				MOV FOC_A,A
				MOV FOC_B,#000H
				CALL SEND_CMD				

				CALL STATUS_2_SPIRITS
				CALL CLR_VITRO_LED
				CALL CLR_WIFI_LED
;				CALL CLR_3_LED
				CALL SET_3_LED
RET
		   	WIFI_SELECTED_MAIN_OTHER_FIRE:	;SELECTED OTHER FIRE FROM KEYBOARD
				 NOP

RET
;______________________________________________________________________





;************************************************************************
;	selected flex mode
;************************************************************************
FLEX_SELECTED:
	CALL BUZZING
	SETB FLEX
	CALL FLEX_LED_SELECT_ON

RET








;************************************************************************8
;	SEND NEW COMMAND TO THE FIRE USINC FOC_A..FOC_B VALUES
;************************************************************************
SEND_CMD:
MOV SFRPAGE,#010H
	CLR TMR4CN0_TR4	;OPRESC TIMER 4,CA MOLESTA TIMER 5
MOV SFRPAGE,#000H


	MOV CLST,#'>'
	MOV INST,FOC_A
	MOV P1T,FOC_B
	MOV P0T,FOC_C
	MOV BD0T,FOC_D
	CALL SEND_COMMAND
MOV SFRPAGE,#010H
	SETB TMR4CN0_TR4	;START TIMER 4
MOV SFRPAGE,#000H
RET
;______________________________



;****************************************************************************
;	WAITING FOR TOOL DETECTED TO START POWER
;****************************************************************************
TEST_TOOL_PRESENT:
;	 JJKLJ
NOP
RET
;__________________________________________________________________________












			CALL CLR_VITRO_LED
			
			SJMP $













;	SELECTED_FIRE_1: ;080H
;		CJNE A,#080H,SELECTED_FIRE_2
			;VERIFIC STATUS
			MOV A,FOC1A
			ANL A,#0F0H
			CJNE A,#0E0H,SELECTED_FIRE_1_A
				MOV SG3,#006H	;1
				MOV SG4,#079H	;E			
			MOV A,FOC1B	;EROR DIG 1
				MOV B,A	;SAVE VALUE
				SWAP A
			ANL A,#000001111B	;FAC BCD
				MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				   	MOV SG5,A	;SEMNALEZ FOC FUTUT
				MOV A,B
			;MOV A,BD0R	;ERROR DIG 2
			ANL A,#000001111B	;FAC BCD
				MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				   	MOV SG6,A	;SEMNALEZ FOC FUTUT
			CALL KEY_SEL_2_SPIRIT
			CALL WRT_LED_8_DATA 
			JMP WAIT_FIRE_SELECT
		SELECTED_FIRE_1_A:		
			MOV FOC_A,FOC1A
			MOV FOC_B,FOC1B
			MOV FOC_C,FOC1C
			MOV FOC_D,FOC1D
				CALL STATUS_2_SPIRITS
				CALL KEY_SEL_2_SPIRIT 
			JMP WAIT_FIRE_SELECT_OUT
;	SELECTED_FIRE_2:;040H
;		CJNE A,#040H,SELECTED_FIRE_3
			MOV FOC_A,FOC2A
			MOV FOC_B,FOC2B
			MOV FOC_C,FOC2C
			MOV FOC_D,FOC2D
				CALL STATUS_2_SPIRITS
				CALL KEY_SEL_2_SPIRIT
		JMP WAIT_FIRE_SELECT_OUT
;	SELECTED_FIRE_3:;O20H
;		CJNE A,#020H,WAIT_FIRE_SELECT
			MOV FOC_A,FOC3A
			MOV FOC_B,FOC3B
			MOV FOC_C,FOC3C
			MOV FOC_D,FOC3D
				MOV A,FOC_A
			ANL A,#0F0H
			CJNE A,#0E0H,SELECTED_FIRE_3_A
				CALL ERROR_2_SPIRIT_SPACE
				CALL KEY_SEL_2_SPIRIT
			JMP WAIT_FIRE_SELECT
		SELECTED_FIRE_3_A:		
			MOV FOC_A,FOC3A
			MOV FOC_B,FOC3B
			MOV FOC_C,FOC3C
			MOV FOC_D,FOC3D
   	JMP WAIT_FIRE_SELECT


WAIT_FIRE_SELECT_OUT:


MAIN_FIRE_CONTROL:
;____________________	CONTINUE FIRE SELECTED
	;CHECK_FOR_ERROR
;	MAIN_FIRE_CONTROL_ERR_TEST:
;		MOV A,FOC_A
;		CJNE A,#'E',MAIN_FIRE_CONTROL_NO_ERR_TEST
		   	;SELECT CORESPONSING DISPLAY
;			MOV B,#03FH
;			MOV A,FOC_B	;FIRE NUMBER
;				ANL A,#00001111B	;CLEAR NOIMPORTANT
;			ADD A,B
;			MOV R0,A
;			MOV A,#079H		;E
;			MOV @R0,A
;			CALL WRT_LED_8_DATA
;		MAIN_FIRE_CONTROL_NO_ERR_TEST:
;			NOP

JMP WAIT_FIRE_SELECT


	MAIN_CONTORL_SELECT_WAY:	;SELECT INDUCTION OR WIRELESS
		SETB LDF1
		SETB LDF2
		SETB LDF3
		;LIGHT FIRE DIGIT LINE ,DINAMIC ADDRES ALOCATION
			MOV B,#03FH
			MOV A,FOC_A
			ANL A,#00000111B	;DELET NON NUMBER DIGIT
			ADD A,B
			MOV R0,A
			MOV A,#040H
			MOV @R0,A
			CALL WRT_LED_8_DATA
				CLR LD_W
				CLR LD_V
			
			MAIN_CONTORL_SELECT_WAY_1:
			CALL WAIT_KEY_X	
			MC_SEL_VITRO:
			   CJNE A,#004H,MC_SEL_WIFI
			   	MOV B,#03FH
					MOV A,FOC_A
					ANL A,#00000111B	;DELET NON NUMBER DIGIT
					ADD A,B
					MOV R0,A
					MOV A,#05CH	;FLASH SYMBOL
					MOV @R0,A
						CALL WRT_LED_8_DATA
					CALL WAIT_400MS	
				SJMP MAIN_CONTORL_SELECT_WAY_1
			MC_SEL_WIFI:
			   CJNE A,#002H,MAIN_CONTORL_SELECT_WAY_1
			   		MOV B,#03FH
					MOV A,FOC_A
					ANL A,#00000111B	;DELET NON NUMBER DIGIT
					ADD A,B
					MOV R0,A
					MOV A,#064H	;FLASH SYMBOL
					MOV @R0,A
						MOV SG4,#064H
						MOV SG5,#064H
						CALL WRT_LED_8_DATA	
					
						
					
					CALL WAIT_400MS
					SJMP MAIN_CONTORL_SELECT_WAY_1	



		;SELECT CORESPONSAL LED
		;SDS




SJMP $
RET




	;PRETEST
	MOV CLST,#'<'
	MOV INST,#'?'
	MOV P1T,#'1'
	MOV P0T,#'0'
	MOV BD0T,#'1'
;	MOV BD1T,#'2'
;	MOV BD2T,#'3'



tst:
CALL READ_STATUS
CALL SND_PCK
sjmp tst
SJMP $

	



;**********************************8
;**********************************8
TIMER_5_ISR:
		MOV SFRPAGE,#010H
	CLR TMR5CN0_TF5H
		MOV SFRPAGE,#000H
PUSH ACC
	DEC TIKT5
	MOV A,TIKT5
	CJNE A,#000H,TIMER_5_ISR_1
		SETB TOT
	TIMER_5_ISR_1:
POP ACC
RET
;___________________________


























SYSTEM_INIT:

	CLR FOCON		;STERG FLAGUL DE VITRO PORNIT,INCEP CU EA 
	CALL DISPLAY_OFF


	MOV PWR,#030H

KEYBOARD_INIT:
;******************************************************************
	;_____________________________
	CLR T_SEL
		MOV A,#0C9H
		CALL WR_BYT
			CALL WAIT_150_US
		MOV A,#000H
			CALL WR_BYT
			CALL WAIT_150_US
	SETB T_SEL
	
	CJNE A,#057H,KEYBOARD_INIT_ERR
	;____________________________________________
	
	CALL KEYB_TCH_INIT





	SJMP KEYBOARD_INIT_OUT
;____________________
	KEYBOARD_INIT_ERR:
		MOV SG3,#079H	;E
	   	MOV SG4,#040H	;-
		MOV SG5,#07DH	;6
		MOV SG6,#06FH	;9 
		MOV SG2,#000H
		MOV SG1,#000H
		MOV SG0,#000H

		CALL WRT_LED_8_DATA
		;_________________	SETEZ LUMOZITATE MAXIMA
		CLR STB
			MOV A,#08FH
			CALL WRT_BYTE_MCW
		SETB STB
		CALL WAIT_400MS
		CALL WAIT_400MS
		CALL WAIT_400MS
		CALL WAIT_400MS
		CALL WAIT_400MS
		CALL WAIT_400MS
		CALL WAIT_400MS
		CALL WAIT_400MS
;		CALL WAIT_400MS
;		CALL WAIT_400MS
;		CALL WAIT_400MS
;		CALL WAIT_400MS
;		CALL WAIT_400MS
;		CALL WAIT_400MS
;		CALL WAIT_400MS
			ORL RSTSRC,#010H	;RESET
	KEYBOARD_INIT_OUT:
RET
;_______________________________________________________






sjmp wait_key










































;________________	ASTEPT SA APAESE BUTON
WAIT_KEY:
	PLM:
;		CLR LD1
		JB FOCON,POWERED_ON
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
;		SETB LD1
		POWERED_ON:
		CALL WAIT_400MS
		JNB ALERT, WAIT_KEY_1
			SJMP PLM
	   WAIT_KEY_1:
	CALL READ_TCH_KEY
		CJNE A,#000H,WAITA
		SJMP WAIT_KEY
	WAITA:
;CJNE A,#0FFH,ON_OFF
;JMP WAIT_KEY
	NOP	
	
	
	ON_OFF:
	JB FOCON,TST_K0
;		CJNE A,#001H,WAIT_KEY
;		MOV A,P1
;		CJNE A,#0FDH,WAIT_KEY
			CALL BUZZING
			JNB FOCON,TST_K0_1		
			;SJMP 
	TST_K0:
		CJNE A,#001H,TST_K1
			CALL BUZZING
			JNB FOCON,TST_K0_1
			CLR FOCON
			CALL DISPLAY_OFF
				MOV PWR,#030H	;SETEZ PE PUTERE MICA
					MOV A,#'>'
					CALL SENDCHAR
					MOV A,#'1'
					CALL SENDCHAR
					MOV A,#'S'
					CALL SENDCHAR

				
				
				;mov a,#030h
				;call sendchar	;semnalez sa se opreasca
			
			
			
			
			
			
			JMP TST_K_OUT
		TST_K0_1:	
			CALL DISPLAY_INIT
			CALL CHECK_COM
			;DACA AM ERORI ,LE AFISEZ,DACA NU,STERG ECRANUL
			MOV A,ERHRD
			CJNE A,#000H,TST_K0_1_ERR
;				NOP
			TST_K0_1_NO_ERR:
				SJMP TST_K0_1_A
			TST_K0_1_ERR:
				MOV SG3,#079H	;E
				MOV SG4,#03FH	;0
					MOV DPTR,#SHW_DIG
					MOV A,ERHRD
					ANL A,#00FH		;UNDE ESTE SITUAT CODUL GRAFIC D EPUTERE
					MOVC A,@A+DPTR
					MOV SG5,A
				MOV SG6,#000H	;NADA
					CALL WRT_LED_8_DATA
			TST_K0_1_A:
			
			SETB FOCON
			CALL CLR_TCH_KEY
			
				JMP TST_K_OUT

	
	
	
	TST_K1:
	SJMP TST_K3
		CJNE A,#080H,TST_K2
			CALL K1_PRESSED
				JMP TST_K_OUT
	TST_K2:	;07FH 	DE FAPTE FOCUL 3 CA NU MERE MINUS
		CJNE A,#0BFH,TST_K3
			MOV A,P1
			CJNE A,#0BFH,TST_K_OUT
			CALL BUZZING
			CALL K2_PRESSED
				JMP TST_K_OUT		

	TST_K3:
;	CJNE 
;SJMP WAIT_KEY


	TST_K_PLUS:	;0FEH
		CJNE A,#008H,TST_K_MINUS
			CALL BUZZING
			CALL K_PLUS_PRESSED
			JMP TST_K_OUT

   	TST_K_MINUS:
		CJNE A,#010H,TST_K_OUT
			CALL BUZZING
			CALL K_MINUS_PRESSED
			JMP TST_K_OUT	















	TST_K_OUT:
	CALL CLR_TCH_KEY
JMP WAIT_KEY
		TST_K_OUT_1:
		NOP
		NOP
		JMP TST_K_OUT




	K1_PRESSED:
			MOV SG6,#080H	;SEMNALEZ CA ESTE SELECTAT FOCUL 1
			CALL WRT_LED_8_DATA
			CALL MODE_SELECT
	
	
	
	
	
	RET
	;________________________

	K2_PRESSED:
			MOV SG5,#080H	;SEMNALEZ CA ESTE SELECTAT FOCUL 1
			CALL WRT_LED_8_DATA
	RET
	;________________________
	K3_PRESSED:



	KX_PRESSED:
	SJMP $

;**************************************************************8
	K_PLUS_PRESSED:
	MOV A,PWR
	CJNE A,#039H,K_PLUS_PRESSED_1	;LIMITAT LA 9
RET
	
	K_PLUS_PRESSED_1:
	INC A
	MOV PWR,A
	ANL A,#00FH
	CALL HEX_2_7SEG
	MOV SG2,B
	CALL WRT_LED_8_DATA
		MOV A,#'>'
		CALL SENDCHAR
		MOV A,#'1'
		CALL SENDCHAR
		MOV A,#'P'
		CALL SENDCHAR
		MOV A,PWR 			;TRIMIT SI PUTEREA CERUTA
		CALL SENDCHAR

RET
;_______________________________________________________________


;**************************************************************8
	K_MINUS_PRESSED:
	MOV A,PWR
	CJNE A,#031H,K_MINUS_PRESSED_1
RET
	K_MINUS_PRESSED_1:
	MOV A,PWR
	DEC A
	MOV PWR,A
	ANL A,#00FH
	CALL HEX_2_7SEG
	MOV SG2,B
	CALL WRT_LED_8_DATA
		MOV A,#'>'
		CALL SENDCHAR
		MOV A,#'1'
		CALL SENDCHAR
		MOV A,#'P'
		CALL SENDCHAR
		MOV A,PWR 			;TRIMIT SI PUTEREA CERUTA
		CALL SENDCHAR

RET
;_______________________________________________________________














;******************************************************************************************
;		FOC SELECT MOD
;******************************************************************************************
MODE_SELECT:
	;ASTEPT SA SE INTOARCA IN FF TASTA



	MOV A,P1
	CJNE A,#0FFH,MODE_SELECT
	MODE_SELECT_A:
	MOV A,P1
	CJNE A,#0FFH, MODE_SELECT_1
	SJMP MODE_SELECT_A
	MODE_SELECT_1:
	CALL BUZZING
	;F7-VITRO
	;FB-WIFI
	VITRO_SEL:
;		CJNE A,#0F7H,WIFI_SEL
		;TRIMIT SEMNAL DE DETECTIE VITRO LA PLACA
		MOV R2,#005H
			MOV SG0,#006H
			MOV SG1,#000H
			MOV SG2,#000H
			MOV SG3,#000H
			CALL WRT_LED_8_DATA
			;ASTEPT SA DETECTEZE VITR
			;DACA NU A DETECTAT LA PRIMA ,ASTEPT 1 SEC ,PIUIE SI DINCERC DIN NOU
			CALL WAIT_400MS
			CALL WAIT_400MS
			CALL BUZZING

			MOV SG0,#000H
			MOV SG1,#006H
			MOV SG2,#000H
			MOV SG3,#000H
			CALL WRT_LED_8_DATA
			;ASTEPT SA DETECTEZE VITR
			;DACA NU A DETECTAT LA PRIMA ,ASTEPT 1 SEC ,PIUIE SI DINCERC DIN NOU
			CALL WAIT_400MS
			CALL WAIT_400MS
			CALL BUZZING

			MOV SG0,#000H
			MOV SG1,#000H
			MOV SG2,#006H
			MOV SG3,#000H
			CALL WRT_LED_8_DATA
			;ASTEPT SA DETECTEZE VITR
			;DACA NU A DETECTAT LA PRIMA ,ASTEPT 1 SEC ,PIUIE SI DINCERC DIN NOU
			CALL WAIT_400MS
			CALL WAIT_400MS
			CALL BUZZING

			MOV SG0,#000H
			MOV SG1,#000H
			MOV SG2,#000H
			MOV SG3,#006H
			CALL WRT_LED_8_DATA
			;ASTEPT SA DETECTEZE VITR
			;DACA NU A DETECTAT LA PRIMA ,ASTEPT 1 SEC ,PIUIE SI DINCERC DIN NOU
			CALL WAIT_400MS
;			CALL WAIT_400MS
;			CALL BUZZING
			CALL BUZZING
			CALL BUZZING
			
			
			MOV FOC1,#01H	;PUTERE UNU
			
			
			SHOW_POWER:
			MOV DPTR,#SHW_DIG
			
			MOV A,FOC1
			ANL A,#00FH		;UNDE ESTE SITUAT CODUL GRAFIC D EPUTERE
			MOVC A,@A+DPTR
			MOV SG6,A
			CALL WRT_LED_8_DATA
			CALL WAIT_400MS
			
			
				
			WAIT_33:
			MOV A,P1
			CJNE A,#0FFH,WAIT_331
				SJMP WAIT_33
			WAIT_331:
				
				NOP
				INC FOC1
				MOV A,FOC1
			ANL A,#00FH		;UNDE ESTE SITUAT CODUL GRAFIC D EPUTERE
			MOVC A,@A+DPTR
			MOV SG6,A
			CALL WRT_LED_8_DATA
			CALL BUZZING
			CALL WAIT_400MS
			SJMP WAIT_33
			
			
				;EF-MINUS
				;FE-PLUS
			
			
			
			
			
			
			
			
			
			JMP OUT_SEL

	WIFI_SEL:
		CJNE A,#0FBH,OUT_SEL
		MOV R2,#004H
		DISPLAYPLM:
			MOV SG0,#008H
			MOV SG1,#008H
			MOV SG2,#008H
			MOV SG3,#008H
			CALL WRT_LED_8_DATA
;			CALL WAIT_400MS
			CALL WAIT_400MS
				MOV SG0,#040H
				MOV SG1,#040H
				MOV SG2,#040H
				MOV SG3,#040H
				CALL WRT_LED_8_DATA
				CALL WAIT_400MS
;				CALL WAIT_400MS
			
			 	MOV SG0,#001H
				MOV SG1,#001H
				MOV SG2,#001H
				MOV SG3,#001H
				CALL WRT_LED_8_DATA
				CALL WAIT_400MS
;				CALL WAIT_400MS
			
			
			
			DJNZ R2,DISPLAYPLM
			
			
			
			MOV SG0,#010H
			MOV SG1,#010H
			MOV SG2,#010H
			MOV SG3,#010H
			CALL WRT_LED_8_DATA
			CALL WAIT_400MS
			CALL WAIT_400MS
				MOV SG0,#020H
				MOV SG1,#020H
				MOV SG2,#020H
				MOV SG3,#020H
				CALL WRT_LED_8_DATA
				CALL WAIT_400MS
				CALL WAIT_400MS


			
			
			
			
			
			
			JMP OUT_SEL





    OUT_SEL:
		

RET




;********************************************************************************888
	;_______________________________________
	;TESTEZ PREZENTZA PROCESOARE,LINK SERIAL
;**********************************************************************************
CHECK_COM:
	CALL GET_STATUS_1
	CALL GET_STATUS_2
	CALL GET_STATUS_3
	SETB LD_P	;STOP LED SIGNAL
RET


;************************************************************************************
;************************************************************************************
GET_STATUS_1:
	;TEMPLATE_STATUS
	MOV CLST,#'<'
	MOV INST,#'?'
	MOV P1T,#'1'
	MOV P0T,#'U'
	;___________________________

	CHECK_1:
		CALL READ_STATUS
	CALL LOAD_SIMULATE_F1_NO_ERROR
;	CALL LOAD_SIMULATE_1_P5
;	CALL LOAD_SIMULATE_ER_07
;	CLR ERR
		MOV FOC1A,INSR
		MOV FOC1B,P1R
		MOV FOC1C,P0R	;UPDATE STATUS REGISTER
		MOV FOC1D,BD0R






		JB ERR,CHECK1_A	;ERRO DETECTED DISPLAY MESAGE
		;DISPLAY STATUS/ERROR
		MOV A,INSR
		ANL A,#0F0H	;STERG NESEMNIFICATIV
			MOV FOC1A,INSR
			MOV FOC1B,P1R
			MOV FOC1C,P0R	;UPDATE STATUS REGISTER
		    MOV FOC1D,BD0R
		CHECK_1_STB:
		CJNE A,#000H,CHECK_1_VITRO
					MOV SG3,#000H
					MOV SG4,#000H
					MOV SG5,#000H
					MOV SG6,#000H

		CALL WRT_LED_8_DATA
RET		
		CHECK_1_VITRO:
		CJNE A,#010H,CHECK_1_WIFI
			NOP
		CHECK_1_WIFI:
		CJNE A,#020H,CHECK_1_ERROR
			NOP
		CHECK_1_ERROR:
		;MUST BE E
		CJNE A,#0E0H,CHECK_1_XXX
		CLR LD_P
			MOV FOC1A,INSR
			MOV FOC1B,P1R
			MOV FOC1C,P0R	;UPDATE STATUS REGISTER
		    MOV FOC1D,BD0R
				MOV SG0,#079H	;E
				MOV SG3,#079H	;E
				MOV SG4,#040H	;-
			
			MOV A,P1R	;EROR DIG 1
				MOV B,A	;SAVE VALUE
				SWAP A
			ANL A,#000001111B	;FAC BCD
				MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				   	MOV SG5,A	;SEMNALEZ FOC FUTUT
				MOV A,B
			;MOV A,BD0R	;ERROR DIG 2
			ANL A,#000001111B	;FAC BCD
				MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				   	MOV SG6,A	;SEMNALEZ FOC FUTUT
			CALL WRT_LED_8_DATA
			CALL  WAIT_KEY_PLUS_CONTINUE
				MOV SG3,#000H
				MOV SG4,#000H
				MOV SG5,#000H
				MOV SG6,#000H

			;__________	IF ERR-01=NO RADIO,CLEAR E SYMBOL
				MOV A,P1R
				CJNE A,#001H,CHECK_1_XXX
				MOV SG0,#000H
					
				CALL WRT_LED_8_DATA

RET
		CHECK_1_XXX:
			CALL WRT_LED_8_DATA
RET		

		
		CHECK1_A: 	;NO COMUNICATION 
		   CLR LD_P
			MOV FOC3A,#0E1H
			MOV FOC3B,#000H
			MOV FOC3C,#000H	;UPDATE STATUS REGISTER
		    MOV FOC3D,#000H
			
			MOV SG0,#079H	;E
			MOV SG3,#079H	;E
			MOV SG4,#040H	;-
			MOV SG5,#03FH	;0
			MOV SG6,#03FH	;0
			
			CALL WRT_LED_8_DATA
			CALL WAIT_KEY_PLUS_CONTINUE
RET
;_____________________________________________________________________________

;************************************************************************************
;************************************************************************************
GET_STATUS_2:
	;TEMPLATE_STATUS
	MOV CLST,#'<'
	MOV INST,#'?'
	MOV P1T,#'2'
	MOV P0T,#'U'
	;___________________________

	CHECK_2:
		CALL READ_STATUS
	CALL LOAD_SIMULATE_F2_NO_ERROR
;	CALL LOAD_SIMULATE_2_R
;	CALL LOAD_SIMULATE_ER_01
;	CLR ERR
		JB ERR,CHECK2_A	;ERRO DETECTED DISPLAY MESAGE
		;DISPLAY STATUS/ERROR
		MOV A,INSR
		ANL A,#0F0H	;STERG NESEMNIFICATIV
			MOV FOC2A,INSR
			MOV FOC2B,P1R
			MOV FOC2C,P0R	;UPDATE STATUS REGISTER
		    MOV FOC2D,BD0R
		CHECK_2_STB:
		CJNE A,#000H,CHECK_2_VITRO
;			MOV FOC2A,#'0'		;PUT STATUS
			MOV SG1,#000H
		CALL WRT_LED_8_DATA
RET		
		CHECK_2_VITRO:
		CJNE A,#010H,CHECK_2_WIFI
			NOP
		CHECK_2_WIFI:
		CJNE A,#020H,CHECK_2_ERROR
			NOP
		CHECK_2_ERROR:
		;MUST BE E
		CJNE A,#0E0H,CHECK_2_XXX
		CLR LD_P
			MOV FOC2A,INSR
			MOV FOC2B,P1R
			MOV FOC2C,P0R	;UPDATE STATUS REGISTER
		    MOV FOC2D,BD0R
				MOV SG1,#079H	;E
				MOV SG3,#079H	;E
				MOV SG4,#040H	;-
			
			MOV A,P1R	;EROR DIG 1
				MOV B,A	;SAVE VALUE
				SWAP A
			ANL A,#000001111B	;FAC BCD
				MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				   	MOV SG5,A	;SEMNALEZ FOC FUTUT
				MOV A,B
			;MOV A,BD0R	;ERROR DIG 2
			ANL A,#000001111B	;FAC BCD
				MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				   	MOV SG6,A	;SEMNALEZ FOC FUTUT
			CALL WRT_LED_8_DATA
			CALL  WAIT_KEY_PLUS_CONTINUE
				MOV SG3,#000H
				MOV SG4,#000H
				MOV SG5,#000H
				MOV SG6,#000H

			;__________	IF ERR-01=NO RADIO,CLEAR E SYMBOL
				MOV A,P1R
				CJNE A,#001H,CHECK_2_XXX
				MOV SG1,#000H
				CALL WRT_LED_8_DATA
RET
		CHECK_2_XXX:
			CALL WRT_LED_8_DATA
RET		

		
		CHECK2_A: 	;NO COMUNICATION 
		CLR LD_P
			MOV FOC3A,#0E2H
			MOV FOC3B,#000H
			MOV FOC3C,#000H	;UPDATE STATUS REGISTER
		    MOV FOC3D,#000H
			
			MOV SG1,#079H	;E
			MOV SG3,#079H	;E
			MOV SG4,#040H	;-
			MOV SG5,#03FH	;0
			MOV SG6,#03FH	;0
			CALL WRT_LED_8_DATA
			CALL WAIT_KEY_PLUS_CONTINUE
RET
;_____________________________________________________________________________

;************************************************************************************
;************************************************************************************
GET_STATUS_3:
	;TEMPLATE_STATUS
	MOV CLST,#'<'
	MOV INST,#'?'
	MOV P1T,#'3'
	MOV P0T,#'U'
	;___________________________

	CHECK_3:
		CALL READ_STATUS
;	CALL LOAD_SIMULATE_NO_ERROR
;	CALL LOAD_SIMULATE_ER_04
;	CLR ERR
		JB ERR,CHECK3_A	;ERRO DETECTED DISPLAY MESAGE
		;DISPLAY STATUS/ERROR
		MOV A,INSR
		ANL A,#0F0H	;STERG NESEMNIFICATIV
		CHECK_3_STB:
		CJNE A,#'0',CHECK_3_VITRO
			MOV FOC3A,#'0'		;PUT STATUS
			MOV SG2,#000H
				MOV SG3,#000H
				MOV SG4,#000H
				MOV SG5,#000H
				MOV SG6,#000H

		CALL WRT_LED_8_DATA
RET		
		CHECK_3_VITRO:
		CJNE A,#'P',CHECK_3_WIFI
			NOP
		CHECK_3_WIFI:
		CJNE A,#'R',CHECK_3_ERROR
			NOP
		CHECK_3_ERROR:
		CLR LD_P
		;MUST BE E
			MOV FOC3A,INSR
			MOV FOC3B,P1R
			MOV FOC3C,P0R	;UPDATE STATUS REGISTER
		    MOV FOC3D,BD0R
				MOV SG2,#079H	;E
				MOV SG3,#079H	;E
				MOV SG4,#040H	;-
			
			MOV A,P1R	;EROR DIG 1
				MOV B,A	;SAVE VALUE
				SWAP A
			ANL A,#000001111B	;FAC BCD
				MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				   	MOV SG5,A	;SEMNALEZ FOC FUTUT
				MOV A,B
			;MOV A,BD0R	;ERROR DIG 2
			ANL A,#000001111B	;FAC BCD
				MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				   	MOV SG6,A	;SEMNALEZ FOC FUTUT
			CALL WRT_LED_8_DATA
			CALL  WAIT_KEY_PLUS_CONTINUE
				MOV SG3,#000H
				MOV SG4,#000H
				MOV SG5,#000H
				MOV SG6,#000H
				CALL WRT_LED_8_DATA

			;__________	IF ERR-01=NO RADIO,CLEAR E SYMBOL
				MOV A,P1R
				CJNE A,#001H,CHECK_3_XXX
				MOV SG1,#000H
				CALL WRT_LED_8_DATA
RET
		CHECK_3_XXX:
RET		

		
		CHECK3_A: 	;NO COMUNICATION 
		CLR LD_P
			MOV FOC3A,#0E3H
			MOV FOC3B,#000H
			MOV FOC3C,#000H	;UPDATE STATUS REGISTER
		    MOV FOC3D,#000H
			
			MOV SG2,#079H	;E
			MOV SG3,#079H	;E
			MOV SG4,#040H	;-
			MOV SG5,#03FH	;0
			MOV SG6,#03FH	;0
				CALL WRT_LED_8_DATA
			CALL WAIT_KEY_PLUS_CONTINUE
				MOV SG3,#000H	;
				MOV SG4,#000H	;
				MOV SG5,#000H	;
				MOV SG6,#000H	;
				CALL WRT_LED_8_DATA
RET
;_____________________________________________________________________________



































;************************************************************8
WAIT_KEY_PLUS_CONTINUE:		;WAIT TO PRESS KEY +
	CALL CLR_TCH_KEY
			;__________	WAIT_KEY + PRESS
			WAIT_KEY_PLUS_CONTINUE_1:
				CALL WAIT_400MS
				JB ALERT, WAIT_KEY_PLUS_CONTINUE_1
				CALL READ_TCH_KEY
				MOV B,A
				CALL CLR_TCH_KEY
				MOV A,B
				CJNE A,#008H,WAIT_KEY_PLUS_CONTINUE_1	;CIUDAT ASTEAPTA DOUA APASARI
RET
;________________________________________________________

;************************************************************8
WAIT_KEY_ON_OFF:		;WAIT TO PRESS KEY +
	CALL CLR_TCH_KEY
			;__________	WAIT_KEY + PRESS
			WAIT_KEY_ON_OFF_1:
				CALL WAIT_400MS
				JB ALERT, WAIT_KEY_ON_OFF_1
				CALL READ_TCH_KEY
					MOV A,KEY_H
					CJNE A,#000H,TS_AUX_A
					   SJMP TST_ON_OFF_A
					TS_AUX_A:
						CJNE A,#004H,WAIT_KEY_ON_OFF_1
						MOV A,KEY_L
						CJNE A,#000H,WAIT_KEY_ON_OFF_1
						TST_AX_ON_OFF:
							JNB AUX_0,TST_AUX_B
							CALL SET_AUX_0_OFF
		SJMP WAIT_KEY_ON_OFF
						TST_AUX_B:
							CALL SET_AUX_0_ON
		SJMP WAIT_KEY_ON_OFF
					
					TST_ON_OFF_A:
					MOV A,KEY_L
					CJNE A,#001H,WAIT_KEY_ON_OFF_1
					;SJMP WAIT_KEY_ON_OFF_1
				WAIT_KEY_ON_OFF_2:
				CALL CLR_TCH_KEY
;				MOV A,B
;				CJNE A,#001H,WAIT_KEY_ON_OFF_1	;
RET
	TEST_KEY_AUX:

;________________________________________________________

;********************************************************
SET_AUX_0_ON:
	CALL BUZZING
	SETB AUX_0
	CLR LD_AX
	MOV FOC_A,#060H
	MOV FOC_B,#000H
	MOV FOC_C,#00FH
	MOV FOC_D,#00FH

	CALL SEND_CMD
RET
;___________________________________________________________

;********************************************************
SET_AUX_0_OFF:
	CALL BUZZING
	CLR AUX_0
	SETB LD_AX
		MOV FOC_A,#060H
		MOV FOC_B,#000H
		MOV FOC_C,#000H
		MOV FOC_D,#00FH
		CALL SEND_CMD
RET
;___________________________________________________________








;****************************************************************
LOAD_STATUS_TEMPLATE:	;PREPARING VALUES FOR STATUS INQUIRE
	MOV CLST,#'<'
	MOV INST,#'?'
	MOV P1T,#'1'
	MOV P0T,#'U'
RET
;________________________________________________________________

LOAD_SIMULATE_F1_NO_ERROR:
RET
	MOV CLSR,#'<'
	MOV INSR,#001H	;0-STANDBY P=PUTERE VITRO,R-PUTERE RADIO,E=EROARE
	MOV P1R,#000H	;PARAMETRU
	MOV P0R,#055H
	MOV BD0R,#0AAH
;	MOV BD1R,#'0'
;	MOV BD2R,#'0'
	MOV CRCR,#'0'
CLR ERR
RET
;________________________________________________________________

LOAD_SIMULATE_F2_NO_ERROR:
	MOV CLSR,#'<'
	MOV INSR,#002H	;0-STANDBY P=PUTERE VITRO,R-PUTERE RADIO,E=EROARE
	MOV P1R,#000H	;PARAMETRU
	MOV P0R,#055H
	MOV BD0R,#0AAH
;	MOV BD1R,#'0'
;	MOV BD2R,#'0'
	MOV CRCR,#'0'
CLR ERR
RET
;________________________________________________________________

LOAD_SIMULATE_1_P5:
	MOV CLSR,#'<'
	MOV INSR,#011H	;0-STANDBY P=PUTERE VITRO,R-PUTERE RADIO,E=EROARE
;	MOV P1R,#00AH	;PARAMETRU
	MOV P1R,#000H
	MOV P0R,#055H
	MOV BD0R,#0AAH
;	MOV BD1R,#'0'
;	MOV BD2R,#'0'
	MOV CRCR,#'0'
CLR ERR
RET
;________________________________________________________________

LOAD_SIMULATE_2_R:
	MOV CLSR,#'<'
	MOV INSR,#022H	;0-STANDBY P=PUTERE VITRO,R-PUTERE RADIO,E=EROARE
	MOV P1R,#005H	;PARAMETRU
	MOV P0R,#055H
	MOV BD0R,#0AAH
;	MOV BD1R,#'0'
;	MOV BD2R,#'0'
	MOV CRCR,#'0'
CLR ERR
RET
;________________________________________________________________






LOAD_SIMULATE_ER_07:
	MOV CLSR,#'<'
	MOV INSR,#0E1H
	MOV P1R,#007H
	MOV P0R,#0AAH	;DUMB
	MOV BD0R,#055H	;DUMB
	MOV CRCR,#'0'
CLR ERR
RET
;________________________________________________________________

LOAD_SIMULATE_ER_01:
	MOV CLSR,#'<'
	MOV INSR,#0E1H
	MOV P1R,#001H
	MOV P0R,#0AAH	;DUMB
	MOV BD0R,#055H	;DUMB
	MOV CRCR,#'0'
CLR ERR
RET
;________________________________________________________________

LOAD_SIMULATE_ER_02:
	MOV CLSR,#'<'
	MOV INSR,#0E1H
	MOV P1R,#002H
	MOV P0R,#0AAH	;DUMB
	MOV BD0R,#055H	;DUMB
	MOV CRCR,#'0'
CLR ERR
RET
;________________________________________________________________

LOAD_SIMULATE_ER_F3_04:
		MOV CLSR,#'<'
	MOV INSR,#0E3H
	MOV P1R,#004H
	MOV P0R,#0AAH	;DUMB
	MOV BD0R,#055H	;DUMB
	MOV CRCR,#'0'
CLR ERR
RET
;________________________________________________________________






;***********************************************************************
;		TRIMIT SEMNAL D EBUZER	 USING TIMER 2 TO STOP
;***********************************************************************
BUZZING:
PUSH ACC
	MOV XBR1,#001H
	mov  PCA0CPM0,  #046h	;PORNESC PWM  PT BUZER
;	MOV R1,#002D
	BUZZING_1:
	MOV TICKT2,#04H
	MOV TICKT2,#03H

	CLR TOT_T2
	SETB TMR2CN0_TR2
	JNB TOT_T2,$
		CLR TOT_T2
	mov  PCA0CPM0,  #000h	;OPRESC DE FAPT FAC SOFTWARE CAPTURE..PLM 
	MOV XBR1,#000H

	CLR BUZZ

POP ACC
RET

;***********************************************
WAIT_4MS:
	MOV R0,#0C8H
	WAIT_4MS_1:
		CLR TCON_TF0
		jNb TCON_TF0,$	;ASTEPT TIMER0,ADICA 500US
		DJNZ R0,WAIT_4MS_1
RET
;________________________________________________

WAIT_400MS:
PUSH 000H
PUSH 001H
	MOV R1,#0100D
;	MOV R1,#0050D
	WAIT_400MS_1:
	CALL WAIT_4MS
	DJNZ R1,WAIT_400MS_1
POP 000H
POP 001H
RET
;__________________________________________


;*****************************************
WAIT_150_US:
	MOV R0,#000H
	DJNZ R0,$
	MOV R0,#000H
	DJNZ R0,$
	MOV R0,#080H
	DJNZ R0,$

RET
;____________________











TEST_STRING:
   CLR STB
   	MOV A,#040H
	CALL WRT_BYTE_MCW
	SETB STB
	CALL WAIT_MCW
   
   	CLR STB
   	MOV A,#0C0H
	CALL WRT_BYTE_MCW
;	SETB STB
	CALL WAIT_MCW
   
MOV R7,#003H   
   TEST_STRING_1:
	MOV A,#039H
;    CLR STB
	CALL WRT_SEG_DATA_MCW

;	SETB STB
;	CALL WAIT_MCW

	DEC R7
	MOV A,R7
	CJNE A,#000H,TEST_STRING_1


	MOV A,#073H
;    CLR STB
;   	MOV A,#0C0H
	MOV B,A
	CALL WRT_BYTE_MCW
	
	CALL WAIT_MCW
	MOV A,B
	SWAP A
	CALL WRT_BYTE_MCW


	SETB STB
SJMP $
   















;SCRIIU UN BYTE MICROWIRE SOFTWARE
WRT_BYTE_MCW:
	MOV R0,#008H
	WRT_BYTE_MCW_1:
		CLR CLK
		RRC A
		MOV DIO,C
	CALL WAIT_MCW
		
		SETB CLK
	CALL WAIT_MCW
		DJNZ R0,WRT_BYTE_MCW_1
	SETB DIO
RET
;____________________________________________

;****************************************
;	se face in doi biti LOW.HIGH NIBLE
;****************************************
WRT_SEG_DATA_MCW:
	MOV B,A
	CALL WRT_BYTE_MCW
	NOP
	NOP
	NOP
	MOV A,B
	SWAP A		;HIGH NIBLE
	CALL WRT_BYTE_MCW 
RET
;________________________________________



;CITESC UN BYTE IN SOFTWARE MICROWIRE

READ_BYT_MCW:
	MOV R0,#008H
	CLR A
		READ_BYT_MCW_1:
			CLR CLK
			
			MOV C,DIO
		CALL WAIT_MCW	
			RLC A
			SETB CLK
		CALL WAIT_MCW
			DJNZ R0,READ_BYT_MCW_1
RET
;____________________________________________


WAIT_MCW:
	MOV R1,#020H
	DJNZ R1,$
RET
;_______________________________




	
	






;*******************************************************
;	SCRIUU UN SEGMENT DE DISPLAY
;	DATA ESTE IN A,ADRESA ESTE IN B
;*******************************************************
WRT_SEG:
	CLR STB	
;PUSH ACC
		MOV A,#044H	 ;FIXED MODE ADRESS
		CALL WRT_BYTE_MCW
;		POP ACC
	SETB STB
CALL WAIT_MCW
;__________________________________________	
	CLR STB
		MOV A,GRID	;SCRIU ADRESA SEGMENT
		MOV B,A
		CALL WRT_BYTE_MCW
			CALL WAIT_MCW
;		MOV A,B
;		SWAP A
;		CALL WRT_BYTE_MCW
;			CALL WAIT_MCW
;	CALL WAIT_MCW
		
		MOV A,SGM	;SCRIU DATELE SEGMENT
		MOV B,A
		CALL WRT_BYTE_MCW
			CALL WAIT_MCW
		MOV A,B
		SWAP A
		CALL WRT_BYTE_MCW
			CALL WAIT_MCW	
	SETB STB   
;____________________________________________________	   
RET	   
	   
	   
	   ;CALL WRT_BYTE_MCW	;SCRIU VALOREA DE DISPLAY
CALL WAIT_MCW

	
	CLR STB
		MOV A,#08FH
		CALL WRT_BYTE_MCW
	SETB STB
RET
;________________________________________________________			  	
		  

;	INITIALIZEZ DISPLAY CELE TREI FOCURI UN SIMBOL,CELE 4 CCCP
;*********************************************************************8
DISPLAY_INIT:
;	MOV SG3,#039H
;	MOV SG4,#039H
;	MOV SG5,#039H 	;CCCP DISPLAY 4
;	MOV SG6,#073H
;________________________

   	MOV SG3,#039H
	MOV SG4,#039H
	MOV SG5,#078H 	;CCT DISPLAY
	MOV SG6,#000H
;________________________




;	MOV SG6,#03EH
;	MOV SG5,#06DH
;	MOV SG4,#0F7H

;	A=01 B=02 C=04 D=08
;	E=10 F=20 G=40 DP=80

;	MOV SG0,#006H  ;UNU
;	MOV SG1,#05BH 	;DOI
;	MOV SG2,#04FH	;TREI

   	MOV SG0,#000H  ;ZERO
	MOV SG1,#000H 	;ZERO
	MOV SG2,#000H	;ZERO



;	MOV SG0,#0FFH
;	MOV SG1,#0FFH
;	MOV SG2,#0FFH
;	MOV SG3,#0FFH
;	MOV SG4,#0FFH
;	MOV SG5,#0FFH
;	MOV SG6,#0FFH
;	MOV SG7,#0FFH





	CALL WRT_LED_8_DATA

	;_________________	SETEZ LUMOZITATE MAXIMA
	CLR STB
		MOV A,#08FH
		CALL WRT_BYTE_MCW
	SETB STB
RET
;________________________________________________________

DISPLAY_OFF:
	;_________________	SETEZ LUMOZITATE MINIMA
	CLR STB
		MOV A,#080H
		CALL WRT_BYTE_MCW
	SETB STB
RET
;_______________________________________________________



TIMER_2_ISR:
PUSH ACC
   	CLR TMR2CN0_TF2H
	DEC TICKT2
	MOV A,TICKT2
	CJNE A,#000H,TIMER_2_ISR_OUT
   		SETB TOT_T2
	   ;	JNB TOT_T2,$
;		CLR TOT_T2
;	mov  PCA0CPM0,  #000h	;OPRESC DE FAPT FAC SOFTWARE CAPTURE..PLM 
;	MOV XBR1,#000H

;	CLR BUZZ;	JNB TOT_T2,$
;		CLR TOT_T2
;	mov  PCA0CPM0,  #000h	;OPRESC DE FAPT FAC SOFTWARE CAPTURE..PLM 
;	MOV XBR1,#000H
;	CLR BUZZ
	
	
	
	
	TIMER_2_ISR_OUT:

POP ACC
RET
;________________________________________________________


;**************************************************************************************
;		RUTINE PENTRU KEYBOARD
;**************************************************************************************
READ_TCH_KEY: 		;CITESC VALOAREA TASTA
PUSH ACC
	CLR T_SEL
		MOV A,#0C1H
		CALL WR_BYT
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			MOV KEY_H,A
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			MOV KEY_L,A
	SETB T_SEL
POP ACC
RET
;____________________________________________________________________________________





;*******************************************************
;	SEND PACKET 8B BIT	WITH 2 BIT ACK TOT=500MS  AND 
;*******************************************************
SND_PCK:
		MOV SFRPAGE,#010H
	MOV TMR5H ,#TIME5H
	MOV TMR5L ,#TIME5L
		MOV SFRPAGE,#000H
	MOV TIKT5,#003H
	CLR TOT
	CLR ERR
	;_____________________
	MOV R0,#024H	;CLST ADDRES
	MOV B,#0A5H		;START CRC VALUE
	SND_PCK_1:
		MOV A,@R0
		CALL SENDCHAR
		ADD A,B
		MOV B,A
		INC R0
		CJNE R0,#02AH,SND_PCK_1
		MOV A,B
		CALL SENDCHAR
	;___________________________
	;SET TIMER
CLR DBG
		MOV SFRPAGE,#010H
	SETB TMR5CN0_TR5	;START TIMER 5
		MOV SFRPAGE,#000H
		MOV A,#055H	;SA FIE CEVA IN BUFER	
 	SND_PCK_WAIT_ACK:
		CALL GETCHAR_TOT
		CJNE A,#'O',SND_PCK_NO_ACK
		CALL GETCHAR_TOT
		CJNE A,#'K',SND_PCK_NO_ACK
	SND_PCK_ACK:
		CLR ERR
		CLR TOT
MOV SFRPAGE,#010H
	CLR TMR5CN0_TR5	;STOP TIMER 5
MOV SFRPAGE,#000H
SETB DBG
RET
	SND_PCK_NO_ACK:
		SETB ERR
		CLR TOT
MOV SFRPAGE,#010H
	CLR TMR5CN0_TR5	;STOP TIMER 5
MOV SFRPAGE,#000H
SETB DBG
RET
;________________________________________________________





;*******************************************************************
;	UPDATE STATUS TO RAM AND SPIRIT
;*******************************************************************
UPDATE_STATUS:

RET
;__________________________________________________________________________











;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;			RUTI0NE UART
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;____________________________________________________________________
                                                         ; SENDSTRI0NG

SENDSTRING:     ; sends ASCII stRI0ng to UART starTI0ng at locaTI0on
                ; DPTR and ending with a null (0) value

        PUSH    ACC
        PUSH    B
        CLR     A
        MOV     B,A
IO0010: CLR     A
        MOVC    A,@A+DPTR
        INC     DPTR
		JZ      IO0020
        CALL    SENDCHAR
        JMP     IO0010
IO0020: POP     B
        POP     ACC

        RET

;____________________________________________________________________
                                                           ; SENDCHAR

SENDCHAR:       ; sends ASCII value contained in A to UART
        JNB     SCON0_TI,$            ; wait TI0l present char gone
        CLR     SCON0_TI             ; must clear TI0
        MOV     SBUF0,A
        RET
;____________________________________________________________________
                                                            ; SENDVAL

SENDVAL:        ; converts the hex value of A into two ASCII chars,
		; and then spits these two characters up the UART.
                ; does not change the value of A.

        PUSH    ACC
        SWAP    A
        CALL    HEX2ASCII
        CALL    SENDCHAR        ; send high nibble
        POP     ACC
        PUSH    ACC
        CALL    HEX2ASCII
        CALL    SENDCHAR        ; send low nibble
        POP     ACC
        RET

;____________________________________________________________________
                                                          ; HEX2ASCII

HEX2ASCII:      ; converts A into the hex character represenTI0ng the
                ; value of A's least significant nibble

        ANL     A,#00Fh
        CJNE    A,#00Ah,$+3
        JC      IO0030
        ADD     A,#007h
IO0030: ADD     A,#'0'

        RET

;____________________________________________________________________
                                                          ; ASCII2HEX

ASCII2HEX:      ; converts A from an ASCII digit ('0'-'9' or 'A'-'F')
                ; into the corresponding number (0-15).  returns C=1
                ; when input is other than an ASCII digit,
                ; indicaTI0ng invalid output (returned as 255).

        CLR     C
        SUBB    A,#'0'
        CJNE    A,#10,$+3
        JC      IO0050          ; if '0'<=char<='9', return OK
        CJNE    A,#17,$+3
        JC      IO0040          ; if '9'<char<'A', return FAIL
        SUBB    A,#7
        CJNE    A,#10h,$+3
        JC      IO0050          ; if 'A'<=char<='F', return OK
        CJNE    A,#42,$+3
        JC      IO0040          ; if 'F'<char<'a', return FAIL
        SUBB    A,#20h
        CJNE    A,#10h,$+3
        JC      IO0050          ; if 'a'<=char<='f', return OK..

IO0040: CLR     C               ; ..else return FAIL
        MOV     A,#0FFh

IO0050: CPL     C
        RET

;____________________________________________________________________
                                                            ; GETCHAR

GETCHAR:        ; waits for a single ASCII character to be received
                ; by the UART.  places this character into A.
        JNB     SCON0_RI,$
        MOV     A,SBUF0
        CLR     SCON0_RI
        RET

;____________________________________________________________________
                                                             ; GETVAL

GETVAL:         ; waits for two ASCII hex digits to be received by
                ; the UART.  returns the hex value in A.

        PUSH    B
        PUSH    0
IO0060: CLR     SCON0_RI
        CALL    GETCHAR         ; first nibble
        MOV     0,A             ; store received char
        CALL    ASCII2HEX
        JC      IO0060          ; if not '0' thru 'F', don't accept
        SWAP    A               ; swap nibbles
        MOV     B,A             ; store nibble in B
        MOV     A,0             ; echo received char
        CALL    SENDCHAR
IO0070: CLR     SCON0_RI
        CALL    GETCHAR         ; second nibble
        MOV     0,A             ; store received char
        CALL    ASCII2HEX
        JC      IO0070          ; if not '0' thru 'F', don't accept
        ORL     A,B             ; combine nibbles
        MOV     B,A             ; store results in B
        MOV     A,0             ; echo received char
        CALL    SENDCHAR
        MOV     A,B             ; final result
        POP     0
        POP     B

        RET

SPACE:				;SEMNUL DE SPACE
	DB 10,13,0
;__________________________________________________________________________________________

;******************************************
;	ASTEAPTA SERIAL SAU TOT DE TIMER2
;******************************************8
GETCHAR_TOT1:		
		MOV TICK,#UART_TOT
		SETB TMR2CN0_TR2	;PORNESC TIMER 2
		CLR TOT_T2
	GETCHAR_TOT_11:
		JB     SCON0_RI,GETCHAR_TOT_3
		JNB TOT_T2,GETCHAR_TOT_11
	GETCHAR_TOT_2:
			SETB TOT_SER 	;SEMNALEZ EROARE DE TIMEOUT SERIAL
			CLR TOT_T2
RET

	GETCHAR_TOT_3:
        MOV     A,SBUF0
        CLR     SCON0_RI
		CLR TOT_SER		;SEMNALEZ CA NU E ERARE TIMEOUT
RET
;______________________________________________________________


;***********************************************************************************
;		RUTINE 	SPI
;*****************************************************************************************************
;***********************************************************************************
;		SCRI0U UN BYT SPI
;***********************************************************************************
WR_BYT:
			MOV SPI0DAT,A

			JNB SPI0CN0_SPIF ,$			;CIND E PE 1 ATTERMINAT TRANSMISIA
			CLR SPI0CN0_SPIF			;IL STREG PT URMATORUL BYT
				MOV A,SPI0DAT			;DIN CAUZA CA AR EBUFER ,SI ALTFEL RAMINE AGATZAT
;			MOV R7,A
;			CALL _SPI_Transfer
		RET
;___________________________________________________________________________________

;***********************************************************************************
;		CITESC UN BYT SPI
;***********************************************************************************
RD_BYT:
		    MOV A,#0FFH
		    MOV SPI0DAT,A
		    JNB SPI0CN0_SPIF,$
		    MOV A,SPI0DAT
			CLR SPI0CN0_SPIF
			;MOV R7,#000H
			;CALL _SPI_Transfer
		RET    
;___________________________________________________________________________________

;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



;****************************************************************************************************
;****************************************************************************************************
;
;		DRIVER TOUCH AT42QT111
;****************************************************************************************************
KEYB_TCH_INIT:		;INITIALIZEZ TASTATURA
	;==============	PRIMA DATA RESETEZ
	CLR T_SEL
		MOV A,#004H
		CALL WR_BYT	;SCRIU BITUL
	SETB T_SEL
	;=====================
			call WAIT_400MS
		;_____________
		MOV A,#090H			;DEVICE MODE
		MOV B,#11110000B	;TIMED ,11KEY,PARALEL,EDGE (NOT USED)
		CALL KYB_TCH_SEND_INSTR
		;_______________
		;	EVENTUAL CONFIGURARE CU GUARD KEY,PLM
	
		CALL WAIT_150_US
		CALL WAIT_150_US
			MOV A,#091H			;DEVICE MODE
			MOV B,#00000010B	;TIMED ,11KEY,PARALEL,EDGE (NOT USED)
			CALL KYB_TCH_SEND_INSTR
	
	 	CALL WAIT_150_US
		CALL WAIT_150_US
			MOV A,#092H			;sensibilitate
			MOV B,#10001000B	;TIMED ,11KEY,PARALEL,EDGE (NOT USED)
			CALL KYB_TCH_SEND_INSTR
	
	
	CALL WAIT_150_US
	CALL WAIT_150_US

	;==============	 calibrate key
	CLR T_SEL
		MOV A,#003H
		CALL WR_BYT	;SCRIU BITUL
	SETB T_SEL
	;=====================
	CALL WAIT_4MS		;4MS
	
RET
;=============================================================

;**************************
KYB_TCH_SEND_INSTR:		;TRIMIT INSTRUCTIUNEA DIN B LA ADRESA DIN A LA KEYBOARD
	CLR T_SEL
		CALL WR_BYT	;SCRIU BITUL
		CALL WAIT_150_US
		MOV A,B
		CALL WR_BYT
		CALL WAIT_150_US
	SETB T_SEL	
RET
;_________________________________________________________________

;*****************************************************************
KYB_TCH_READ_KEY:		;CITESC CA SI DOI BITI
	CLR T_SEL
		MOV A,#0C1H
		CALL WR_BYT
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			MOV KEY_H,A
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			MOV KEY_L,A
	SETB T_SEL
RET
;_________________________________________________________________


;************************************************************8
WAIT_KEY_X:		;WAIT TO PRESS KEY 
	CALL WAIT_RELEASE	;PENTRU KEYA ANTERIOARA DACA E INCA APASATA
			;__________	WAIT_KEY + PRESS
			WAIT_KEY_X_1:
				CALL WAIT_400MS
				JNB ALERT, WAIT_KEY_X_2
				JNB TOT4,WAIT_KEY_X_1
					;CALL CLR_TCH_KEY
RET
				WAIT_KEY_X_2:
				
				CALL READ_TCH_KEY
				MOV A,KEY_L					 	;VERIFIC SA NU FIE 0000H
				CJNE A,#000H,WAIT_KEY_X_2_A
					MOV A,KEY_H
					CJNE A,#000H,WAIT_KEY_X_2_A
					SJMP WAIT_KEY_X

				WAIT_KEY_X_2_A:
;				CALL CLR_TCH_KEY
;				CALL WAIT_RELEASE


RET
				WAIT_KEY_X_3:
RET
;________________________________________________________

;********************************************************
CLR_TCH_KEY:		;STERG ORICE POSIBILA INTRERUPERE EXISTENTA IN KEYBARD CONTROLER
PUSH ACC
	CLR T_SEL
		MOV A,#0C1H
		CALL WR_BYT
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			;MOV KEY_H,A
			CALL WAIT_150_US
		MOV A,#0FFH
			CALL WR_BYT
			;MOV KEY_L,A
	SETB T_SEL

POP ACC		
RET
;________________________________________________________

WAIT_RELEASE:
PUSH ACC
WAIT_RELEASE_1:	
	CALL READ_TCH_KEY
		MOV A,KEY_H
		CJNE A,#000H,WAIT_RELEASE_1
		MOV A,KEY_L
		CJNE A,#000H,WAIT_RELEASE_1
POP ACC
RET
;_____________________________












;***********************************************************************
;	TRANSFIRM DIN HEX IN 7 SEG
;***********************************************************************
HEX_2_7SEG:
	MOV DPTR,#SHW_DIG
	MOVC  A,@A+DPTR
	MOV B,A
RET


	;PT ZERO
	CJNE A,#010H,HEX_2_7SEG_1
		MOV B,#030H
		JMP HEX_2_7SEG_OUT
	HEX_2_7SEG_1:
	CJNE A,#001H,HEX_2_7SEG_2
		MOV B,#006H
		JMP HEX_2_7SEG_OUT
	HEX_2_7SEG_2:
	CJNE A,#002H,HEX_2_7SEG_3
		MOV B,#05BH
		JMP HEX_2_7SEG_OUT
	HEX_2_7SEG_3:
	CJNE A,#003H,HEX_2_7SEG_4
		MOV B,#04FH
		JMP HEX_2_7SEG_OUT
	HEX_2_7SEG_4:
	CJNE A,#004H,HEX_2_7SEG_5
		MOV B,#064H
		JMP HEX_2_7SEG_OUT
	HEX_2_7SEG_5:



HEX_2_7SEG_OUT:
RET





;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;		RUTINE I2C
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




;***********************************************************************		
;		CITESC PAGE_SIZE DE BYTI SI II PUN IN XRAM ,INCEPIND DE LA R0		
;**********************************************************************		
	I2C_READ_32_BYT:		
		MOV DPH,#000H
		MOV DPL,#000H
		MOV SMB_RW,#READ
			mov TARGET,#EEPROM_ADDR		;FIXEZ ADRESA DEVICE
			SETB SMB_SENDWORDADDR_H
			SETB SMB_SENDWORDADDR_L
			SETB SMB_BUSY
			CLR PSW_F1
				MOV R1,#PAGE_SIZE
			SETB SMB_SEND_START
			CLR SMB_ACKPOLL				;FLAG CA ASTEPT ACK
			CLR ERR						;STERG FLAGUL DE EROARE
			SETB SMB0CN0_STA
;		I2C_READ_32_BYT_A:				;DACA AM EROARE,ADICA NU AM ACK IES DIN RUTIN
;			JNB ERR,I2C_READ_32_BYT_B
;	RET
;		I2C_READ_32_BYT_B:	
			JB SMB_BUSY,$

	RET
;____________________________________________________________________


;***********************************************************************		
;		CITESC PAGE_SIZE DE BYTI SI II PUN IN XRAM ,INCEPIND DE LA R0		
;**********************************************************************		
	I2C_WRITE_32_BYT:		
		MOV DPH,#000H
		MOV DPL,#000H
		MOV SMB_RW,#WRITE
			mov TARGET,#EEPROM_ADDR		;FIXEZ ADRESA DEVICE
			SETB SMB_SENDWORDADDR_H
			SETB SMB_SENDWORDADDR_L
			SETB SMB_BUSY
			CLR PSW_F1
			CLR SMB_ACKPOLL				;FLAG CA ASTEPT ACK
				MOV A,#PAGE_SIZE
				ADD A,#0001H
				MOV R1,A
			SETB SMB_SEND_START
			CLR ERR
			SETB SMB0CN0_STA
			JB SMB_BUSY,$
	RET
;____________________________________________________________________

;***********************************************************************		
;		CITESC 64 DE BYTI SI II PUN IN XRAM ,INCEPIND DE LA R0		
;**********************************************************************		
	WAIT_I2C_MEM_IDLE:		
		MOV SMB_RW,#WRITE
			mov TARGET,#EEPROM_ADDR		;FIXEZ ADRESA DEVICE
			SETB SMB_SENDWORDADDR_H
			SETB SMB_SENDWORDADDR_L
			SETB SMB_BUSY
			SETB SMB_ACKPOLL				;FLAG CA ASTEPT ACK
			CLR PSW_F1
			SETB SMB_SEND_START
			CLR ERR
			SETB SMB0CN0_STA
			JB SMB_BUSY,$
	RET
;____________________________________________________________________


;***********************************************************************		
;		CITESC PAGE_SIZE DE BYTI SI II PUN IN XRAM ,INCEPIND DE LA R0 ADRESA ESTE DE 1 BYT		
;**********************************************************************		
	I2C_READ_1_ADR_32_BYT:		
		MOV DPH,#000H
		MOV DPL,#000H
		MOV SMB_RW,#READ
			;mov TARGET,#EEPROM_ADDR		;FIXEZ ADRESA DEVICE
			mov TARGET,#SMB_ADDR		;FIXEZ ADRESA DE DISPOZITIV ADRESABIL PE 1 BYT DRESA
			CLR SMB_SENDWORDADDR_H 		;FIINDCA AM DOAR UN BYT DE ADRESA
			SETB SMB_SENDWORDADDR_L
;			MOV WORD_ADDR_L,#000H	;CITESC ADRESA 000 DE LA INCEPUT
			SETB SMB_BUSY
			CLR PSW_F1
;				MOV R1,#014H
				MOV R1,#001H	;CITESC UN SINGUR BYT
			SETB SMB_SEND_START
			CLR SMB_ACKPOLL				;FLAG CA ASTEPT ACK
			SETB SMB0CN0_STA
			JB SMB_BUSY,$
	RET
;____________________________________________________________________

;***********************************************************************		
;		CITESC PAGE_SIZE DE BYTI SI II PUN IN XRAM ,INCEPIND DE LA R0		
;**********************************************************************		
	I2C_WRITE_1_ADR_32_BYT:		
		MOV DPH,#000H
		MOV DPL,#000H
		MOV SMB_RW,#WRITE
			mov TARGET,#SMB_ADDR		;FIXEZ ADRESA DE DISPOZITIV ADRESABIL PE 1 BYT DRESA
			CLR SMB_SENDWORDADDR_H
			SETB SMB_SENDWORDADDR_L
;			MOV WORD_ADDR_L,#003H
			SETB SMB_BUSY
			CLR PSW_F1
			CLR SMB_ACKPOLL				;FLAG CA ASTEPT ACK
				MOV R1,#002H		;CITI BITI SCRIU DE FAPT ESTE X-1
			SETB SMB_SEND_START
			SETB SMB0CN0_STA
			JB SMB_BUSY,$
	RET
;____________________________________________________________________







;*********************************************************************	
;		RUTINA PT COMUNICARE I2C,SE BAZEAZA PE INTRERUPERI I2C	
;*******************************************************************	
I2C_RUTINA:
		MOV A,SMB0CN0
		ANL A,#0F0H
		CJNE A,#SMB_MTSTA,TEST_SMB_MTDB
	;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	
	;Master Transmitter/Receiver: START condition transmitted.	
		JNB PSW_F1,MST_START_WRITE
			MOV A,SMB_RW
			MOV B,TARGET
			ORL A,B
			MOV SMB0DAT,A
			CLR SMB0CN0_STA
			CLR SMB0CN0_SI
			CLR SMB_SEND_START
	RET
	;_____________________________________________________	
		MST_START_WRITE:
			mov A,target
			MOV SMB0DAT,A
			CLR SMB0CN0_STA
			CLR SMB0CN0_SI
				MOV A,SMB_RW
				CJNE A,#READ,MST_START_WRITE_1
				SETB PSW_F1			;SETEZ FLAGUL CA SA ARAT CA ESTE WRITE
		MST_START_WRITE_1:
	RET
	;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	
	TEST_SMB_MTDB:	
		CJNE A,#SMB_MTDB,TEST_SMB_MRDB
	
	;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// Master Transmitter: Data byte (or Slave Address) transmitted	
		JNB SMB_ACKPOLL,TEST				;FLAG CA ASTEPT ACK
			JNB SMB0CN0_ACK,TEST_2
			SETB SMB0CN0_STO
			CLR SMB_BUSY						;PRIMIT ACK,DECI AM TERMINAT D ESCIRS
		RET
			TEST_2:
			SETB SMB0CN0_STA 						;TRIMIT DIN NOU STARTUL
		RET
		
		TEST:
		JNB SMB0CN0_ACK,SMB_EROR		;DAK  NU A PRIMIT ACK RESETEZ
	;		if (ACK) // Slave Address or Data Byte	
		JNB SMB_SEND_START,MST_SWICH_RCW
		JB SMB_SENDWORDADDR_H,MST_SENDADR_H		;DAK E FLAG,INSEAMAN CA TRE S ATRIMIT ADRESA HIGH
		JB SMB_SENDWORDADDR_L,MST_SENDADR_L	
			MOV A,SMB_RW
			CJNE A,#READ,MST_SEND_DATA			;DAKA ESTE WRITE ,INCEP S ATRIMIT DATELE	 
			 SETB SMB0CN0_STA
			 SETB PSW_F1
	RET
		SJMP MST_SEND_DATA						;DUPA CE AM TRIMIS ADRESA INCEP SA TRIMIT DATELE
		
		MST_SENDADR_H:
			CLR SMB_SENDWORDADDR_H		;STERG FLAGUL DE ADRES HIGH
			MOV SMB0DAT, WORD_ADDR_H 
	RET
		;_________________________________________________________--
		MST_SENDADR_L:
			CLR SMB_SENDWORDADDR_L		;STERG FLAGUL DE ADRES LOW
			MOV SMB0DAT, WORD_ADDR_L 
	RET
		;__________________________________________________________
		MST_SEND_DATA:
			DJNZ R1,MST_SEND_DATA_OUT	;SA NU DEPASESC MARIMEA PAGINII
		;MST_SEND_STOP	
			SETB SMB0CN0_STO
			CLR SMB_BUSY
	RET
		;_______________________________________________________
		MST_SEND_DATA_OUT:
			MOVX A,@DPTR				;CITESC DIN XRAM
			MOV SMB0DAT,A			;TIMIT BITUL
			INC DPTR
	RET
		;_______________________________________________________
		MST_SWICH_RCW:		;CAS A TREC IN MODUL D ERECEPTIE
		SETB SMB_SEND_START
	RET
		;______________________________________________________
	;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	
	
	
	TEST_SMB_MRDB:	
		CJNE A,#SMB_MRDB,SMB_OUT
	
	;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		;INCEP S ARECEPTIONEZ BITII
	MST_RCV_DATA:	
		MOV A,SMB0DAT
		MOVX @DPTR,A
		INC DPTR
		DJNZ R1,MST_RCV_DATA_OUT
			CLR SMB_BUSY 		;STERG FLAGUL DE SMSBUSY
			CLR SMB0CN0_ACK
			SETB SMB0CN0_STO
	RET
		
		MST_RCV_DATA_OUT:	
		;INC R0
		SETB SMB0CN0_ACK		;DAU ACKNOLEDGE
	RET
	;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		SMB_OUT:	
	RET
		SMB_EROR:	
		setb err		;semnalez eroare de smbus
	RET
;___________________________________________________________________________________________










ORG 02000H
SHW_DIG:	;AFISEZ DIGITII	 HEX IN 7SEG

DB	03FH	;VAL PT ZERO	
DB	006H	;VALOARE PT DISPLAY DIGIT 1
DB	05BH	;VAL PT DISPLAY DIGIT 2
DB	04FH	;VAL PT DISPLAY DIGIT 3
DB	066H	;VAL PT DISPLAY DIGIT 4
DB	06DH	;VAL PT DISPLAY DIGIT 5
DB	07DH	;VAL PT DISPLAY DIGIT 6
DB	007H	;VAL PT DISPLAY DIGIT 7
DB	07FH	;VAL PT DISPLAY DIGIT 8
DB	06FH	;VAL PT DISPLAY DIGIT 9
DB	077H	;VAL PT DISPLAY DIGIT A
DB	07CH	;VAL PT DISPLAY DIGIT B
DB	039H	;VAL PT DISPLAY DIGIT C
DB	05EH	;VAL PT DISPLAY DIGIT D
DB	079H	;VAL PT DISPLAY DIGIT E
DB	071H	;VAL PT DISPLAY DIGIT F







;   LD_PW	BIT	P3.4	;POWER LED
;LD_W	BIT	P3.3	;LEDWIFI
;LD_V	BIT	P3.2	;LEDVITRO
;LD_P	BIT	P3.1	;led plus key
;LD_MIN	BIT	P3.0	;LED_MINIM
;LDF3	BIT	P2.3
;LDF2	BIT	P2.2	
;LDF1	BIT	P2.1



;**************************************************************************8888
;	FORMAT SPIRIT SAPCE.LEVE IT IN BLANCK
;)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
SPIRIT_SPACE_FORMAT:
PUSH ACC
		MOV R0,#0C0H
	SPIRIT_SPACE_FORMAT_1:
		MOV A,#000H
		MOVX @R0,A
		INC R0
		CJNE R0,#0E0H,SPIRIT_SPACE_FORMAT_1
		MOV A,#0FFH
		MOVX @R0,A
	;_______________	FORMAT LED SPACE
		MOV A,#0FFH
		MOV R0,#0C7H
		MOVX @R0,A
			MOV R0,#0CFH
			MOVX @R0,A
		MOV R0,#0D7H
		MOVX @R0,A
			MOV R0,#0DFH
			MOVX @R0,A
POP ACC

RET
;_________________________________________________




STATUS_2_SPIRITS:
	MOV A,FOC_A
	ANL A,#0F0H
	CJNE A,#000H,TST_STATUS_2_SPIRITS_VITRO
		STS_2_S_VITRO:		;STATUS FOR VITRO
		MOV A,FOC_B
		SEL_SYMBOL_SPR:	;SELECT DYSPLAYED SYMBOL
			CALL SPIRIT_4_DG_CLEAR
		ANL A,#00001111B
		SEL_SYMBOL_SPR_0:	;STANBBY,LOWEST TEMP
			CJNE A ,#000H,SEL_SYMBOL_SPR_1
			MOV R7,#000H		;SELECT SYMBOL BLANK
			SJMP SEL_SYMBOL_SPR_OUT
		SEL_SYMBOL_SPR_1:	;STANBBY,LOWEST TEMP
			CJNE A ,#001H,SEL_SYMBOL_SPR_2
			MOV R7,#000H		;SELECT SYMBOL BLANK
			SJMP SEL_SYMBOL_SPR_OUT
		SEL_SYMBOL_SPR_2:	;STANBBY,LOWEST TEMP
			CJNE A ,#002H,SEL_SYMBOL_SPR_3
			MOV R7,#076H		;SELECT SYMBOL BLANK
			SJMP SEL_SYMBOL_SPR_OUT
		SEL_SYMBOL_SPR_3:	;STANBBY,LOWEST TEMP
			CJNE A ,#003H,SEL_SYMBOL_SPR_OUT
			MOV R7,#074H		;SELECT SYMBOL BLANK
			SJMP SEL_SYMBOL_SPR_OUT
		

		SEL_SYMBOL_SPR_OUT:

		
				CALL SYMBOL_2_STATIC_SPIRIT
				;_______________
				JMP STATUS_2_SPIRITS_OUT

	TST_STATUS_2_SPIRITS_VITRO:
		CJNE A,#010H,TST_STATUS_2_SPIRITS_WIFI
			CALL SPIRIT_4_DG_CLEAR
			SEL_SYMBOL_PWR_VITRO:
				MOV A,FOC_B	;PARAMETER 1 VALUE
			    ANL A,#00001111B	;DELET NO VALUE POWER
				CJNE A,#00AH,SEL_SYMBOL_PWR_VITRO_1
				MOV R7,#073H	;P SYMBOL
					SJMP SEL_SYMBOL_PWR_VITRO_OUT
			SEL_SYMBOL_PWR_VITRO_1:
				 	MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
					MOV R7,A
			SEL_SYMBOL_PWR_VITRO_OUT:
				CALL SYMBOL_2_STATIC_SPIRIT
					;______________	CLEAR 4DIG_DISPLAY_SPIRIT
					CALL SPIRIT_4_DG_CLEAR
				JMP STATUS_2_SPIRITS_OUT
		
		
		
		NOP

	TST_STATUS_2_SPIRITS_WIFI:
		CJNE A,#020H,TST_STATUS_2_SPIRITS_EROR
			CALL SYMBOL_RADIO_2_SPIRIT
;			CALL SPIRIT_4_DG_CLEAR
			JMP STATUS_2_SPIRITS_OUT
	TST_STATUS_2_SPIRITS_EROR:
		CJNE A,#0E0H,STATUS_2_SPIRITS_OUT
			CALL SYMBOL_ERR_2_SPIRIT
			;CALL ERROR_2_SPIRIT_SPACE
			
			
			
			
			
			
			
			
			NOP


STATUS_2_SPIRITS_OUT:

		CALL SPIRIT_2_SEG
RET


;**************************************************
;	COPY SYMBOL FROM R7 TO 4 DIFERENTO LOCATION FOR DISPLAY,IS THE SAME VALUE
;*************************************************8
SYMBOL_2_STATIC_SPIRIT:
		MOV B,#0BFH
		MOV A,FOC_A
		ANL A,#00000111B	;DELET NON NUMBER BIT
		ADD A,B
		MOV R0,A
			;-------------	4 ADDRES
			MOV A,R7	;BLANK DIGIT
			MOV B,A		;SAVE VALUE	
			MOVX @R0,A
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,R7
				MOVX @R0,A
				;_______________
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,R7
				MOVX @R0,A
				;_______________
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,R7
				MOVX @R0,A
RET
;__________________________________________________

;**************************************************
;	COPY SYMBOL FROM R7 TO 4 DIFERENTO LOCATION FOR DISPLAY,IS THE SAME VALUE
;*************************************************8
SYMBOL_RADIO_2_SPIRIT:
		MOV B,#0BFH
		MOV A,FOC_A
		ANL A,#00000111B	;DELET NON NUMBER BIT
		ADD A,B
		MOV R0,A
			;-------------	4 ADDRES
			MOV A,#008H	;BLANK DIGIT
			MOV B,A		;SAVE VALUE	
			MOVX @R0,A
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,#0048H
				MOVX @R0,A
				;_______________
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,#0049H
				MOVX @R0,A
				;_______________
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,#000H
				MOVX @R0,A
RET
;__________________________________________________

;**************************************************
;	COPY SYMBOL FROM R7 TO 4 DIFERENTO LOCATION FOR DISPLAY,IS THE SAME VALUE
;*************************************************8
SYMBOL_ERR_2_SPIRIT:
		MOV B,#0BFH
		MOV A,FOC_A
		ANL A,#00000111B	;DELET NON NUMBER BIT
		ADD A,B
		MOV R0,A
			;-------------	4 ADDRES
			MOV A,#079H	;E
			MOV B,A		;SAVE VALUE	
			MOVX @R0,A
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,#079H	;BLANK
				MOVX @R0,A
				;_______________
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,#079H
				MOVX @R0,A
				;_______________
				MOV A,R0
				ADD A,#008H
				MOV R0,A
				MOV A,#079H
				MOVX @R0,A
RET
;__________________________________________________


;******************************************************************
;	PUT ERRON NUMBER IN DISPLAY BIG,IN SPIRIT SAPCE
;****************************************************************88
ERROR_2_SPIRIT_SPACE:
PUSH ACC
					;MOV SG3,#04FH	;1
					MOV R0,#0C4H	;
					MOV A,#079H	;1
					MOVX @R0,A
						MOV R0,#0CCH	;
						MOV A,#079H	;1
						MOVX @R0,A
				    MOV R0,#0D4H	;			
					MOV A,#079H	;1
					MOVX @R0,A
						MOV R0,#0DCH	;
						MOV A,#079H	;1
						MOVX @R0,A
				;MOV SG4,#079H	;E			
				MOV A,FOC_A
				ANL A,#00000111B	;GET FIRE NUMBER
				MOV DPTR,#SHW_DIG
;				CLR A
				MOVC A,@A+DPTR
				MOV R7,A
				;________________
					MOV R0,#0C3H	; 	;PUT IN SPIRIT SAPCE
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CBH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D3H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DBH	;
						MOV A,R7	;1
						MOVX @R0,A	
				;_______________________	PUT ERRO NR IN SPIRIT SPACE
				MOV A,FOC_B
				SWAP A
					ANL A,#00001111B
					MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				MOV R7,A
				;________________
					MOV R0,#0C5H	; 	;PUT IN SPIRIT SAPCE MSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CDH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D5H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DDH	;
						MOV A,R7	;1
						MOVX @R0,A	
				;______________________
				MOV A,FOC_B
					ANL A,#00001111B
					MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				MOV R7,A
				;________________
					MOV R0,#0C6H	; 	;PUT IN SPIRIT SAPCE LSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CEH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D6H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DEH	;
						MOV A,R7	;1
						MOVX @R0,A
				;STOP ALL NON FIRE LEDS
				MOV R0,#0C7H
					MOVX A,@R0
					ORL A,#00001110B
					MOVX @R0,A
				MOV R0,#0CFH
					MOVX A,@R0
					ORL A,#00001110B
					MOVX @R0,A
				MOV R0,#0D7H
					MOVX A,@R0
					ORL A,#00001110B
					MOVX @R0,A
				MOV R0,#0DFH
					MOVX A,@R0
					ORL A,#00001110B
					MOVX @R0,A
				SETB LD_W
				SETB LD_V
POP ACC	
RET
;__________________________________________________________________

;*******************************************************************
;	PUT RECIVED HEX DATA IN SPRIT SAPCE.NUMBER /SYMBOLS
;*******************************************************************
WIFI_DATA_2_SPIRITS:
PUSH ACC
		MOV A,FOC_B	 	;P1R
		ANL A,#00001111B
		WIFI_DATA_2_SPIRITS_TEST_00:	;TEST IF IS LOW CURRENT,WAITING CONTACT AND CURRENT
			CJNE A,#000H,WIFI_DATA_2_SPIRITS_TEST_01 	
				CALL WIFI_DISPLAY_00
					SJMP WIFI_DATA_2_SPIRITS_OUT

		WIFI_DATA_2_SPIRITS_TEST_01: 				;01=LOW CURRENT CONECTED NOT IN POSITION
			CJNE A,#001H,WIFI_DATA_2_SPIRITS_TEST_02
				CALL WIFI_DISPLAY_01
					SJMP WIFI_DATA_2_SPIRITS_OUT
		
		
		WIFI_DATA_2_SPIRITS_TEST_02:
		 	CJNE A,#002H,WIFI_DATA_2_SPIRITS_TEST_03
				CALL WIFI_DISPLAY_02
					SJMP WIFI_DATA_2_SPIRITS_OUT

		WIFI_DATA_2_SPIRITS_TEST_03:
		 	CJNE A,#002H,WIFI_DATA_2_SPIRITS_HEX
				NOP
			   
		
		
		
		
		WIFI_DATA_2_SPIRITS_HEX:
		;WRITE 4 DIGIT DISPLAY FROM P0R,BD0R IN HEX FORMAT
		;_______________________	PUT ERRO NR IN SPIRIT SPACE
				MOV A,FOC_C
				SWAP A
					ANL A,#00001111B
					MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				MOV R7,A
				;________________
					MOV R0,#0C3H	; 	;PUT IN SPIRIT SAPCE MSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CBH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D3H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DBH	;
						MOV A,R7	;1
						MOVX @R0,A	
				;______________________
				MOV A,FOC_C
					ANL A,#00001111B
					MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				MOV R7,A
				;________________
					MOV R0,#0C4H	; 	;PUT IN SPIRIT SAPCE LSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CCH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D4H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DCH	;
						MOV A,R7	;1
						MOVX @R0,A
		
		
		;-------------------------------------------------------------
				MOV A,FOC_D
				SWAP A
					ANL A,#00001111B
					MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				MOV R7,A
				;________________
					MOV R0,#0C5H	; 	;PUT IN SPIRIT SAPCE MSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CDH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D5H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DDH	;
						MOV A,R7	;1
						MOVX @R0,A	
				;______________________
				MOV A,FOC_D
					ANL A,#00001111B
					MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
				MOV R7,A
				;________________
					MOV R0,#0C6H	; 	;PUT IN SPIRIT SAPCE LSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CEH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D6H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DEH	;
						MOV A,R7	;1
						MOVX @R0,A
WIFI_DATA_2_SPIRITS_OUT:
POP ACC
RET
;______________________________________________________________





;********************************************************************
;	CLEAR 4 DIG DISPLAY SPIRIT
;*****************************************************************
SPIRIT_4_DG_CLEAR:
PUSH ACC
	MOV R0,#0C3H		;LINE 1
	MOV A,#000H
	MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
	MOV R0,#0CBH		;LINE 2
	MOV A,#000H
	MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
	MOV R0,#0D3H		;LINE 3
	MOV A,#000H
	MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
	MOV R0,#0DBH		;LINE 3
	MOV A,#000H
	MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
		INC R0
		MOVX @R0,A
POP ACC
RET
;____________________________________________________________

;*********************************************************************
;	WRITE FLASH,CONSTANT VALUT TO LED  USING FOC_A,VALUE,THE SELECTED VALUE
;*********************************************************************
KEY_SEL_2_SPIRIT:
	MOV A,FOC_A
	ANL A,#0000111B		;USE ONLY FIRE NUMBER

		MOV B,SPR_LD
	KEY_SEL_2_SPIRIT_K1:
		CJNE A,#001H,KEY_SEL_2_SPIRIT_K2
			MOV A,SPR_LD
			;_____________________________________
			
			MOV R0,#0C7H	;LDE ADRESS LINE 1
			MOVX A,@R0
			ANL A,#00001110B;ALL FIRE LEDS ON
				SETB ACC.6	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0CFH	;LDE ADRESS LINE 2
			MOVX A,@R0
			ANL A,#00001110B;ALL FIRE LEDS ON
				;SETB ACC.6	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0D7H	;LDE ADRESS LINE 1
			MOVX A,@R0
			ANL A,#00001110B;ALL FIRE LEDS ON
				SETB ACC.6	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0DFH	;LDE ADRESS LINE 1
			MOVX A,@R0
			ANL A,#00001110B;ALL FIRE LEDS ON
				;SETB ACC.6	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________

			SJMP KEY_SEL_2_SPIRIT_KX
	KEY_SEL_2_SPIRIT_K2:
		CJNE A,#002H,KEY_SEL_2_SPIRIT_K3
			MOV A,SPR_LD
			;_____________________________________	ANL A,#11111101B	;LED_ON
			;_____________________________________
			
			MOV R0,#0C7H	;LDE ADRESS LINE 1
			MOVX A,@R0
			ANL A,#00001110B;ALL FIRE LEDS ON
				SETB ACC.5	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0CFH	;LDE ADRESS LINE 2
			MOVX A,@R0
			ANL A,#00001110B;ALL FIRE LEDS ON
				;SETB ACC.6	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0D7H	;LDE ADRESS LINE 1
			MOVX A,@R0
			ANL A,#00001110B;ALL FIRE LEDS ON
				SETB ACC.5	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0DFH	;LDE ADRESS LINE 1
			MOVX A,@R0
			ANL A,#00001110B;ALL FIRE LEDS ON
				;SETB ACC.6	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			SJMP KEY_SEL_2_SPIRIT_KX
	
	
	
	
	KEY_SEL_2_SPIRIT_K3:
		CJNE A,#003H,KEY_SEL_2_SPIRIT_KX	
			MOV A,SPR_LD
			;_____________________________________
			
			MOV R0,#0C7H	;LDE ADRESS LINE 1
			MOVX A,@R0
			ANL A,#00001110B;ALL FIRE LEDS ON
				SETB ACC.4	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0CFH	;LDE ADRESS LINE 2
			MOVX A,@R0
			ANL A,#00001110B;ALL FIRE LEDS ON
				;SETB ACC.6	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0D7H	;LDE ADRESS LINE 1
			MOVX A,@R0
			ANL A,#00001110B;ALL FIRE LEDS ON
				SETB ACC.4	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			MOV R0,#0DFH	;LDE ADRESS LINE 1
			MOVX A,@R0
			ANL A,#00001110B;ALL FIRE LEDS ON
				;SETB ACC.6	;STOP FIRE_1_LED
				MOVX @R0,A
			;________________
			;SJMP KEY_SEL_2_SPIRIT_KX
	KEY_SEL_2_SPIRIT_KX:
RET
;________________________________________________________________________


;**************************************************************************
;		aprind cele 5 leduri 4 D EFOCURI SI CEL D EPUTERE
;**************************************************************************
SHOW_POWER_ON_LEDS:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
	ANL A,#00001110B	;
	MOVX @R0,A
		MOV R0,#0CFH
		MOVX A,@R0
		ANL A,#00001110B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
	ANL A,#00001110B
	MOVX @R0,A
		MOV R0,#0DFH
		MOVX A,@R0
		ANL A,#00001110B
		MOVX @R0,A
POP ACC
RET
;_______________________________________________________________________

;**********************************
;	START LEDS FOR -,+,TIMER
;**********************************
VITRO_CONTROLS_ON:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
	ANL A,#11110001B	;
	MOVX @R0,A
		MOV R0,#0CFH
		MOVX A,@R0
		ANL A,#11110001B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
	ANL A,#11110001B
	MOVX @R0,A
		MOV R0,#0DFH
		MOVX A,@R0
		ANL A,#11110001B
		MOVX @R0,A
POP ACC
RET
;_______________________________________________

;**********************************
;	STOP LEDS FOR -,+,TIMER
;**********************************
VITRO_CONTROLS_OFF:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
	ORL A,#00001110B	;
	MOVX @R0,A
		MOV R0,#0CFH
		MOVX A,@R0
		ORL A,#00001110B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
	ORL A,#00001110B
	MOVX @R0,A
		MOV R0,#0DFH
		MOVX A,@R0
		ORL A,#00001110B
		MOVX @R0,A
POP ACC
RET
;_______________________________________________

;**********************************
;	STOP LEDS FOR -,+,TIMER
;**********************************
FLEX_LED_SELECT_ON:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
	ORL A,#11100000B	;
	MOVX @R0,A
		MOV R0,#0CFH
		MOVX A,@R0
		ORL A,#11100000B
		CLR ACC.7
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
	ORL A,#11100000B
	MOVX @R0,A
		MOV R0,#0DFH
		MOVX A,@R0
		ORL A,#11100000B
		CLR ACC.7
		MOVX @R0,A
POP ACC
RET
;_______________________________________________















;*************************************************************************
;	SET ALL 3 LED FOR FIRE KEY ON
;*************************************************************************
SET_3LED_SPIRIT:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
	ANL A,#11111000B	;ALL ON
	MOVX @R0,A
		MOV R0,#0CFH
		MOVX A,@R0
		ANL A,#11111000B	;ALL ON
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
	ANL A,#11111000B	;ALL ON
	MOVX @R0,A
		MOV R0,#0DFH
		MOVX A,@R0
		ANL A,#11111000B	;ALL ON
		MOVX @R0,A
POP ACC
RET
;_______________________________________________________________________

;***********************************************************************
;		SET VITRO LED ONN
;***********************************************************************
SET_VITRO_LED:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
		ANL A,#11101111B
		MOVX @R0,A
	MOV R0,#0CFH
	MOVX A,@R0
		ANL A,#11101111B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
		ANL A,#11101111B
		MOVX @R0,A
	MOV R0,#0DFH
	MOVX A,@R0
		ANL A,#11101111B
		MOVX @R0,A
POP ACC
RET
;_________________________________________________________

;***********************************************************************
;		SET VITRO LED ONN
;***********************************************************************
CLR_VITRO_LED:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
		ORL A,#00010000B
		MOVX @R0,A
	MOV R0,#0CFH
	MOVX A,@R0
		ORL A,#00010000B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
		ORL A,#00010000B
		MOVX @R0,A
	MOV R0,#0DFH
	MOVX A,@R0
		ORL A,#00010000B
		MOVX @R0,A
POP ACC
RET
;_________________________________________________________	

;***********************************************************************
;		SET VITRO LED ONN
;***********************************************************************
SET_WIFI_LED:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
		ANL A,#11011111B
		MOVX @R0,A
	MOV R0,#0CFH
	MOVX A,@R0
		ANL A,#11011111B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
		ANL A,#11011111B
		MOVX @R0,A
	MOV R0,#0DFH
	MOVX A,@R0
		ANL A,#11011111B
		MOVX @R0,A
POP ACC
RET
;_________________________________________________________

;***********************************************************************
;		SET VITRO LED ONN
;***********************************************************************
CLR_WIFI_LED:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
		ORL A,#00100000B
		MOVX @R0,A
	MOV R0,#0CFH
	MOVX A,@R0
		ORL A,#00100000B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
		ORL A,#00100000B
		MOVX @R0,A
	MOV R0,#0DFH
	MOVX A,@R0
		ORL A,#00100000B
		MOVX @R0,A
POP ACC
RET
;_________________________________________________________

;***********************************************************************
;		SETB 3 LED OF FIRE
;***********************************************************************
CLR_3_LED:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
		ORL A,#00000111B
		MOVX @R0,A
	MOV R0,#0CFH
	MOVX A,@R0
		ORL A,#00000111B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
		ORL A,#00000111B
		MOVX @R0,A
	MOV R0,#0DFH
	MOVX A,@R0
		ORL A,#00000111B
		MOVX @R0,A
POP ACC
RET
;_________________________________________________________

;***********************************************************************
;		CLR 3 LED OF FIRE
;***********************************************************************
SET_3_LED:
PUSH ACC
	MOV R0,#0C7H
	MOVX A,@R0
		ANL A,#11111000B
		MOVX @R0,A
	MOV R0,#0CFH
	MOVX A,@R0
		ANL A,#11111000B
		MOVX @R0,A
	MOV R0,#0D7H
	MOVX A,@R0
		ANL A,#11111000B
		MOVX @R0,A
	MOV R0,#0DFH
	MOVX A,@R0
		ANL A,#11111000B
		MOVX @R0,A
POP ACC
RET
;_________________________________________________________	

	
;*************************************************************
;		PREPARE GET STATUS VALUES FOR SENDING
;*************************************************************
LOAD_GET_STAT_VAL:
	MOV CLST,#'>'
	MOV	INST,#0D0H	;	DX INSTR=GET STAT
	MOV P1T,#000H 
	MOV P0T,#000H
	MOV BD0T,#000H
RET
;_____________________________________________________________


;SET_3_LED



;*******************************************************************************************************888
;	DRIVER FOR DISPLAY 3 SEG
;**********************************************************************************************************
DISPLAY_DRIVER_1_00:
;**********************************8



;**********************************8
TIMER_4_ISR:
		MOV SFRPAGE,#010H
	CLR TMR4CN0_TF4H
		MOV SFRPAGE,#000H
PUSH ACC
PUSH 000H
PUSH 001H
	DEC TIKT4_D
	MOV A,TIKT4_D
	CJNE A,#000H,TIMER_4_ISR_1
		SETB TOT4_D
		MOV TIKT4_D,#TICK4D_V	;REWRITE VALUE FOR TICK 4 DISPLAY
		CALL SPIRIT_2_SEG
		MOV A,SPR_AD
		CJNE A,#0C0H,TIMER_4_ISR_1	;EVERY 4 NEW DISPLAY 2SEC IS CHEKING THE STATUS OF ALL PERIF
			CALL SYSTEM_CHECK
			SETB ST_UPD			;SIGNALING NEW UPDATED STATUS
;			MOV SFRPAGE,#010H
;		CLR TMR4CN0_TR4	  		;STOP TIMER 4
;	   		MOV SFRPAGE,#010H
	TIMER_4_ISR_1:
POP 001H
POP 000H
POP ACC
RET
;__________________________________________________________

;*******************************************************************
; MOV ONE LINE FROM V-RAM IN SEG SPACE(SPACE FOR SEGMENTS)		
;*******************************************************************
SPIRIT_2_SEG:	;MOVE SPIRIT IN RAM DISPLAY SPACE  FIRST ADDRES IS IN SPIRIT ADRES
PUSH 000H
PUSH ACC
PUSH 001H
PUSH 000H
	MOV R0,SPR_AD
	SPIRIT_2_SEG_1:
		MOVX A,@R0
		INC R0
		MOV SG0,A
			MOVX A,@R0
			INC R0
			MOV SG1,A
		MOVX A,@R0
		INC R0
		MOV SG2,A
			MOVX A,@R0
			INC R0
			MOV SG3,A
			MOVX A,@R0
		INC R0
		MOV SG4,A
			MOVX A,@R0
			INC R0
			MOV SG5,A
		MOVX A,@R0
		INC R0
		MOV SG6,A
			MOVX A,@R0
			INC R0
			MOV SPR_LD,A
			CALL WRT_SPIRIT_2_LED ;WRITE ALSO THE VALUE OF LEDS
		;_______________________________________________		
		;TST_END OF DATA	  	;IF END OF V-RAM DATA,RESET START ADRESS
			MOVX A,@R0
			CJNE A,#0FFH,SPIRIT_2_SEG_2
				;MOV DPTR,#SPIRIT_TABLE
				MOV SPR_AD,#0C0H
	CALL WRT_LED_8_DATA
POP 000H
POP 001H
POP ACC
POP 000H
RET
		SPIRIT_2_SEG_2:
	MOV SPR_AD,R0
	CALL WRT_LED_8_DATA
POP 000H
POP 001H
POP ACC
POP 000H
RET
;_________________________________________________


;*************************************************
;	CHECK ALL FIRE
;**********************************
SYSTEM_CHECK:
;SAVE ACTUAL CAHCE
PUSH 000H
PUSH 001H
	MOV R0,#0F0H	;POINTER FOR SAVING CACHE
	MOV R1,#01BH	;POINTER OF CACHE
	SYSTEM_CHECK_1:
		MOV A,@R1
		MOVX @R0,A
		INC R0
		INC R1
		CJNE R1,#020H,SYSTEM_CHECK_1	;END OF CACHE SPACE
;____________________________
	MOV FOC_A,#001H	;CHEK STAT INSTR
CALL WAIT_4MS
CALL WAIT_4MS
CALL WAIT_4MS

    CALL READ_STATUS
;	CALL LOAD_SIMULATE_F1_NO_ERROR
;	CALL LOAD_SIMULATE_1_P5
;	CALL LOAD_SIMULATE_ER_07
;	CLR ERR
		MOV FOC1A,INSR
		MOV FOC1B,P1R
		MOV FOC1C,P0R	;UPDATE STATUS REGISTER
		MOV FOC1D,BD0R
	    	MOV FOC_A,FOC1A
			MOV FOC_B,FOC1B
			MOV FOC_C,FOC1C
			MOV FOC_D,FOC1D
		;_______________________________
			CALL STAT_2_SPIR_FIRE_DIG

;____________________________
	MOV FOC_A,#002H	;CHEK STAT INSTR
CALL WAIT_4MS
    CALL READ_STATUS
;	CALL LOAD_SIMULATE_F2_NO_ERROR
;	CALL LOAD_SIMULATE_1_P5
;	CALL LOAD_SIMULATE_2_R
;	CLR ERR
		MOV FOC2A,INSR
		MOV FOC2B,P1R
		MOV FOC2C,P0R	;UPDATE STATUS REGISTER
		MOV FOC2D,BD0R
	    	MOV FOC_A,FOC2A
			MOV FOC_B,FOC2B
			MOV FOC_C,FOC2C
			MOV FOC_D,FOC2D
		;_______________________________
			CALL STAT_2_SPIR_FIRE_DIG

;____________________________
	MOV FOC_A,#003H	;CHEK STAT INSTR
;CALL WAIT_400MS
CALL WAIT_4MS
;MOV R0,#000H
;DJNZ R0,$
    CALL READ_STATUS

;	CALL LOAD_SIMULATE_F1_NO_ERROR
;	CALL LOAD_SIMULATE_1_P5
;	CALL LOAD_SIMULATE_ER_07
;	CLR ERR
		MOV FOC3A,INSR
		MOV FOC3B,P1R
		MOV FOC3C,P0R	;UPDATE STATUS REGISTER
		MOV FOC3D,BD0R
	    	MOV FOC_A,FOC3A
			MOV FOC_B,FOC3B
			MOV FOC_C,FOC3C
			MOV FOC_D,FOC3D
		;_______________________________
			CALL STAT_2_SPIR_FIRE_DIG
	NOP
;RECOVER CACHE
	MOV R0,#0F0H	;POINTER FOR SAVING CACHE
	MOV R1,#01BH	;POINTER OF CACHE
	SYSTEM_CHECK_9:
		MOVX A,@R0
		MOV @R1,A
		INC R0
		INC R1
		CJNE R1,#020H,SYSTEM_CHECK_9	;END OF CACHE SPACE
	POP 001H
	POP 000H
RET
;________________________________







;********************************************************8888
;	DISPLAY ONLY STAUS IN 3 DIGIT OF FIRE
;************************************************************
STAT_2_SPIR_FIRE_DIG:
	MOV A,FOC_A
	ANL A,#0F0H
	CJNE A,#000H,TST_STATUS_2_FIRE_DIG_VITRO
		STS_2_FIRE_DIG_VITRO:		;STATUS FOR VITRO
		MOV A,FOC_B
		FIRE_DIG_SYMBOL_SPR:	;SELECT DYSPLAYED SYMBOL
		ANL A,#00001111B
		SEL_SYMBOL_FIRE_DIG_0:	;STANBBY,LOWEST TEMP
			CJNE A ,#000H,SEL_SYMBOL_FIRE_DIG_1
			MOV R7,#000H		;SELECT SYMBOL BLANK
				SJMP SEL_SYMBOL_FIRE_DIG_OUT
		SEL_SYMBOL_FIRE_DIG_1:	;STANBBY,LOWEST TEMP
			CJNE A ,#001H,SEL_SYMBOL_FIRE_DIG_2
			MOV R7,#040H		;SELECT SYMBOL -
				SJMP SEL_SYMBOL_FIRE_DIG_OUT
		SEL_SYMBOL_FIRE_DIG_2:	;STANBBY,LOWEST TEMP
			CJNE A ,#002H,SEL_SYMBOL_FIRE_DIG_3
			MOV R7,#076H		;SELECT SYMBOL H
				SJMP SEL_SYMBOL_FIRE_DIG_OUT
		SEL_SYMBOL_FIRE_DIG_3:	;STANBBY,LOWEST TEMP
			CJNE A ,#003H,SEL_SYMBOL_FIRE_DIG_OUT
			MOV R7,#074H		;SELECT SYMBOL h
				;SJMP SEL_SYMBOL_SPR_OUT
			;CLEAR POSIBLE SYMBOLS OF 4 DIGIT DISPLAY
	SEL_SYMBOL_FIRE_DIG_OUT:
				CALL SYMBOL_2_STATIC_SPIRIT
				;_______________
				JMP STATUS_2_FIRE_DIG_OUT

	
	
	TST_STATUS_2_FIRE_DIG_VITRO:
		CJNE A,#010H,TST_STATUS_2_FIRE_DIG_WIFI
			;CALL SPIRIT_4_DG_CLEAR
			SEL_SYMBOL_FIRE_DIG_PWR_VITRO:
				MOV A,FOC_B	;PARAMETER 1 VALUE
			    ANL A,#00001111B	;DELET NO VALUE POWER
				CJNE A,#00AH,SEL_SYMBOL_PWR_FIRE_DIG_VITRO_1
				MOV R7,#073H	;P SYMBOL
					SJMP SEL_SYMBOL_PWR_FIRE_DIG_VITRO_OUT
			SEL_SYMBOL_PWR_FIRE_DIG_VITRO_1:
				 	MOV DPTR,#SHW_DIG
					MOVC A,@A+DPTR
					MOV R7,A
			SEL_SYMBOL_PWR_FIRE_DIG_VITRO_OUT:
				CALL SYMBOL_2_STATIC_SPIRIT
				JMP STATUS_2_FIRE_DIG_OUT
		NOP



	TST_STATUS_2_FIRE_DIG_WIFI:
		CJNE A,#020H,TST_STATUS_2_FIRE_DIG_EROR
			CALL SYMBOL_RADIO_2_SPIRIT
;			CALL SPIRIT_4_DG_CLEAR
			JMP STATUS_2_FIRE_DIG_OUT
	TST_STATUS_2_FIRE_DIG_EROR:
;		CJNE A,#0E0H,STATUS_2_SPIRITS_OUT
			CALL SYMBOL_ERR_2_SPIRIT
			;CALL ERROR_2_SPIRIT_SPACE
			NOP


STATUS_2_FIRE_DIG_OUT:
RET
;___________________________________________________________






;************************************************************8888
;	'READ STATUS  FORMAT: < ? FOC_NR 00 CRC
;response format	 > ? FOC_NR 00 STAD_1 STAT_2 STAT_3 CRC
;****************************************************************
READ_STATUS:
;	MOV TIKT5,#030H			  ;MULTIPLE OF TIMER5 TOT

	CALL LOAD_GET_STAT_VAL		;LOAD DEFAULT VALUE FOR STATUS
	MOV A,FOC_A					;ADD FIRE NUMBER
	ANL A,#00000111B
	MOV B,A
	MOV A,INST
	ADD A,B
	MOV INST,A					;PUT FIRE NUMBER VALUE
SEND_COMMAND:
	MOV A,SBUF0			;READ BUFFER,AND CLEAR FLAG
	CLR SCON0_RI
	MOV SFRPAGE,#010H
	MOV TMR5H ,#TIME5H
	MOV TMR5L ,#TIME5L
		MOV SFRPAGE,#000H
		MOV TIKT5,#003H			  ;MULTIPLE OF TIMER5 TOT
	CLR TOT
	CLR ERR
	;_____________________
	MOV R0,#030H	;PAKET_STAT RAM START ADDRES
	MOV B,#0A5H		;START CRC VALUE
	MOV CLST,#'>'	;>
	READ_STATUS_1:
		MOV A,@R0
		CALL SENDCHAR
		ADD A,B
		MOV B,A
		INC R0
		CJNE R0,#035H,READ_STATUS_1	; PAKET_END_ADDRESS_RAM
		MOV A,B
		CALL SENDCHAR
	;__________________________	
	;__________________________
			MOV SFRPAGE,#010H
				SETB TMR5CN0_TR5	;START TIMER 5
			MOV SFRPAGE,#000H
;		MOV A,#055H	;SA FIE CEVA IN BUFER	
 		JNB     SCON0_TI,$            ; wait TI0l present char gone
	READ_STATUS_2:
		CALL GETCHAR_TOT 		;CHECK HEADER >
			JB TOT,READ_STATUS_4
		MOV R0,#038H		;START RECIVED_DATA_ADRESS_RAM
		READ_STATUS_3:	
			CALL GETCHAR_TOT
			JB TOT,READ_STATUS_4
			MOV @R0,A
			INC R0
			CJNE R0,#03CH,READ_STATUS_3
				CLR ERR
				CLR TOT
					MOV SFRPAGE,#010H
				CLR TMR5CN0_TR5	;STOP TIMER 5
					MOV SFRPAGE,#000H
		SETB DBG
RET
		READ_STATUS_4:	;TIMOUT OCCURED NO ANSWER
			SETB ERR
			CLR TOT
				MOV SFRPAGE,#010H
			CLR TMR5CN0_TR5	;STOP TIMER 5
				MOV SFRPAGE,#000H
			;SET ERROR VALUES
			MOV A,INST
			ANL A,#00000111B	;USE FOC NUMBER
			MOV B,#0E0H			;TIMOUT ERROR
			ADD A,B
			MOV INSR,A
			MOV P1R,#000H		;TIMEOUT ERROR EROR
			
		SETB DBG
RET
;________________________________________________________


;*************************************************************
;	GETCHAR CU TIMEOUT DAT DE TIMER5
;*************************************************************
GETCHAR_TOT:
		JB     SCON0_RI,GETCHAR_TOT_1
    	JNB TOT,GETCHAR_TOT
		MOV A,#055H
;		SETB ERR		;SEMNALEZ EROARE DE TIMEOUT
		CLR     SCON0_RI 	;STERG FLAG IN CAZ C AAM PRINS COADA DE LA UN BYTE
RET
	GETCHAR_TOT_1:	
		MOV     A,SBUF0
        CLR     SCON0_RI
RET
;___________________________________________________________
















;*****************************************************
;	WRITE VALUE OF SPIRIT TO 8 LED  1-F1,2-F2,3-F3,4-,5,VITRO,6-WIFI,7PWR,8-+	
;**************************************************88
WRT_SPIRIT_2_LED:	
;	MOV A,
	MOV C,ACC.7
	MOV LD_FL,C
		MOV C,ACC.6
		MOV LDF1,C
	MOV C,ACC.5
	MOV LDF2,C
		MOV C,ACC.4
		MOV LDF3,C
	MOV C,ACC.3
	MOV LD_MIN,C
		MOV C,ACC.2
		MOV LD_P,C
	MOV C,ACC.1
	MOV LD_TOT,C
		MOV C,ACC.0
		MOV LD_PW,C
RET
;_________________________________________________________

;*****************************************************************
;	WRITE COMPLET ALL DISPLAY 7 SEGMENTS VALUE TO WRITE AR EIN SG0,SG1,SG2..SG6
;***************************************************************88
WRT_LED_8_DATA:
	CLR STB
   	MOV A,#040H
	CALL WRT_BYTE_MCW
	SETB STB
	CALL WAIT_MCW
;__________________________________   
   	CLR STB
   	MOV A,#0C0H
	CALL WRT_BYTE_MCW
	CALL WAIT_MCW	
;______________________________
	MOV A,SG0
	CALL WRT_SEG_DATA_MCW
		MOV A,SG1
		CALL WRT_SEG_DATA_MCW
	MOV A,SG2
	CALL WRT_SEG_DATA_MCW
		MOV A,SG3
		CALL WRT_SEG_DATA_MCW
	MOV A,SG4
	CALL WRT_SEG_DATA_MCW
		MOV A,SG5
		CALL WRT_SEG_DATA_MCW
	MOV A,SG6
	CALL WRT_SEG_DATA_MCW
;		MOV A,SG7
;		CALL WRT_SEG_DATA_MCW
SETB STB
RET
;_________________________________________________________



;********************************************************************************8
;		DIFERENT SYMBOLS ON 4 DIGIT SCREEN
;********************************************************************************
WIFI_DISPLAY_00:
MOV DPTR,#SPIRIT_WIFI_ONPLACE
CALL SPIRIT_WIFI_2_VRAM
RET
				;________________
				MOV R7,#040H	
					MOV R0,#0C3H	; 	;PUT IN SPIRIT SAPCE MSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CBH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D3H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DBH	;
						MOV A,R7	;1
						MOVX @R0,A	
				;___________________________
				MOV R7,#040H
					MOV R0,#0C4H	; 	;PUT IN SPIRIT SAPCE LSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CCH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D4H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DCH	;
						MOV A,R7	;1
						MOVX @R0,A
			
		;-------------------------------------------------------------
				;________________
				MOV R7,#040H
					MOV R0,#0C5H	; 	;PUT IN SPIRIT SAPCE MSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CDH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D5H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DDH	;
						MOV A,R7	;1
						MOVX @R0,A	
				;________________
				MOV R7,#040H	
					MOV R0,#0C6H	; 	;PUT IN SPIRIT SAPCE LSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CEH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D6H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DEH	;
						MOV A,R7	;1
						MOVX @R0,A
;MOV DPTR,#SPIRIT_WIFI_ONPLACE
;CALL SPIRIT_WIFI_2_VRAM
RET
;_________________________________________________________________________________


;********************************************************************************8
;		DIFERENT SYMBOLS ON 4 DIGIT SCREEN
;********************************************************************************
WIFI_DISPLAY_01:
				;________________
				MOV R7,#03FH	
					MOV R0,#0C3H	; 	;PUT IN SPIRIT SAPCE MSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CBH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D3H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DBH	;
						MOV A,R7	;1
						MOVX @R0,A	
				;___________________________
				MOV R7,#03FH
					MOV R0,#0C4H	; 	;PUT IN SPIRIT SAPCE LSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CCH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D4H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DCH	;
						MOV A,R7	;1
						MOVX @R0,A
			
		;-------------------------------------------------------------
				;________________
				MOV R7,#03FH
					MOV R0,#0C5H	; 	;PUT IN SPIRIT SAPCE MSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CDH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D5H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DDH	;
						MOV A,R7	;1
						MOVX @R0,A	
				;________________
				MOV R7,#03FH	
					MOV R0,#0C6H	; 	;PUT IN SPIRIT SAPCE LSB
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0CEH	;
						MOV A,R7	;1
						MOVX @R0,A
				    MOV R0,#0D6H	;
					MOV A,R7	;1
					MOVX @R0,A
						MOV R0,#0DEH	;
						MOV A,R7	;1
						MOVX @R0,A
RET
;_________________________________________________________________________________


;***************************************************************************
;COPY VALUE FROM CODE SPACE IN 4 LINE/4 DIGIT FOR VIDEO RAM
;**************************************************************************8
SPIRIT_WIFI_2_VRAM:
	;DPTR IS ALREADY WITH THE SELECTED ADDRES
	;LINE_1
	MOV R0,#0C3H
	SPIRIT_WIFI_2_VRAM_1:
		CLR A
		MOVC A,@A+DPTR
		MOVX @R0,A
		INC R0
		INC	DPTR
			CLR A
			MOVC A,@A+DPTR
			MOVX @R0,A
			INC R0
			INC	DPTR
	    CLR A
		MOVC A,@A+DPTR
		MOVX @R0,A
		INC R0
		INC	DPTR
			CLR A
			MOVC A,@A+DPTR
			MOVX @R0,A
			INC R0
			INC	DPTR
		;_______________________
		 MOV A,R0
		 MOV B,#004H
		 ADD A,B
		 MOV R0,A
		 CJNE A,#0E3H,SPIRIT_WIFI_2_VRAM_1
RET
;_________________________________________________



WIFI_DISPLAY_02:
RET
;________________________________________________


; 4 CHARACTERS FOR 4 LINES ..THE 4 DIGIT LEDS
SPIRIT_WIFI_ONPLACE:
;DB 028H,001H,008H,005H
;DB 011H,008H,001H,00AH	  SE MISCA CERCUL..CAM AIUREA
;DB 028H,001H,008H,005H
;DB 011H,008H,001H,00AH

DB 039H,009H,009H,00FH
DB 039H,009H,009H,00FH
DB 039H,009H,009H,00FH
DB 039H,009H,009H,00FH









SPIRIT_TABLE:	
;	SG1	  SG2  SG3   SG4  SG5  SG6  SG7    LED 1,2,3,-,VITRO,RADIO,PWR,+
DB	008H,07DH,03FH,	030H,000H,000H,000H,  000H	   ;SPIRIT 1
DB	048H,07DH,000H,	000H,001H,001H,000H,  000H	   ;SPIRIT 1
DB	049H,07DH,03FH,	000H,000H,000H,006H,  000H	   ;SPIRIT 1
DB	000H,07DH,004H,	000H,008H,008H,000H,  000H	   ;SPIRIT 1
DB  0FFH	;END OF DATA SIGNAL

























